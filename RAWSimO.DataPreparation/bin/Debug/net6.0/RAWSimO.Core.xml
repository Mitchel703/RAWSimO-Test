<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RAWSimO.Core</name>
    </assembly>
    <members>
        <member name="T:RAWSimO.Core.Bots.BotCrashHandler">
            <summary>
            Used to keep track of potential collisions that might occur due to the asynchronous update of the robot agents.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Bots.BotCrashHandler.#ctor(RAWSimO.Core.Instance)">
            <summary>
            Creates a new handler.
            </summary>
            <param name="instance">The instance this handler belongs to.</param>
        </member>
        <member name="F:RAWSimO.Core.Bots.BotCrashHandler._instance">
            <summary>
            The instance this handler belongs to.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Bots.BotCrashHandler._potentialCrashBots">
            <summary>
            All potential crash bots that need to be checked during the next update.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Bots.BotCrashHandler.AddPotentialCrashBot(RAWSimO.Core.Elements.Bot)">
            <summary>
            Adds a bot the the list of potentially crashed bots.
            </summary>
            <param name="bot">The bot that might have seen a collision.</param>
        </member>
        <member name="M:RAWSimO.Core.Bots.BotCrashHandler.GetNextEventTime(System.Double)">
            <summary>
            The next event when this element has to be updated.
            </summary>
            <param name="currentTime">The current time of the simulation.</param>
            <returns>The next time this element has to be updated.</returns>
        </member>
        <member name="M:RAWSimO.Core.Bots.BotCrashHandler.Update(System.Double,System.Double)">
            <summary>
            Updates the element to the specified time.
            </summary>
            <param name="lastTime">The time before the update.</param>
            <param name="currentTime">The time to update to.</param>
        </member>
        <member name="T:RAWSimO.Core.Bots.BotHazard">
            <summary>
            The legacy robot driver implementation analogue to the one used in 'Alphabet Soup'.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Bots.BotHazard.Config">
            <summary>
            The configuration used for path planning.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Bots.BotHazard.#ctor(RAWSimO.Core.Instance,RAWSimO.Core.Configurations.SimplePathPlanningConfiguration)">
            <summary>
            Creates a new legacy bot driver object.
            </summary>
            <param name="instance">The instance this bot belongs to.</param>
            <param name="config">The configuration for path planning.</param>
        </member>
        <member name="P:RAWSimO.Core.Bots.BotHazard.XVelocityTargeted">
            <summary>
            The bot's targeted velocity regarding the x-dimension.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Bots.BotHazard.OrientationTargeted">
            <summary>
            The bot's targeted orientation.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Bots.BotHazard.YVelocityTargeted">
            <summary>
            The bot's targeted velocity regarding the y-dimension.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Bots.BotHazard.XTarget">
            <summary>
            The current target of the bot. (x-coordinate)
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Bots.BotHazard.YTarget">
            <summary>
            The current target of the bot. (y-coordinate)
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Bots.BotHazard.EvadeDistance">
            <summary>
            The bot will evade when seeing something within this distance.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Bots.BotHazard._frustration">
            <summary>
            Frustration is used to adapt the speed of the bot.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Bots.BotHazard._stuckCount">
            <summary>
            Counts the number of consecutive moments (updates) being stuck.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Bots.BotHazard._sqrt2">
            <summary>
            The square-root of two (precalculated).
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Bots.BotHazard._botEvade">
            <summary>
            The predefined evasion state.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Bots.BotHazard._currentWaypoint">
            <summary>
            The current waypoint to go to.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Bots.BotHazard._previousWaypoint">
            <summary>
            The previous waypoint the bot came from.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Bots.BotHazard._enteredSemaphores">
            <summary>
            The semaphores this bot is currently associated with.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Bots.BotHazard._enteredElevators">
            <summary>
            The elevators this bot is currently associated with.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Bots.BotHazard.CurrentWaypoint">
            <summary>
            The current waypoint this bot is headed.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Bots.BotHazard.FreePreviousWaypoint">
            <summary>
            Discards the lock on the waypoint the bot is currently coming from.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Bots.BotHazard.Idle(System.Double,System.Double)">
            <summary>
            Idle is called whenever the <code>StateQueue</code> is empty, and should attempt to allocate tasks for the podbot
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Bots.BotHazard.GetBestEvadeDirection(System.Double)">
            <summary>
            Returns the largest approximate gap to escape. 
            
            This gap is approximated by finding the gaps between all potential collideable objects around the Podbot,
            and weighting them positively by size and weighting them inversely by both distance and gapsize.
            The direction bisecting the largest of these weighted gaps is returned. 
            </summary>
            <param name="visibleDistance">The distance defining how far the bot can see.</param>
            <returns>The best direction to evade.</returns>
        </member>
        <member name="M:RAWSimO.Core.Bots.BotHazard.GetTargetSpeed">
            <summary>
            Returns the currently targeted speed.
            </summary>
            <returns>The targeted speed.</returns>
        </member>
        <member name="M:RAWSimO.Core.Bots.BotHazard.GetTargetSpeedDifference">
            <summary>
            Returns the difference of the current speed and the targeted one.
            </summary>
            <returns>The difference between the targeted speed and the current one.</returns>
        </member>
        <member name="M:RAWSimO.Core.Bots.BotHazard.getTargetOrientationDifference">
            <summary>
            Returns the difference of the current orientation and the targeted one.
            </summary>
            <returns>The difference between the targeted orientation and the current one.</returns>
        </member>
        <member name="M:RAWSimO.Core.Bots.BotHazard.SetTargetSpeed(System.Double)">
            <summary>
            Sets the targeted speed.
            </summary>
            <param name="speed">The new targeted speed.</param>
        </member>
        <member name="M:RAWSimO.Core.Bots.BotHazard.SetTargetOrientation(System.Double)">
            <summary>
            Sets the targeted orientation.
            </summary>
            <param name="orientation">The new targeted orientation.</param>
        </member>
        <member name="M:RAWSimO.Core.Bots.BotHazard.LogIncompleteTrip">
            <summary>
            Logs the data of an unfinished trip.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Bots.BotHazard.CollideableObject">
            <summary>
            <code>CollideableObject</code> is used to sort objects a bot can potentially collide with in order to generate a ring of these objects.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Bots.BotHazard.WaypointSearchData">
            <summary>
            Used to store the search tree of A*.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Bots.BotHazard.WaypointSearchResult">
            <summary>
            Used to store the result of a path search.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Bots.BotHazard.WaypointSearchResult.Route">
            <summary>
            The calculated travel route.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Bots.BotHazard.WaypointSearchResult.HasNextStep">
            <summary>
            Indicates whether there is a next step available in the route (assuming that the bot is currently at the first position of the route in the list).
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Bots.BotHazard.WaypointSearchResult.NextStep">
            <summary>
            The next waypoint to go to when traveling this route (assuming the bot is currently located at the first position stored in this route).
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Bots.BotHazard.WaypointSearchResult.First">
            <summary>
            The current node the bot is positioned.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Bots.BotHazard.WaypointSearchResult.IsFinished">
            <summary>
            Indicates whether the destination of the route was reached.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Bots.BotHazard.WaypointSearchResult.IsNextStepBlocked">
            <summary>
            Indicates whether the next waypoint of the route is dynamically blocked by other bots. If there is no next waypoint this always returns <code>false</code>.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Bots.BotHazard.WaypointSearchResult.IsDepth2Approaching">
            <summary>
            Indicates whether there are currently bots approaching the waypoint after the next step's waypoint.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Bots.BotHazard.WaypointSearchResult.AddStep(RAWSimO.Core.Waypoints.Waypoint)">
            <summary>
            Stores another step to this route. The steps have to be added in backwards order.
            </summary>
            <param name="waypoint">The waypoint of the route to add.</param>
        </member>
        <member name="M:RAWSimO.Core.Bots.BotHazard.WaypointSearchResult.Step">
            <summary>
            Performs a step on this route by discarding the first waypoint in this route.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Bots.BotHazard.GetNextWaypointTo(RAWSimO.Core.Waypoints.Waypoint,RAWSimO.Core.Waypoints.Waypoint)">
            <summary>
            Uses A* to find the next move to make in order to get from start to end.
            </summary>
            <param name="startNode">The starting waypoint.</param>
            <param name="destinationNode">The destination waypoint.</param>
            <returns>A waypoint connected to the start waypoint that belongs to the best path from start to end, defining the next move with additional meta information.</returns>
        </member>
        <member name="M:RAWSimO.Core.Bots.BotHazard.PlanPath(RAWSimO.Core.Waypoints.Waypoint,RAWSimO.Core.Waypoints.Waypoint)">
            <summary>
            Uses A* to find the next move to make in order to get from start to end.
            </summary>
            <param name="startNode">The starting waypoint.</param>
            <param name="destinationNode">The destination waypoint.</param>
            <returns>A waypoint connected to the start waypoint that belongs to the best path from start to end, defining the next move with additional meta information.</returns>
        </member>
        <member name="M:RAWSimO.Core.Bots.BotHazard.AssignTask(RAWSimO.Core.Control.BotTask)">
            <summary>
            Assigns a new task to the bot.
            </summary>
            <param name="t">The task to execute.</param>
        </member>
        <member name="M:RAWSimO.Core.Bots.BotHazard.WaitUntil(System.Double)">
            <summary>
            Blocks the robot for the specified time.
            </summary>
            <param name="time">The time to be blocked for.</param>
        </member>
        <member name="F:RAWSimO.Core.Bots.BotHazard.CurrentTime">
            <summary>
            Last Update Time of the bot.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Bots.BotHazard.AccelerateUntil">
            <summary>
            Moment when the bot finishes accelerating.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Bots.BotHazard.CruiseUntil">
            <summary>
            Moment when the bot finishes cruising.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Bots.BotHazard.TurnUntil">
            <summary>
            Moment when the bot finishes turning.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Bots.BotHazard.MinUntil">
            <summary>
            Minimum of all until-times.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Bots.BotHazard.GetNextEventTime(System.Double)">
            <summary>
            The next event when this element has to be updated.
            </summary>
            <param name="currentTime">The current time of the simulation.</param>
            <returns>The next time this element has to be updated.</returns>
        </member>
        <member name="M:RAWSimO.Core.Bots.BotHazard.Update(System.Double,System.Double)">
            <summary>
            Updates the element to the specified time.
            </summary>
            <param name="lastTime">The time before the update.</param>
            <param name="currentTime">The time to update to.</param>
        </member>
        <member name="M:RAWSimO.Core.Bots.BotHazard._updateTurnBot(System.Double)">
            <summary>
            turn the bot to the targeted orientation
            </summary>
            <param name="timeDelta">time since last update</param>
        </member>
        <member name="M:RAWSimO.Core.Bots.BotHazard._updateMoveBot(System.Double)">
            <summary>
            accelerate the bot to the targetet velocity
            </summary>
            <param name="timeDelta">time since last update</param>
        </member>
        <member name="M:RAWSimO.Core.Bots.BotHazard.GetInfoGoalX">
            <summary>
            Gets the x-position of the goal of the bot.
            </summary>
            <returns>The x-position.</returns>
        </member>
        <member name="M:RAWSimO.Core.Bots.BotHazard.GetInfoGoalY">
            <summary>
            Gets the y-position of the goal of the bot.
            </summary>
            <returns>The y-position.</returns>
        </member>
        <member name="M:RAWSimO.Core.Bots.BotHazard.GetInfoTargetOrientation">
            <summary>
            Gets the target orientation in radians. (An element facing east is defined with orientation 0 or equally 2*pi.)
            </summary>
            <returns>The orientation.</returns>
        </member>
        <member name="M:RAWSimO.Core.Bots.BotHazard.GetInfoState">
            <summary>
            Returns the current state the bot is in.
            </summary>
            <returns>The active state.</returns>
        </member>
        <member name="M:RAWSimO.Core.Bots.BotHazard.GetInfoCurrentWaypoint">
            <summary>
            Gets the current waypoint that is considered by planning.
            </summary>
            <returns>The current waypoint.</returns>
        </member>
        <member name="M:RAWSimO.Core.Bots.BotHazard.GetInfoDestinationWaypoint">
            <summary>
            Gets the destination of the bot.
            </summary>
            <returns>The destination.</returns>
        </member>
        <member name="M:RAWSimO.Core.Bots.BotHazard.GetInfoGoalWaypoint">
            <summary>
            Gets the goal of the bot.
            </summary>
            <returns>The goal.</returns>
        </member>
        <member name="F:RAWSimO.Core.Bots.BotHazard._currentPath">
            <summary>
            The current path the bot is following.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Bots.BotHazard.GetInfoPath">
            <summary>
            Gets the current path of the bot.
            </summary>
            <returns>The current path.</returns>
        </member>
        <member name="M:RAWSimO.Core.Bots.BotHazard.GetInfoBlocked">
            <summary>
            Indicates whether the robot is currently blocked.
            </summary>
            <returns><code>true</code> if the robot is blocked, <code>false</code> otherwise.</returns>
        </member>
        <member name="M:RAWSimO.Core.Bots.BotHazard.GetInfoBlockedLeft">
            <summary>
            The time until the bot is blocked.
            </summary>
            <returns>The time until the bot is blocked.</returns>
        </member>
        <member name="M:RAWSimO.Core.Bots.BotHazard.GetInfoIsQueueing">
            <summary>
            Indicates whether the bot is currently queueing in a managed area.
            </summary>
            <returns><code>true</code> if the robot is within a queue area, <code>false</code> otherwise.</returns>
        </member>
        <member name="F:RAWSimO.Core.Bots.BotHazard._stateQueue">
            <summary>
            The state-queue containing all the operations to execute consecutively.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Bots.BotHazard.StateQueue">
            <summary>
            The state-queue containing all the operations to execute consecutively.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Bots.BotHazard.NextState">
            <summary>
            The state after the current state.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Bots.BotHazard.EnqueueState(RAWSimO.Core.Interfaces.IBotState)">
            <summary>
            Enqueues a new state at the end of the queue.
            </summary>
            <param name="state">The state to add.</param>
        </member>
        <member name="M:RAWSimO.Core.Bots.BotHazard.CutState(RAWSimO.Core.Interfaces.IBotState)">
            <summary>
            Cuts the queue and adds a new state at the beginning.
            </summary>
            <param name="state">The new state to add.</param>
        </member>
        <member name="M:RAWSimO.Core.Bots.BotHazard.DequeueState">
            <summary>
            Removes the current state from the queue.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Bots.BotHazard.ClearStates">
            <summary>
            Clears all states currently in the queue.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Bots.BotHazard.TargetWaypoint">
            <summary>
            The current destination of the bot as useful information for other mechanisms.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Bots.BotHazard.BotPickupPod">
            <summary>
            The state defining the operation of picking up a pod at the current location.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Bots.BotHazard.BotSetdownPod">
            <summary>
            The state defining the operation of setting down a pod at the current location.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Bots.BotHazard.BotGetItems">
            <summary>
            The state defining the operation of storing an item-bundle in the pod at an input-station.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Bots.BotHazard.BotPutItems">
            <summary>
            The state defining the operation of picking an item from the pod at an output-station.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Bots.BotHazard.BotRest._waypoint">
            <summary>
            The _waypoint
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Bots.BotHazard.BotMove">
            <summary>
            The state defining the operation of moving.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Bots.BotHazard.BotMove._initialized">
            <summary>
            Indicates whether it is the first time we execute the state.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Bots.BotHazard.BotMove.LogUnfinishedTrip(RAWSimO.Core.Bots.BotHazard)">
            <summary>
            Logs an unfinished trip.
            </summary>
            <param name="bot">The bot that is logging the trip.</param>
        </member>
        <member name="T:RAWSimO.Core.Bots.BotHazard.BotEvade">
            <summary>
            The state defining the operation of evasion.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Bots.BotHazard.OnReachedWaypoint(RAWSimO.Core.Waypoints.Waypoint)">
            <summary>
            Called when [bot reached way point].
            </summary>
            <param name="waypoint">The way point.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:RAWSimO.Core.Bots.BotHazard.OnPickedUpPod">
            <summary>
            Called when [bot picked up the pod].
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:RAWSimO.Core.Bots.BotHazard.OnSetDownPod">
            <summary>
            Called when [bot set down pod].
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:RAWSimO.Core.Bots.BotNormal">
            <summary>
            Bot Driver
            Optimization is complete delegated to the controller, because he knows all the bots
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Bots.BotNormal.RequestReoptimizationAfterFailingOfNextWaypointReservation">
            <summary>
            The bots request a re-optimization after failing of next way point reservation
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Bots.BotNormal.TargetWaypoint">
            <summary>
            The current destination of the bot as useful information for other mechanisms. If not available, the current waypoint will be provided.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Bots.BotNormal.DestinationWaypoint">
            <summary>
            destination way point
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Bots.BotNormal.NextWaypoint">
            <summary>
            next way point
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Bots.BotNormal.RequestReoptimization">
            <summary>
            next way point
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Bots.BotNormal._stateQueue">
            <summary>
            The state queue
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Bots.BotNormal.StateQueuePeek">
            <summary>
            Returns the next state in the state queue without removing it.
            </summary>
            <returns>The next state in the state queue.</returns>
        </member>
        <member name="M:RAWSimO.Core.Bots.BotNormal.StateQueueEnqueue(RAWSimO.Core.Interfaces.IBotState)">
            <summary>
            Enqueues a state.
            </summary>
            <param name="state">The state to enqueue.</param>
        </member>
        <member name="M:RAWSimO.Core.Bots.BotNormal.StateQueueDequeue">
            <summary>
            Dequeues the next state from the state queue.
            </summary>
            <returns>The state that was just dequeued.</returns>
        </member>
        <member name="M:RAWSimO.Core.Bots.BotNormal.StateQueueClear">
            <summary>
            Clears the complete state queue.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Bots.BotNormal.StateQueueCount">
            <summary>
            The number of states currently in the queue.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Bots.BotNormal._driveDuration">
            <summary>
            drive until
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Bots.BotNormal._rotateDuration">
            <summary>
            rotate until
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Bots.BotNormal._waitUntil">
            <summary>
            rotate until
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Bots.BotNormal._startOrientation">
            <summary>
            rotate until
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Bots.BotNormal._endOrientation">
            <summary>
            rotate until
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Bots.BotNormal._eventReachedNextWaypoint">
            <summary>
            The agent reached the next way point
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Bots.BotNormal._initialEventReceived">
            <summary>
            Indicates whether the first position info was received from the remote server.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Bots.BotNormal._lastExteriorState">
            <summary>
            Indicates the last state of the robot. This is used to lower the communication with the robot.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Bots.BotNormal.Physics">
            <summary>
            The physics calculation object.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Bots.BotNormal._path">
            <summary>
            The current path.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Bots.BotNormal.Path">
            <summary>
            The current path.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Bots.BotNormal.#ctor(System.Int32,RAWSimO.Core.Instance,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:RAWSimO.Core.Bots.BotNormal"/> class.
            </summary>
            <param name="id">The identifier.</param>
            <param name="instance">The instance.</param>
            <param name="radius">The radius.</param>
            <param name="podTransferTime">The pod transfer time.</param>
            <param name="acceleration">The maximum acceleration.</param>
            <param name="deceleration">The maximum deceleration.</param>
            <param name="maxVelocity">The maximum velocity.</param>
            <param name="turnSpeed">The turn speed.</param>
            <param name="collisionPenaltyTime">The collision penalty time.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
        </member>
        <member name="M:RAWSimO.Core.Bots.BotNormal.GetTargetOrientation">
            <summary>
            orientation the bot should look at
            </summary>
            <returns>orientation</returns>
        </member>
        <member name="P:RAWSimO.Core.Bots.BotNormal.CurrentWaypoint">
            <summary>
            last way point
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Bots.BotNormal._currentWaypoint">
            <summary>
            The last waypoint.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Bots.BotNormal.AssignTask(RAWSimO.Core.Control.BotTask)">
            <summary>
            assign a task to a bot -&gt; delegate to controller
            </summary>
            <param name="t">task</param>
            <exception cref="T:System.ArgumentException">Unknown task-type:  + t.Type</exception>
        </member>
        <member name="M:RAWSimO.Core.Bots.BotNormal._appendMoveStates(RAWSimO.Core.Waypoints.Waypoint,RAWSimO.Core.Waypoints.Waypoint)">
            <summary>
            appends the move states with respect to tiers and elevators.
            </summary>
            <param name="waypointFrom">The from waypoint.</param>
            <param name="waypointTo">The destination waypoint.</param>
        </member>
        <member name="M:RAWSimO.Core.Bots.BotNormal.DequeueState(System.Double,System.Double)">
            <summary>
            Dequeues the state.
            </summary>
            <param name="lastTime">The last time.</param>
            <param name="currentTime">The current time.</param>
        </member>
        <member name="M:RAWSimO.Core.Bots.BotNormal.setNextWaypoint(RAWSimO.Core.Waypoints.Waypoint,System.Double)">
            <summary>
            Sets the next way point.
            </summary>
            <param name="waypoint">The way point.</param>
            <param name="currentTime">The current time.</param>
            <returns>A boolean value indicating whether the reservation was successful.</returns>
        </member>
        <member name="M:RAWSimO.Core.Bots.BotNormal.WaitUntil(System.Double)">
            <summary>
            Blocks the robot for the specified time.
            </summary>
            <param name="time">The time to be blocked for.</param>
        </member>
        <member name="M:RAWSimO.Core.Bots.BotNormal.hasFixedPosition">
            <summary>
            Determines whether this bot is fixed to a position.
            </summary>
            <returns>true, if it is fixed</returns>
        </member>
        <member name="M:RAWSimO.Core.Bots.BotNormal.IsResting">
            <summary>
            Determines whether this bot is currently resting.
            </summary>
            <returns><code>true</code> if the bot is resting, <code>false</code> otherwise.</returns>
        </member>
        <member name="M:RAWSimO.Core.Bots.BotNormal.LogIncompleteTrip">
            <summary>
            Logs the data of an unfinished trip.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Bots.BotNormal._queueTripStartTime">
            <summary>
            Stores the last trip start time.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Bots.BotNormal._queueZonesOStations">
            <summary>
            Contains all output station queueing areas.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Bots.BotNormal._queueZonesIStations">
            <summary>
            Contains all input station queueing areas.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Bots.BotNormal.IsInStationQueueZone(RAWSimO.Core.Elements.OutputStation)">
            <summary>
            Checks whether the bot is currently within the stations queueing area.
            </summary>
            <param name="station">The station to check.</param>
            <returns><code>true</code> if the bot is within the stations queueing area, <code>false</code> otherwise.</returns>
        </member>
        <member name="M:RAWSimO.Core.Bots.BotNormal.IsInStationQueueZone(RAWSimO.Core.Elements.InputStation)">
            <summary>
            Checks whether the bot is currently within the stations queueing area.
            </summary>
            <param name="station">The station to check.</param>
            <returns><code>true</code> if the bot is within the stations queueing area, <code>false</code> otherwise.</returns>
        </member>
        <member name="M:RAWSimO.Core.Bots.BotNormal.GetNextEventTime(System.Double)">
            <summary>
            The next event when this element has to be updated.
            </summary>
            <param name="currentTime">The current time of the simulation.</param>
            <returns>The next time this element has to be updated.</returns>
        </member>
        <member name="M:RAWSimO.Core.Bots.BotNormal.Update(System.Double,System.Double)">
            <summary>
            update bot
            </summary>
            <param name="lastTime">time stamp: last update</param>
            <param name="currentTime">time stamp: now</param>
        </member>
        <member name="M:RAWSimO.Core.Bots.BotNormal._updateDrive(System.Double,System.Double)">
            <summary>
            Drive the bot.
            </summary>
            <param name="lastTime">The last time.</param>
            <param name="currentTime">The current time.</param>
        </member>
        <member name="M:RAWSimO.Core.Bots.BotNormal._updateRotation(System.Double)">
            <summary>
            update the rotation to the target orientation
            </summary>
            <param name="currentTime">time stamp: now</param>
        </member>
        <member name="M:RAWSimO.Core.Bots.BotNormal._updateMove(System.Double)">
            <summary>
            move the bot towards the next way point
            </summary>
            <param name="currentTime">time stamp: now</param>
        </member>
        <member name="M:RAWSimO.Core.Bots.BotNormal._updateStatistics(System.Double,System.Double,System.Double)">
            <summary>
            update statistical data
            </summary>
            <param name="delta">time passed since last update</param>
            <param name="xOld">Position x before update</param>
            <param name="yOld">Position y before update</param>
        </member>
        <member name="M:RAWSimO.Core.Bots.BotNormal.GetInfoGoalX">
            <summary>
            x position of the goal for the info panel
            </summary>
            <returns>x position</returns>
        </member>
        <member name="M:RAWSimO.Core.Bots.BotNormal.GetInfoGoalY">
            <summary>
            y position of the goal for the info panel
            </summary>
            <returns>y position</returns>
        </member>
        <member name="M:RAWSimO.Core.Bots.BotNormal.GetInfoTargetOrientation">
            <summary>
            target for the info panel
            </summary>
            <returns>orientation</returns>
        </member>
        <member name="F:RAWSimO.Core.Bots.BotNormal._currentInfoStateName">
            <summary>
            The current state the bot is in (for async access).
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Bots.BotNormal.GetInfoState">
            <summary>
            state for the info panel
            </summary>
            <returns>state</returns>
        </member>
        <member name="M:RAWSimO.Core.Bots.BotNormal.GetInfoCurrentWaypoint">
            <summary>
            Gets the current waypoint that is considered by planning.
            </summary>
            <returns>The current waypoint.</returns>
        </member>
        <member name="M:RAWSimO.Core.Bots.BotNormal.GetInfoDestinationWaypoint">
            <summary>
            Destination way point in the info panel
            </summary>
            <returns>destination</returns>
        </member>
        <member name="M:RAWSimO.Core.Bots.BotNormal.GetInfoGoalWaypoint">
            <summary>
            Destination way point in the info panel
            </summary>
            <returns>destination</returns>
        </member>
        <member name="F:RAWSimO.Core.Bots.BotNormal._currentPath">
            <summary>
            The current path the bot is following.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Bots.BotNormal.GetInfoPath">
            <summary>
            Gets the current path of the bot.
            </summary>
            <returns>The current path.</returns>
        </member>
        <member name="M:RAWSimO.Core.Bots.BotNormal.GetInfoBlocked">
            <summary>
            Indicates whether the robot is currently blocked.
            </summary>
            <returns><code>true</code> if the robot is blocked, <code>false</code> otherwise.</returns>
        </member>
        <member name="M:RAWSimO.Core.Bots.BotNormal.GetInfoBlockedLeft">
            <summary>
            The time until the bot is blocked.
            </summary>
            <returns>The time until the bot is blocked.</returns>
        </member>
        <member name="M:RAWSimO.Core.Bots.BotNormal.GetInfoIsQueueing">
            <summary>
            Indicates whether the bot is currently queueing in a managed area.
            </summary>
            <returns><code>true</code> if the robot is within a queue area, <code>false</code> otherwise.</returns>
        </member>
        <member name="T:RAWSimO.Core.Bots.BotNormal.BotMove">
            <summary>
            The state defining the operation of moving.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Bots.BotNormal.BotMove.DestinationWaypoint">
            <summary>
            next node to reach
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Bots.BotNormal.BotMove.#ctor(RAWSimO.Core.Waypoints.Waypoint)">
            <summary>
            constructor
            </summary>
            <param name="w">way point</param>
        </member>
        <member name="F:RAWSimO.Core.Bots.BotNormal.BotMove._initialized">
            <summary>
            Indicates whether we just entered the state.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Bots.BotNormal.BotMove.LogUnfinishedTrip(RAWSimO.Core.Bots.BotNormal)">
            <summary>
            Logs an unfinished trip.
            </summary>
            <param name="bot">The bot that is logging the trip.</param>
        </member>
        <member name="M:RAWSimO.Core.Bots.BotNormal.BotMove.Act(RAWSimO.Core.Elements.Bot,System.Double,System.Double)">
            <summary>
            act
            </summary>
            <param name="self">driver</param>
            <param name="lastTime">The time before this update.</param>
            <param name="currentTime">The current time.</param>
        </member>
        <member name="M:RAWSimO.Core.Bots.BotNormal.BotMove.NotifyCollision(RAWSimO.Core.Bots.BotNormal,System.Double)">
            <summary>
            Notifies the move state, that a collision occurred.
            </summary>
            <param name="bot">The bot.</param>
            <param name="currentTime">The current simulation time.</param>
        </member>
        <member name="M:RAWSimO.Core.Bots.BotNormal.BotMove.getDestinationWaypoint">
            <summary>
            Returns the current way point this bot wants to drive to
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Bots.BotNormal.BotMove.ToString">
            <summary>
            state name
            </summary>
            <returns>name</returns>
        </member>
        <member name="P:RAWSimO.Core.Bots.BotNormal.BotMove.Type">
            <summary>
            State type.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Bots.BotNormal.BotPickupPod">
            <summary>
            The state defining the operation of picking up a pod at the current location.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Bots.BotNormal.BotPickupPod.ToString">
            <summary>
            state name
            </summary>
            <returns>name</returns>
        </member>
        <member name="P:RAWSimO.Core.Bots.BotNormal.BotPickupPod.Type">
            <summary>
            State type.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Bots.BotNormal.BotSetdownPod">
            <summary>
            The state defining the operation of setting down a pod at the current location.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Bots.BotNormal.BotSetdownPod.ToString">
            <summary>
            state name
            </summary>
            <returns>name</returns>
        </member>
        <member name="P:RAWSimO.Core.Bots.BotNormal.BotSetdownPod.Type">
            <summary>
            State type.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Bots.BotNormal.BotGetItems">
            <summary>
            The state defining the operation of storing an item-bundle in the pod at an input-station.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Bots.BotNormal.BotGetItems.ToString">
            <summary>
            state name
            </summary>
            <returns>name</returns>
        </member>
        <member name="P:RAWSimO.Core.Bots.BotNormal.BotGetItems.Type">
            <summary>
            State type.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Bots.BotNormal.BotPutItems">
            <summary>
            The state defining the operation of picking an item from the pod at an output-station.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Bots.BotNormal.BotPutItems.ToString">
            <summary>
            state name
            </summary>
            <returns>name</returns>
        </member>
        <member name="P:RAWSimO.Core.Bots.BotNormal.BotPutItems.Type">
            <summary>
            State type.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Bots.BotNormal.UseElevator">
            <summary>
            State: Bot uses an elevator to get to a different tier
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Bots.BotNormal.UseElevator.ToString">
            <summary>
            state name
            </summary>
            <returns>name</returns>
        </member>
        <member name="P:RAWSimO.Core.Bots.BotNormal.UseElevator.Type">
            <summary>
            State type.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Bots.BotNormal.BotRest.ToString">
            <summary>
            state name
            </summary>
            <returns>name</returns>
        </member>
        <member name="P:RAWSimO.Core.Bots.BotNormal.BotRest.Type">
            <summary>
            State type.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Bots.BotNormal.OnReachedWaypoint(RAWSimO.Core.Waypoints.Waypoint)">
            <summary>
            Called when [bot reached way point].
            </summary>
            <param name="waypoint">The way point.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:RAWSimO.Core.Bots.BotNormal.OnPickedUpPod">
            <summary>
            Called when [bot picked up the pod].
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:RAWSimO.Core.Bots.BotNormal.OnSetDownPod">
            <summary>
            Called when [bot set down pod].
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:RAWSimO.Core.Bots.BotStateType">
            <summary>
            Enumerates all states a bot can be in.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Bots.BotStateType.PickupPod">
            <summary>
            Indicates that the bot is picking up a pod.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Bots.BotStateType.SetdownPod">
            <summary>
            Indicates that the bot is setting down a pod.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Bots.BotStateType.GetItems">
            <summary>
            Indicates that the bot is getting a bundle for its pod.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Bots.BotStateType.PutItems">
            <summary>
            Indicates that the bot is putting an item for an order.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Bots.BotStateType.Rest">
            <summary>
            Indicates that the bot is idling.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Bots.BotStateType.Move">
            <summary>
            Indicates that the bot is moving.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Bots.BotStateType.Evade">
            <summary>
            Indicates that the bot is evading another bot.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Bots.BotStateType.UseElevator">
            <summary>
            Indicates that the bot is using an elevator.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Configurations.LiveAttribute">
            <summary>
            A simple attribute identifying live members of the configuration. These are not for serialization or similar, but only for the control of special functionality.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Configurations.DefaultConstructorIdentificationClass">
            <summary>
            Defines a class that represents the only param to a default constructor, if supplied. If no such constructor is supplied than the parameter-less constructor serves as the default constructor.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Configurations.Skvp`2">
            <summary>
            Used to serialize dictionary entries.
            </summary>
            <typeparam name="K">The type of the key of the entry.</typeparam>
            <typeparam name="V">The type of the value of the entry.</typeparam>
        </member>
        <member name="F:RAWSimO.Core.Configurations.Skvp`2.Key">
            <summary>
            The key of the entry.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.Skvp`2.Value">
            <summary>
            The value of the entry.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Configurations.Skkvt`3">
            <summary>
            Used to serialize two-keyed dictionary entries.
            </summary>
            <typeparam name="K1">The type of the first key.</typeparam>
            <typeparam name="K2">The type of the second key.</typeparam>
            <typeparam name="V">The type of the value.</typeparam>
        </member>
        <member name="F:RAWSimO.Core.Configurations.Skkvt`3.Key1">
            <summary>
            The first key of the entry.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.Skkvt`3.Key2">
            <summary>
            The second key of the entry.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.Skkvt`3.Value">
            <summary>
            The value of the entry.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Configurations.LogLevel">
            <summary>
            Defines the log level to use.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.LogLevel.Silent">
            <summary>
            Absolutely nothing is logged.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.LogLevel.Severe">
            <summary>
            Only really severe error make the cut.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.LogLevel.Default">
            <summary>
            Only standard simulation output makes the cut + potential severe errors / warnings.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.LogLevel.Info">
            <summary>
            In addition to the default output further info-messages are logged that might be of interest.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.LogLevel.Verbose">
            <summary>
            Everything that can be logged will be logged.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Configurations.LogFileLevel">
            <summary>
            Indicates the level of logging for the output files.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.LogFileLevel.All">
            <summary>
            All log files will be written.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.LogFileLevel.FootprintOnly">
            <summary>
            Only the footprint will be written.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Configurations.DebugMode">
            <summary>
            States the current debug mode that sets the different logs messages that are output.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.DebugMode.RealTime">
            <summary>
            Indicates that the real-time will be added to the log message.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.DebugMode.RealTimeAndMemory">
            <summary>
            Indicates that the current memory consumption is added to the output.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Configurations.InventoryConfiguration">
            <summary>
            The configuration for inventory related stuff.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.InventoryConfiguration.ItemType">
            <summary>
            The type of the items to use.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.InventoryConfiguration.OrderMode">
            <summary>
            The order mode to use when simulating.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.InventoryConfiguration.SubmitBatches">
            <summary>
            Indicates whether the batches defined by the batch-configuration will be submitted or not.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.InventoryConfiguration.InitialInventory">
            <summary>
            The relative amount of already filled inventory when starting the simulation. Inventory is filled randomly.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.InventoryConfiguration.IgnoreCapacityForBundleGeneration">
            <summary>
            Specifies whether new bundles are generated even if the system exceeded the load specified by the bundle buffer.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.InventoryConfiguration.BufferBundlesUntilInventoryLoad">
            <summary>
            Specifies a maximal amount of bundles that are additionally generated (when the storage area is at its limit) in relation to the overall storage capacity.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.InventoryConfiguration.WarmupOrderCount">
            <summary>
            The number of orders generated to warmup methods using these.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.InventoryConfiguration.ItemWeightMin">
            <summary>
            The minimal weight of one item.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.InventoryConfiguration.ItemWeightMax">
            <summary>
            The maximal weight of one item.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.InventoryConfiguration.BundleSizeMin">
            <summary>
            The minimal number of items in one bundle.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.InventoryConfiguration.BundleSizeMax">
            <summary>
            The maximal number of items in one bundle.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.InventoryConfiguration.ReturnOrderProbability">
            <summary>
            The probability for a return order to happen, i.e. a bundle is generated with size 1.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.InventoryConfiguration.PositionCountMean">
            <summary>
            The mean to use for determining the number of items per positions of an order by using a normal distribution.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.InventoryConfiguration.PositionCountStdDev">
            <summary>
            The standard deviation to use for determining the number of items per positions of an order by using a normal distribution.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.InventoryConfiguration.PositionCountMin">
            <summary>
            The minimal number of items per line of an order.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.InventoryConfiguration.PositionCountMax">
            <summary>
            The maximal number of items per line of an order.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.InventoryConfiguration.OrderPositionCountMean">
            <summary>
            The mean to use for determining the number of lines of an order by using a normal distribution.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.InventoryConfiguration.OrderPositionCountStdDev">
            <summary>
            The standard deviation to use for determining the number of lines of an order by using a normal distribution.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.InventoryConfiguration.OrderPositionCountMin">
            <summary>
            The minimal number of lines for an order (inclusive bound).
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.InventoryConfiguration.OrderPositionCountMax">
            <summary>
            The maximal number of lines for an order (inclusive bound).
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.InventoryConfiguration.DueTimePriorityMode">
            <summary>
            Indicates that due times shall be generated to emulate priority mode, i.e. a shorter due time is selected with the given probability.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.InventoryConfiguration.DueTimePriorityOrderProbability">
            <summary>
            The probability for generating a priority order.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.InventoryConfiguration.DueTimePriorityOrder">
            <summary>
            The due time of a priority order.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.InventoryConfiguration.DueTimeOrdinaryOrder">
            <summary>
            The due time of an ordinary order.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.InventoryConfiguration.DueTimeOffsetMean">
            <summary>
            The mean time the due time is set seen from the generation timestamp of the order, e.g.: if the order is generated at 1 o'clock a mean of 3 hours due time will be at 4 o'clock.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.InventoryConfiguration.DueTimeOffsetStdDev">
            <summary>
            The standard deviation of the due time.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.InventoryConfiguration.DueTimeOffsetMin">
            <summary>
            The minimal time the due time is set seen from the generation timestamp of the order
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.InventoryConfiguration.DueTimeOffsetMax">
            <summary>
            The maximal time the due time is set seen from the generation timestamp of the order
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.InventoryConfiguration.DemandInventoryConfiguration">
            <summary>
            The configuration for generating orders and inventory in a demand based mode.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.InventoryConfiguration.FixedInventoryConfiguration">
            <summary>
            The configuration for reading orders and inventory from a given file.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.InventoryConfiguration.PoissonInventoryConfiguration">
            <summary>
            The configuration for generating orders and inventory using a poisson process.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.InventoryConfiguration.BatchInventoryConfiguration">
            <summary>
            The configuration for generating orders and bundles as batches.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.InventoryConfiguration.ColoredWordConfiguration">
            <summary>
            The configuration to use when in colored word mode.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.InventoryConfiguration.SimpleItemConfiguration">
            <summary>
            The configuration to use when in simple item mode.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.InventoryConfiguration.isValid(System.Double,System.String@)">
            <summary>
            Checks whether the inventory configuration is valid.
            </summary>
            <param name="errorMessage">A message describing the error if the inventory is not valid.</param>
            <param name="podCapacity">The corresponding pod capacity. </param>
            <returns>Indicates whether the inventory configuration is valid.</returns>
        </member>
        <member name="M:RAWSimO.Core.Configurations.InventoryConfiguration.autogenerate">
            <summary>
            Generates a ColoredWordConfiguration or PoissonInventoryConfiguration with default parameters if need be.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Configurations.PoissonInventoryConfiguration">
            <summary>
            The configuration for generating orders and inventory using a poisson process.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.PoissonInventoryConfiguration.#ctor">
            <summary>
            Parameter-less constructor mainly used by the xml-serializer.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.PoissonInventoryConfiguration.#ctor(RAWSimO.Core.Configurations.DefaultConstructorIdentificationClass)">
            <summary>
            Constructor that generates default values for all fields.
            </summary>
            <param name="param">Not used.</param>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PoissonInventoryConfiguration.PoissonMode">
            <summary>
            The mode of the poisson generator if used.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PoissonInventoryConfiguration.InitialOrderCount">
            <summary>
            The initial number of orders ready to be allocated.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PoissonInventoryConfiguration.InitialBundleCount">
            <summary>
            The initial number of bundles ready to be allocated.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PoissonInventoryConfiguration.DistortOrderRateParameter">
            <summary>
            Can be used to set the type of information used to distort the rate parameter during simulation execution.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PoissonInventoryConfiguration.DistortBundleRateParameter">
            <summary>
            Can be used to set the type of information used to distort the rate parameter during simulation execution.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PoissonInventoryConfiguration.AverageOrdersPerHourAndStation">
            <summary>
            The number of orders generated in one hour per station that the poisson process is aiming for. This number will be used to calculate an instance-wide rate in all poisson modes.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PoissonInventoryConfiguration.AverageBundlesPerHourAndStation">
            <summary>
            The number of bundles generated in one hour per station that the poisson process is aiming for. This number will be used to calculate an instance-wide rate in all poisson modes.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PoissonInventoryConfiguration.AverageOrdersPerHourAndStationHigh">
            <summary>
            The number of orders generated in one hour per station that the poisson process is aiming for. This number will be used to calculate an instance-wide rate in for the high-low mode in high times.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PoissonInventoryConfiguration.AverageBundlesPerHourAndStationHigh">
            <summary>
            The number of bundles generated in one hour per station that the poisson process is aiming for. This number will be used to calculate an instance-wide rate in for the high-low mode in high times.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PoissonInventoryConfiguration.LowToHighSwitchesPerHour">
            <summary>
            The number of switches in average to go from low to high in one hour.
            This is used to determine the rate parameter, but seems more intuitive than immediately specifying the rate.
            In contrast to this description the rate of course immediately changes to the one to go from high to low, hence, no multiple events will be generated using this parameter but only the first one.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PoissonInventoryConfiguration.HighToLowSwitchesPerHour">
            <summary>
            The number of switches in average to go from high to low in one hour.
            This is used to determine the rate parameter, but seems more intuitive than immediately specifying the rate.
            In contrast to this description the rate of course immediately changes to the one to go from low to high, hence, no multiple events will be generated using this parameter but only the first one.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PoissonInventoryConfiguration.BundleGenAffectedByHighPeriod">
            <summary>
            Indicates whether the generation of bundles is affected during the high period, i.e. more bundles are generated during the high period.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PoissonInventoryConfiguration.OrderGenAffectedByHighPeriod">
            <summary>
            Indicates whether the generation of orders is affected during the high period, i.e. more orders are generated during the high period.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PoissonInventoryConfiguration.MaxTimeForTimeDependentOrderRates">
            <summary>
            The time after which the rate value of the poisson process for orders loops (in inhomogeneous poisson mode).
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PoissonInventoryConfiguration.MaxTimeForTimeDependentBundleRates">
            <summary>
            The time after which the rate value of the poisson process for bundles loops (in inhomogeneous poisson mode).
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PoissonInventoryConfiguration.TimeDependentOrderWeights">
            <summary>
            The weights of the rates for the orders depending on the current time. 
            One element specifies the weight of a rate as a value and the time in seconds (starting at 0). 
            The rate weight then is used starting from the time given as the key until another KVP specifies a new rate weight.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PoissonInventoryConfiguration.TimeDependentBundleWeights">
            <summary>
            The weights of the rates for the bundles depending on the current time. 
            One element specifies the weight of a rate as a value and the time in seconds (starting at 0). 
            The rate weight then is used starting from the time given as the key until another KVP specifies a new rate weight.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Configurations.FixedInventoryConfiguration">
            <summary>
            The configuration for reading orders and inventory from a given file.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.FixedInventoryConfiguration.OrderFile">
            <summary>
            The file containing the list of orders. This is not necessary in case randomly generated orders are used.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Configurations.DemandInventoryConfiguration">
            <summary>
            The configuration for generating orders and inventory in a demand based mode.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.DemandInventoryConfiguration.OrderCount">
            <summary>
            The order count to have available (in demand-mode).
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.DemandInventoryConfiguration.BundleCount">
            <summary>
            The bundle count to have available (in demand-mode).
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.DemandInventoryConfiguration.InventoryLevelDrivenBundleGeneration">
            <summary>
            Indicates whether inventory level is tracked and bundles are only generated when below certain threshold.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.DemandInventoryConfiguration.InventoryLevelBundleStopThreshold">
            <summary>
            The inventory level threshold after exceeding which bundle generation will get deactivated.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.DemandInventoryConfiguration.InventoryLevelBundleRestartThreshold">
            <summary>
            The inventory level threshold after dropping below which bundle generation will be activated again.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.DemandInventoryConfiguration.InventoryLevelDrivenOrderGeneration">
            <summary>
            Indicates whether inventory level is tracked and order generation is paused as soon as inventory drops below a certain threshold.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.DemandInventoryConfiguration.InventoryLevelOrderStopThreshold">
            <summary>
            The inventory level threshold after dropping below which order generation will get deactivated.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.DemandInventoryConfiguration.InventoryLevelOrderRestartThreshold">
            <summary>
            The inventory level threshold after exceeding which order generation will get activated again.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.DemandInventoryConfiguration.DownPeriodConfiguration">
            <summary>
            A sub configuration specifying down periods for order and bundle generation.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Configurations.DemandDownPeriodConfiguration">
            <summary>
            A sub configuration specifying down periods for order and bundle generation.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.DemandDownPeriodConfiguration.#ctor">
            <summary>
            Parameter-less constructor mainly used by the xml-serializer.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.DemandDownPeriodConfiguration.#ctor(RAWSimO.Core.Configurations.DefaultConstructorIdentificationClass)">
            <summary>
            Constructor that generates default values for all fields.
            </summary>
            <param name="param">Not used.</param>
        </member>
        <member name="F:RAWSimO.Core.Configurations.DemandDownPeriodConfiguration.MaxTimeForOrderDownAndUpPeriods">
            <summary>
            The time after which the timepoints for order down periods loop.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.DemandDownPeriodConfiguration.MaxTimeForBundleDownAndUpPeriods">
            <summary>
            The time after which the timepoints for bundle down periods loop.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.DemandDownPeriodConfiguration.OrderDownAndUpTimes">
            <summary>
            The timepoints at which order generation is paused or reactivated again. <code>true</code> indicates a starting down period, <code>false</code> a starting normal period.
            These have to be ordered by their timestamp.
            If no element with timepoint 0 is given, it is assumed that generation is activated at the begin of the period.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.DemandDownPeriodConfiguration.BundleDownAndUpTimes">
            <summary>
            The timepoints at which bundle generation is paused or reactivated again. <code>true</code> indicates a starting down period, <code>false</code> a starting normal period.
            These have to be ordered by their timestamp.
            If no element with timepoint 0 is given, it is assumed that generation is activated at the begin of the period.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Configurations.BatchInventoryConfiguration">
            <summary>
            The configuration for submitting big batches of orders or bundles at specific timepoints.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.BatchInventoryConfiguration.#ctor">
            <summary>
            Parameter-less constructor mainly used by the xml-serializer.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.BatchInventoryConfiguration.#ctor(RAWSimO.Core.Configurations.DefaultConstructorIdentificationClass)">
            <summary>
            Constructor that generates default values for all fields.
            </summary>
            <param name="param">Not used.</param>
        </member>
        <member name="F:RAWSimO.Core.Configurations.BatchInventoryConfiguration.MaxTimeForOrderSubmissions">
            <summary>
            The time after which the timepoints for order batch submissions loop.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.BatchInventoryConfiguration.MaxTimeForBundleSubmissions">
            <summary>
            The time after which the timepoints for bundle batch submissions loop.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.BatchInventoryConfiguration.OrderBatches">
            <summary>
            The timepoints at which orders shall be submitted as a batch and also the number of orders to have in backlog per station after submitting the batch.
            These have to be ordered by their timestamp.
            Orders will be generated until the respective number of orders is available in the backlog times the station count of the instance.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.BatchInventoryConfiguration.BundleBatches">
            <summary>
            The timepoints at which bundles shall be submitted as a batch and also the aimed for inventory level after submitting the batch.
            These have to be ordered by their timestamp.
            Bundles will be generated until there are enough bundles in backlog and the system as well such that the respective inventory level is reached.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Configurations.ColoredWordConfiguration">
            <summary>
            A configuration to use when colored letters are used as items.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.ColoredWordConfiguration.#ctor">
            <summary>
            Parameter-less constructor mainly used by the xml-serializer.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.ColoredWordConfiguration.#ctor(RAWSimO.Core.Configurations.DefaultConstructorIdentificationClass)">
            <summary>
            Constructor that generates default values for all fields.
            </summary>
            <param name="param">Not used.</param>
        </member>
        <member name="F:RAWSimO.Core.Configurations.ColoredWordConfiguration.WordFile">
            <summary>
            A file containing a list of words used to generate colored words used as orders.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.ColoredWordConfiguration.ColorProbabilities">
            <summary>
            The probabilities of the different colors.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Configurations.SimpleItemConfiguration">
            <summary>
            A configuration to use when ID-based items are used that can have meaningless coloring (to distinguish them).
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.SimpleItemConfiguration.GeneratorConfigFile">
            <summary>
            The resource file containing the config for the generator.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Configurations.SimpleItemGeneratorConfiguration">
            <summary>
            A configuration that is used when simple items are generated randomly.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.SimpleItemGeneratorConfiguration.Name">
            <summary>
            The name of this generator config.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.SimpleItemGeneratorConfiguration.Description">
            <summary>
            Some description of the file.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.SimpleItemGeneratorConfiguration.DefaultWeight">
            <summary>
            The default weight to use when no weight is present for the given item.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.SimpleItemGeneratorConfiguration.DefaultCoWeight">
            <summary>
            The default weight to use when no weight is present for the given combination of items.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.SimpleItemGeneratorConfiguration.ProbToUseCoWeight">
            <summary>
            The probability of using a co-weight for generating the next item instead of just generating a non-related item based on the single item probabilities.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.SimpleItemGeneratorConfiguration.ItemDescriptions">
            <summary>
            All item descriptions that can be generated with this configuration with their respective ID and hue.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.SimpleItemGeneratorConfiguration.ItemDescriptionWeights">
            <summary>
            Specifies for each item description how much space is consumed by one unit of it.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.SimpleItemGeneratorConfiguration.ItemDescriptionBundleSizes">
            <summary>
            Specifies for each item description the size of a bundle when replenishing it.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.SimpleItemGeneratorConfiguration.ItemWeights">
            <summary>
            The weights of the items. These will be transformed into probabilities to use in order to generate new item-bundles and also the first item of an order.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.SimpleItemGeneratorConfiguration.ItemCoWeights">
            <summary>
            The weights of the item combinations. 
            These will be transformed into probabilities and used when one item was generated for an order, but another one shall be generated. 
            A higher weight results in a higher probability that the given item is generated next for the current order.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.SimpleItemGeneratorConfiguration.GetMetaInfoBasedName">
            <summary>
            Returns a simple describing name for this config.
            </summary>
            <returns>A string that can be used as a config name.</returns>
        </member>
        <member name="T:RAWSimO.Core.Configurations.AisleLayoutTypes">
            <summary>
            Declares some basic aisle layout types.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.AisleLayoutTypes.Tim">
            <summary>
            Layout of Tim Lamballais.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.AisleLayoutTypes.HighwayHallway">
            <summary>
            Modified layout using a highway as a hallway enabling more possibilities for the bots to switch aisles.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Configurations.LayoutConfiguration">
            <summary>
            Supplies all attributes of a layout for generating it.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.LayoutConfiguration.TierCount">
            <summary>
            The number of tiers to generate.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.LayoutConfiguration.TierHeight">
            <summary>
            The height of a tier. (Only relevant for visual feedback)
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.LayoutConfiguration.BotCount">
            <summary>
            The number of bots to generate.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.LayoutConfiguration.BotRadius">
            <summary>
            The radius of a bot in m.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.LayoutConfiguration.MaxAcceleration">
            <summary>
            The acceleration of a bot in m/s^2.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.LayoutConfiguration.MaxDeceleration">
            <summary>
            The deceleration of a bot in m/s^2.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.LayoutConfiguration.MaxVelocity">
            <summary>
            The maximal velocity of a bot in m/s.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.LayoutConfiguration.TurnSpeed">
            <summary>
            The time it takes for the bot to do a complete (360°) turn in s.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.LayoutConfiguration.CollisionPenaltyTime">
            <summary>
            The penalty time for bots that collide.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.LayoutConfiguration.PodTransferTime">
            <summary>
            The time it takes to pickup / setdown a pod.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.LayoutConfiguration.PodAmount">
            <summary>
            The amount of pods generated relative to the number of available storage locations.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.LayoutConfiguration.PodRadius">
            <summary>
            The radius of a pod in m.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.LayoutConfiguration.PodCapacity">
            <summary>
            The capacity of a pod.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.LayoutConfiguration.StationRadius">
            <summary>
            The radius of the I/O-stations in m.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.LayoutConfiguration.ItemTransferTime">
            <summary>
            The time it takes to handle an item at a pick station.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.LayoutConfiguration.ItemPickTime">
            <summary>
            The time it takes to pick an item from a pod (excluding further handling times like putting it in a tote).
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.LayoutConfiguration.ItemBundleTransferTime">
            <summary>
            The time it takes to place a bundle in a pod.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.LayoutConfiguration.IStationCapacity">
            <summary>
            The capacity of the input stations in bundle weight.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.LayoutConfiguration.OStationCapacity">
            <summary>
            The maximal number of orders that can be assigned to an output-station.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.LayoutConfiguration.ElevatorTransportationTimePerTier">
            <summary>
            The time it takes to transport a bot vertically with an elevator for one tier in s.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.LayoutConfiguration.AisleLayoutType">
            <summary>
            The type of the aisle layout to use.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.LayoutConfiguration.AislesTwoDirectional">
            <summary>
            Indicates whether aisles are generated in two directional mode or not.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.LayoutConfiguration.SingleLane">
            <summary>
            Indicates whether aisles will be generated as single lanes.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.LayoutConfiguration.NameLayout">
            <summary>
            The name of the layout.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.LayoutConfiguration.NrHorizontalAisles">
            <summary>
            The number of horizontal aisles to generate.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.LayoutConfiguration.NrVerticalAisles">
            <summary>
            The number of vertical aisles to generate.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.LayoutConfiguration.HorizontalLengthBlock">
            <summary>
            The horizontal length of a block, i.e. the number of pod columns placed in a block.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.LayoutConfiguration.VerticalLengthBlock">
            <summary>
            The vertical length of a block, i.e. the number of pod rows placed in a block.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.LayoutConfiguration.WidthRingway">
            <summary>
            The width of the ringway.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.LayoutConfiguration.WidthHall">
            <summary>
            The width of the hall.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.LayoutConfiguration.WidthBuffer">
            <summary>
            The width of the buffer.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.LayoutConfiguration.DistanceEntryExitStation">
            <summary>
            The distance between entrance and exit of a station.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.LayoutConfiguration.CounterClockwiseRingwayDirection">
            <summary>
            The direction of the ringway. It's either clockwise or counter-clockwise.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.LayoutConfiguration.NPickStationWest">
            <summary>
            The number of pick stations placed at the west end of the system.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.LayoutConfiguration.NPickStationEast">
            <summary>
            The number of pick stations placed at the east end of the system.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.LayoutConfiguration.NPickStationSouth">
            <summary>
            The number of pick stations placed at the south end of the system.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.LayoutConfiguration.NPickStationNorth">
            <summary>
            The number of pick stations placed at the north end of the system.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.LayoutConfiguration.NReplenishmentStationWest">
            <summary>
            The number of replenishment stations placed at the west end of the system.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.LayoutConfiguration.NReplenishmentStationEast">
            <summary>
            The number of replenishment stations placed at the east end of the system.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.LayoutConfiguration.NReplenishmentStationSouth">
            <summary>
            The number of replenishment stations placed at the south end of the system.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.LayoutConfiguration.NReplenishmentStationNorth">
            <summary>
            The number of replenishment stations placed at the north end of the system.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.LayoutConfiguration.NElevatorsWest">
            <summary>
            The number of elevators placed at the west end of the system.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.LayoutConfiguration.NElevatorsEast">
            <summary>
            The number of elevators placed at the east end of the system.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.LayoutConfiguration.NElevatorsSouth">
            <summary>
            The number of elevators placed at the south end of the system.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.LayoutConfiguration.NElevatorsNorth">
            <summary>
            The number of elevators placed at the north end of the system.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.LayoutConfiguration.ApplyOverrideConfig(RAWSimO.Core.Configurations.OverrideConfiguration)">
            <summary>
            Applies values set by an override configuration.
            </summary>
            <param name="overrideConfig">The override config to apply.</param>
        </member>
        <member name="M:RAWSimO.Core.Configurations.LayoutConfiguration.AdjustToOverrideValue(System.Int32,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Adjusts values to an override target some by equally increasing or decreasing them.
            </summary>
            <param name="targetValue">The target value.</param>
            <param name="firstValue">The first value (this will be modified first).</param>
            <param name="secondValue">The first value (this will be modified second).</param>
            <param name="thirdValue">The first value (this will be modified third).</param>
            <param name="fourthValue">The first value (this will be modified fourth).</param>
        </member>
        <member name="M:RAWSimO.Core.Configurations.LayoutConfiguration.GetMetaInfoBasedLayoutName">
            <summary>
            Returns a simple layout describing name.
            </summary>
            <returns>A string that can be used as an instance / layout name.</returns>
        </member>
        <member name="M:RAWSimO.Core.Configurations.LayoutConfiguration.isValid(System.String@)">
            <summary>
            Checks whether the layout can be generated.
            </summary>
            <param name="errorMessage">A message describing the error if the layout is not valid.</param>
            <returns>Indicates whether the layout is valid.</returns>
        </member>
        <member name="T:RAWSimO.Core.Configurations.PathPlanningMethodType">
            <summary>
            All types of implemented path planning strategies.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PathPlanningMethodType.Simple">
            <summary>
            The default path planning algorithm utilizing an A* implementation.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PathPlanningMethodType.Dummy">
            <summary>
            Dummy Random Hop
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PathPlanningMethodType.WHCAvStar">
            <summary>
            Silver 06 - Cooperative pathfinding
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PathPlanningMethodType.WHCAnStar">
            <summary>
            Silver 06 - Cooperative pathfinding
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PathPlanningMethodType.FAR">
            <summary>
            Wang - Fast and Memory-Efficient Multi-Agent Pathfinding
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PathPlanningMethodType.BCP">
            <summary>
            Geramifard - Biased Cost Pathﬁnding
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PathPlanningMethodType.OD_ID">
            <summary>
            Standley - Finding Optimal Solutions to Cooperative Pathﬁnding Problems
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PathPlanningMethodType.CBS">
            <summary>
            Sharon - Conflict-based search for optimal multi-agent pathfinding
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PathPlanningMethodType.PAS">
            <summary>
            Erdmann - Parallel Multi-Agent Pathfinding
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Configurations.TaskAllocationMethodType">
            <summary>
            All types of implemented task allocation strategies.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.TaskAllocationMethodType.BruteForce">
            <summary>
            A method aiming to choose the task with the least execution time from all available tasks.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.TaskAllocationMethodType.Random">
            <summary>
            A mainly random approach to the task allocation.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.TaskAllocationMethodType.Balanced">
            <summary>
            A method aiming to distribute bots evenly among the stations and only allocate tasks fitting their currently assigned station.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.TaskAllocationMethodType.Swarm">
            <summary>
            A swarm intelligence inspired task allocation using stygmergic values to distribute bots among the stations.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.TaskAllocationMethodType.ConstantRatio">
            <summary>
            A method keeping the ratios between robots assigned for picking and for replenishment fixed and also does not change the equal distribution of them across the stations.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.TaskAllocationMethodType.Concept">
            <summary>
            A new method that has no concept yet.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Configurations.StationActivationMethodType">
            <summary>
            All types of implemented station activation strategies.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.StationActivationMethodType.ActivateAll">
            <summary>
            A method simply keeping all stations activated.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.StationActivationMethodType.BacklogThreshold">
            <summary>
            A method activating and deactivating stations depending on the current backlog size.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.StationActivationMethodType.ConstantRatio">
            <summary>
            A method activating pick and replenishment stations in a constant ratio to each other.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.StationActivationMethodType.WorkShift">
            <summary>
            A method that emulates working shifts and activates / deactivates stations accordingly.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Configurations.ItemStorageMethodType">
            <summary>
            All types of implemented item storage strategies.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.ItemStorageMethodType.Dummy">
            <summary>
            A dummy approach that does nothing at all. (Used in case another manager integrates this problem)
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.ItemStorageMethodType.Random">
            <summary>
            A mainly random approach to the item storage problem.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.ItemStorageMethodType.Location">
            <summary>
            A approach to the item storage problem with multiple different sized locations.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.ItemStorageMethodType.Correlative">
            <summary>
            An approach that aims to allocate items to pods to which highly correlating items are already assigned.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.ItemStorageMethodType.Fixed">
            <summary>
            An approach that aims to allocate items to pods to which highly correlating items are already assigned.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.ItemStorageMethodType.Turnover">
            <summary>
            An approach that aims to build high-speed and low-speed pods.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.ItemStorageMethodType.ClosestLocation">
            <summary>
            An approach that aims to allocate items to pods with smallest distance.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.ItemStorageMethodType.Reactive">
            <summary>
            An approach that waits for the allocation of bundles to input-stations and then applies a metric to allocate them to pods.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.ItemStorageMethodType.Emptiest">
            <summary>
            An approach that aims to allocate items to the emptiest pods.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.ItemStorageMethodType.LeastDemand">
            <summary>
            An approach that aims to allocate items to the least demanded pods.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Configurations.PodStorageMethodType">
            <summary>
            All types of implemented pod storage strategies.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PodStorageMethodType.Dummy">
            <summary>
            A dummy approach that does nothing at all. (Used in case another manager integrates this problem)
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PodStorageMethodType.Fixed">
            <summary>
            This method locks the positions at which the pods are stored.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PodStorageMethodType.Nearest">
            <summary>
            This method uses only distance information to determine the position of the pod to store.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PodStorageMethodType.StationBased">
            <summary>
            This method aims to store pods near to the stations.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PodStorageMethodType.Cache">
            <summary>
            This method aims to keep pods needed in near future near the station, while bringing others back to the remaining inventory.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PodStorageMethodType.Utility">
            <summary>
            This method determines scores for the pods and matches them with scores for the storage locations.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PodStorageMethodType.Random">
            <summary>
            This method allocates a random storage position to the pod.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PodStorageMethodType.Turnover">
            <summary>
            This method uses item-frequency information to assign the pods to the positions.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Configurations.RepositioningMethodType">
            <summary>
            All types of implemented repositioning strategies.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.RepositioningMethodType.Dummy">
            <summary>
            A dummy approach that does not supply any repositioning moves. Pods will exclusively be positioned by the pod storage manager.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.RepositioningMethodType.Cache">
            <summary>
            A method aiming to store useful pods in a cache zone while freeing up space in front of the output-stations.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.RepositioningMethodType.CacheDropoff">
            <summary>
            A method aiming to store useful pods in a cache zone while freeing up space in front of the output-stations.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.RepositioningMethodType.Utility">
            <summary>
            A method that repositions pods which utility value is most out of sync with what the current value suggested by a pod utility manager component says.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.RepositioningMethodType.Concept">
            <summary>
            A concept repositioning method.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Configurations.OrderBatchingMethodType">
            <summary>
            All types of implemented order batching strategies.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.OrderBatchingMethodType.Default">
            <summary>
            Default random order to output station assignments.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.OrderBatchingMethodType.Random">
            <summary>
            A complete random assignment of orders to output-stations.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.OrderBatchingMethodType.Workload">
            <summary>
            An approach assigning orders based on the current workload of the stations.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.OrderBatchingMethodType.Related">
            <summary>
            An approach assigning orders to stations whose orders have the most lines in common.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.OrderBatchingMethodType.NearBestPod">
            <summary>
            An approach assigning orders to stations near the best pod for the order.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.OrderBatchingMethodType.PodMatching">
            <summary>
            An approach selecting an order for a station where there is the best match of inbound items.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.OrderBatchingMethodType.LinesInCommon">
            <summary>
            An approach selecting an order that is most similar to the ones already assigned to a station.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.OrderBatchingMethodType.Queue">
            <summary>
            An approach building queues per station and selecting orders from these.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.OrderBatchingMethodType.Foresight">
            <summary>
            An approach exploiting information about the backlog to increase similarities of orders at the stations.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Configurations.ReplenishmentBatchingMethodType">
            <summary>
            All types of implemented replenishment batching strategies.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.ReplenishmentBatchingMethodType.Random">
            <summary>
            A complete random assignment of bundles to input-stations.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.ReplenishmentBatchingMethodType.SamePod">
            <summary>
            Bundles for the same pod are assigned to the same input-station.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Configurations.MethodManagementType">
            <summary>
            All types of implemented meta manager strategies.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.MethodManagementType.NoChange">
            <summary>
            Does not change any of the previously set mechanisms.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.MethodManagementType.Random">
            <summary>
            Does change managers periodically to new random ones.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.MethodManagementType.Scheduled">
            <summary>
            Does change managers at predefined timepoints to predefined ones.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Configurations.ControlConfiguration">
            <summary>
            Exposes the different parameters used by the different mechanisms.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.ControlConfiguration.#ctor">
            <summary>
            Creates a new default control configuration.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.ControlConfiguration.Name">
            <summary>
            The name of the config.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.ControlConfiguration.PathPlanningConfig">
            <summary>
            The configuration for the path planning control.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.ControlConfiguration.TaskAllocationConfig">
            <summary>
            The configuration for the task alocation to use.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.ControlConfiguration.StationActivationConfig">
            <summary>
            The configuration for the station activation in use.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.ControlConfiguration.ItemStorageConfig">
            <summary>
            The configuration for the item storage strategy.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.ControlConfiguration.PodStorageConfig">
            <summary>
            The configuration of the pod storage strategy.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.ControlConfiguration.RepositioningConfig">
            <summary>
            The configuration of the repositioning strategy.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.ControlConfiguration.OrderBatchingConfig">
            <summary>
            The configuration for the pod storage strategy to use.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.ControlConfiguration.ReplenishmentBatchingConfig">
            <summary>
            The configuration of the replenishment strategy to use.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.ControlConfiguration.MethodManagementConfig">
            <summary>
            The configuration for the meta method manager to use.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.ControlConfiguration.CommentTag1">
            <summary>
            Some optional comment tag that will be written to the footprint.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.ControlConfiguration.CommentTag2">
            <summary>
            Some optional comment tag that will be written to the footprint.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.ControlConfiguration.CommentTag3">
            <summary>
            Some optional comment tag that will be written to the footprint.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.ControlConfiguration.GetMetaInfoBasedConfigName">
            <summary>
            Checks wether all Configuartions are initialized and returns a simple string identifying the strategies set by the config.
            </summary>
            <returns>A simple string that can be used as an abstract identifier.</returns>
        </member>
        <member name="M:RAWSimO.Core.Configurations.ControlConfiguration.IsValid(System.String@)">
            <summary>
            Checks whether the method configuration is valid.
            </summary>
            <param name="errorMessage">A message describing the error if a method are not valid.</param>
            <returns>Indicates whether the method configuration is valid.</returns>
        </member>
        <member name="T:RAWSimO.Core.Configurations.ControllerConfigurationBase">
            <summary>
            The base class for all controller configurations.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.ControllerConfigurationBase.Name">
            <summary>
            A field that can be used to provide a name for the method. If no name is given, a default one is returned instead.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.ControllerConfigurationBase.GetMethodName">
            <summary>
            Returns a name identifying the method.
            </summary>
            <returns>The name of the method.</returns>
        </member>
        <member name="T:RAWSimO.Core.Configurations.PathPlanningConfiguration">
            <summary>
            Base class for the path planning configuration.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.PathPlanningConfiguration.GetMethodType">
            <summary>
            Returns the type of the corresponding method this configuration belongs to.
            </summary>
            <returns>The type of the method.</returns>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PathPlanningConfiguration.AutoSetParameter">
            <summary>
            Set parameter automatically and ignore the other ones
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PathPlanningConfiguration.CanTunnel">
            <summary>
            Indicates whether the robot can drive under stored pods (tunnel them).
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PathPlanningConfiguration.LengthOfAWaitStep">
            <summary>
            The length of a wait step
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PathPlanningConfiguration.RuntimeLimitPerAgent">
            <summary>
            The runtime limit per call per agent
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PathPlanningConfiguration.RunTimeLimitOverall">
            <summary>
            The runtime limit per call
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PathPlanningConfiguration.Clocking">
            <summary>
            Minimum time space between two calls
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.PathPlanningConfiguration.Parse(System.String[])">
            <summary>
            Parses the specified arguments.
            </summary>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:RAWSimO.Core.Configurations.PathPlanningConfiguration.AttributesAreValid(System.String@)">
            <summary>
            Small sanity check for the path planning configuration.
            </summary>
            <param name="errorMessage">A message describing the error if the configuration is not valid.</param>
            <returns>Indicates whether the path planning configuration is valid.</returns>
        </member>
        <member name="T:RAWSimO.Core.Configurations.TaskAllocationConfiguration">
            <summary>
            Base class for the task allocation configuration.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.TaskAllocationConfiguration.GetMethodType">
            <summary>
            Returns the type of the corresponding method this configuration belongs to.
            </summary>
            <returns>The type of the method.</returns>
        </member>
        <member name="M:RAWSimO.Core.Configurations.TaskAllocationConfiguration.AttributesAreValid(System.String@)">
            <summary>
            Checks whether the task allacation configuration is valid.
            </summary>
            <param name="errorMessage">A message describing the error if the configuration is not valid.</param>
            <returns>Indicates whether the task allocation configuration is valid.</returns>
        </member>
        <member name="T:RAWSimO.Core.Configurations.StationActivationConfiguration">
            <summary>
            Base class for the station activation configuration.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.StationActivationConfiguration.GetMethodType">
            <summary>
            Returns the type of the corresponding method this configuration belongs to.
            </summary>
            <returns>The type of the method.</returns>
        </member>
        <member name="T:RAWSimO.Core.Configurations.ItemStorageConfiguration">
            <summary>
            Base class for the item storage configuration.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.ItemStorageConfiguration.GetMethodType">
            <summary>
            Returns the type of the corresponding method this configuration belongs to.
            </summary>
            <returns>The type of the method.</returns>
        </member>
        <member name="M:RAWSimO.Core.Configurations.ItemStorageConfiguration.AttributesAreValid(System.String@)">
            <summary>
            Checks whether the item storage configuration is valid.
            </summary>
            <param name="errorMessage">A message describing the error if the configuration is not valid.</param>
            <returns>Indicates whether the item storage configuration is valid.</returns>
        </member>
        <member name="T:RAWSimO.Core.Configurations.PodStorageConfiguration">
            <summary>
            Base class for the pod storage configuration.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.PodStorageConfiguration.GetMethodType">
            <summary>
            Returns the type of the corresponding method this configuration belongs to.
            </summary>
            <returns>The type of the method.</returns>
        </member>
        <member name="M:RAWSimO.Core.Configurations.PodStorageConfiguration.AttributesAreValid(System.String@)">
            <summary>
            Checks whether the pod storage configuration is valid.
            </summary>
            <param name="errorMessage">A message describing the error if the configuration is not valid.</param>
            <returns>Indicates whether the pod storage configuration is valid.</returns>
        </member>
        <member name="T:RAWSimO.Core.Configurations.RepositioningConfiguration">
            <summary>
            Base class for the repositioning configuration.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.RepositioningConfiguration.GetMethodType">
            <summary>
            Returns the type of the corresponding method this configuration belongs to.
            </summary>
            <returns>The type of the method.</returns>
        </member>
        <member name="T:RAWSimO.Core.Configurations.OrderBatchingConfiguration">
            <summary>
            Base class for the order batching configuration.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.OrderBatchingConfiguration.GetMethodType">
            <summary>
            Returns the type of the corresponding method this configuration belongs to.
            </summary>
            <returns>The type of the method.</returns>
        </member>
        <member name="T:RAWSimO.Core.Configurations.ReplenishmentBatchingConfiguration">
            <summary>
            Base class for the replenishment batching configuration.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.ReplenishmentBatchingConfiguration.GetMethodType">
            <summary>
            Returns the type of the corresponding method this configuration belongs to.
            </summary>
            <returns>The type of the method.</returns>
        </member>
        <member name="T:RAWSimO.Core.Configurations.MethodManagementConfiguration">
            <summary>
            Base class for the meta method configuration.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.MethodManagementConfiguration.GetMethodType">
            <summary>
            Returns the type of the corresponding method this configuration belongs to.
            </summary>
            <returns>The type of the method.</returns>
        </member>
        <member name="M:RAWSimO.Core.Configurations.MethodManagementConfiguration.AttributesAreValid(System.String@)">
            <summary>
            Checks whether the method management configuration is valid.
            </summary>
            <param name="errorMessage">A message describing the error if the configuration is not valid.</param>
            <returns>Indicates whether the method management configuration is valid.</returns>
        </member>
        <member name="T:RAWSimO.Core.Configurations.CacheConfiguration">
            <summary>
            Contains parameters for cache zones.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.CacheConfiguration.CacheFraction">
            <summary>
            The relative number of cache storage locations of all storage locations.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.CacheConfiguration.DropoffCount">
            <summary>
            The absolute number of drop-off locations per station.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.CacheConfiguration.ZonePriority">
            <summary>
            Indicates the preference between the different zones.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.CacheConfiguration.Match(RAWSimO.Core.Configurations.CacheConfiguration)">
            <summary>
            Checks whether this configuration matches the other given one.
            </summary>
            <param name="other">The other configuration.</param>
            <returns><code>true</code> if both configurations match, <code>false</code> otherwise.</returns>
        </member>
        <member name="M:RAWSimO.Core.Configurations.CacheConfiguration.ToString">
            <summary>
            Returns a string representation of this object.
            </summary>
            <returns>A string representing this object.</returns>
        </member>
        <member name="T:RAWSimO.Core.Configurations.PodUtilityConfiguration">
            <summary>
            Contains parameters for the pod utility ordering strategy.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PodUtilityConfiguration.ScoreUpdateTimeout">
            <summary>
            An optional timeout for updating the scores of pods and storage locations.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PodUtilityConfiguration.BufferStorageLocations">
            <summary>
            The fractional amount of storage locations to use in addition to the ones necessary given by the number of pods.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PodUtilityConfiguration.RankCorridor">
            <summary>
            The number of ranks to be indifferent when determining the perfect position for a pod.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PodUtilityConfiguration.WeightSpeed">
            <summary>
            The weight of the speed (item frequencies contained in pod) of a pod.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PodUtilityConfiguration.WeightUtility">
            <summary>
            The weight of the utility (useful items in a pod) of a pod.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PodUtilityConfiguration.ConsiderBacklogDemand">
            <summary>
            Indicates whether the complete backlog demand will be considered, or only the demand of orders assigned or queued at the stations.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PodUtilityConfiguration.WeighSpeedByContainedCount">
            <summary>
            Indicates whether determining the speed (aggregated frequency) of a pod does consider the number of units contained or only whether the SKU is contained at all.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PodUtilityConfiguration.UseStaticItemFrequency">
            <summary>
            Indicates whether to use the static or measured item frequency.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.PodUtilityConfiguration.Match(RAWSimO.Core.Configurations.PodUtilityConfiguration)">
            <summary>
            Checks whether this configuration matches the other given one.
            </summary>
            <param name="other">The other configuration.</param>
            <returns><code>true</code> if both configurations match, <code>false</code> otherwise.</returns>
        </member>
        <member name="M:RAWSimO.Core.Configurations.PodUtilityConfiguration.ToString">
            <summary>
            Returns a string representation of this object.
            </summary>
            <returns>A string representing this object.</returns>
        </member>
        <member name="T:RAWSimO.Core.Configurations.DummyItemStorageConfiguration">
            <summary>
            The configuration for the corresponding method.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.DummyItemStorageConfiguration.GetMethodType">
            <summary>
            Returns the type of the corresponding method this configuration belongs to.
            </summary>
            <returns>The type of the method.</returns>
        </member>
        <member name="M:RAWSimO.Core.Configurations.DummyItemStorageConfiguration.GetMethodName">
            <summary>
            Returns a name identifying the method.
            </summary>
            <returns>The name of the method.</returns>
        </member>
        <member name="T:RAWSimO.Core.Configurations.RandomItemStorageConfiguration">
            <summary>
            The configuration for the corresponding method.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.RandomItemStorageConfiguration.GetMethodType">
            <summary>
            Returns the type of the corresponding method this configuration belongs to.
            </summary>
            <returns>The type of the method.</returns>
        </member>
        <member name="M:RAWSimO.Core.Configurations.RandomItemStorageConfiguration.GetMethodName">
            <summary>
            Returns a name identifying the method.
            </summary>
            <returns>The name of the method.</returns>
        </member>
        <member name="F:RAWSimO.Core.Configurations.RandomItemStorageConfiguration.StickToPodUntilFull">
            <summary>
            Indicates whether the randomly chosen pod will be used again for other bundles until it is full or setdown.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.RandomItemStorageConfiguration.BufferThreshold">
            <summary>
            Specifies the threshold of the reserved capacity above which the pods are refilled.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.RandomItemStorageConfiguration.BufferTimeout">
            <summary>
            The time after which buffered bundles will be allocated even if they do not meet the threshold criterion.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.RandomItemStorageConfiguration.AttributesAreValid(System.String@)">
            <summary>
            Checks whether the item storage configuration is valid.
            </summary>
            <param name="errorMessage">A message describing the error if the configuration is not valid.</param>
            <returns>Indicates whether the item storage configuration is valid.</returns>
        </member>
        <member name="T:RAWSimO.Core.Configurations.LocationItemStorageConfiguration">
            <summary>
            The configuration for the corresponding method.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.LocationItemStorageConfiguration.GetMethodType">
            <summary>
            Returns the type of the corresponding method this configuration belongs to.
            </summary>
            <returns>The type of the method.</returns>
        </member>
        <member name="M:RAWSimO.Core.Configurations.LocationItemStorageConfiguration.GetMethodName">
            <summary>
            Returns a name identifying the method.
            </summary>
            <returns>The name of the method.</returns>
        </member>
        <member name="F:RAWSimO.Core.Configurations.LocationItemStorageConfiguration.StickToPodUntilFull">
            <summary>
            Indicates whether the randomly chosen pod will be used again for other bundles until it is full or setdown.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.LocationItemStorageConfiguration.BufferThreshold">
            <summary>
            Specifies the threshold of the reserved capacity above which the pods are refilled.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.LocationItemStorageConfiguration.BufferTimeout">
            <summary>
            The time after which buffered bundles will be allocated even if they do not meet the threshold criterion.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.LocationItemStorageConfiguration.AttributesAreValid(System.String@)">
            <summary>
            Checks whether the item storage configuration is valid.
            </summary>
            <param name="errorMessage">A message describing the error if the configuration is not valid.</param>
            <returns>Indicates whether the item storage configuration is valid.</returns>
        </member>
        <member name="T:RAWSimO.Core.Configurations.CorrelativeItemStorageConfiguration">
            <summary>
            The configuration for the corresponding method.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.CorrelativeItemStorageConfiguration.GetMethodType">
            <summary>
            Returns the type of the corresponding method this configuration belongs to.
            </summary>
            <returns>The type of the method.</returns>
        </member>
        <member name="M:RAWSimO.Core.Configurations.CorrelativeItemStorageConfiguration.GetMethodName">
            <summary>
            Returns a name identifying the method.
            </summary>
            <returns>The name of the method.</returns>
        </member>
        <member name="F:RAWSimO.Core.Configurations.CorrelativeItemStorageConfiguration.BufferThreshold">
            <summary>
            Specifies the threshold of the reserved capacity above which the pods are refilled.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.CorrelativeItemStorageConfiguration.BufferTimeout">
            <summary>
            The time after which buffered bundles will be allocated even if they do not meet the threshold criterion.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.CorrelativeItemStorageConfiguration.AttributesAreValid(System.String@)">
            <summary>
            Checks whether the item storage configuration is valid.
            </summary>
            <param name="errorMessage">A message describing the error if the configuration is not valid.</param>
            <returns>Indicates whether the item storage configuration is valid.</returns>
        </member>
        <member name="T:RAWSimO.Core.Configurations.FixedItemStorageConfiguration">
            <summary>
            The configuration for the corresponding method.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.FixedItemStorageConfiguration.GetMethodType">
            <summary>
            Returns the type of the corresponding method this configuration belongs to.
            </summary>
            <returns>The type of the method.</returns>
        </member>
        <member name="M:RAWSimO.Core.Configurations.FixedItemStorageConfiguration.GetMethodName">
            <summary>
            Returns a name identifying the method.
            </summary>
            <returns>The name of the method.</returns>
        </member>
        <member name="F:RAWSimO.Core.Configurations.FixedItemStorageConfiguration.BufferThreshold">
            <summary>
            Specifies the threshold of the reserved capacity above which the pods are refilled.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.FixedItemStorageConfiguration.BufferTimeout">
            <summary>
            The time after which buffered bundles will be allocated even if they do not meet the threshold criterion.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.FixedItemStorageConfiguration.AttributesAreValid(System.String@)">
            <summary>
            Checks whether the item storage configuration is valid.
            </summary>
            <param name="errorMessage">A message describing the error if the configuration is not valid.</param>
            <returns>Indicates whether the item storage configuration is valid.</returns>
        </member>
        <member name="F:RAWSimO.Core.Configurations.FixedItemStorageConfiguration.ClassBorders">
            <summary>
            Defines the class borders that specify the relative amount of storage locations per class.
            The first border specifies the high frequency section, the next one the next high frequency section and so on.
            The last border will always be 1.0, because we want to use all our storage locations.
            As one example: "0.1,0.3,1.0" will lead to 3 classes that contain 10 % of the pods in the first class, 20 % in the second one and the rest in the last class.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.FixedItemStorageConfiguration.ReallocationDelay">
            <summary>
            The time between two subsequent runs of the re-allocation of item-descriptions and pods to the storage classes.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.FixedItemStorageConfiguration.ReallocationOrderCount">
            <summary>
            The number of orders between two subsequent runs of the re-allocation of item-descriptions and pods to the storage classes.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.FixedItemStorageConfiguration.EmptiestInsteadOfRandom">
            <summary>
            Indicates whether the emptiest pod is filled or a random one.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.FixedItemStorageConfiguration.BufferThresholdPerClass">
            <summary>
            Specifies the threshold of the reserved capacity above which the pods are refilled.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.FixedItemStorageConfiguration.BufferTimeoutPerClass">
            <summary>
            The time after which buffered bundles will be allocated even if they do not meet the threshold criterion.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Configurations.TurnoverItemStorageConfiguration">
            <summary>
            The configuration for the corresponding method.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.TurnoverItemStorageConfiguration.GetMethodType">
            <summary>
            Returns the type of the corresponding method this configuration belongs to.
            </summary>
            <returns>The type of the method.</returns>
        </member>
        <member name="M:RAWSimO.Core.Configurations.TurnoverItemStorageConfiguration.GetMethodName">
            <summary>
            Returns a name identifying the method.
            </summary>
            <returns>The name of the method.</returns>
        </member>
        <member name="F:RAWSimO.Core.Configurations.TurnoverItemStorageConfiguration.ClassBorders">
            <summary>
            Defines the class borders that specify the relative amount of storage locations per class.
            The first border specifies the high frequency section, the next one the next high frequency section and so on.
            The last border will always be 1.0, because we want to use all our storage locations.
            As one example: "0.1,0.3,1.0" will lead to 3 classes that contain 10 % of the pods in the first class, 20 % in the second one and the rest in the last class.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.TurnoverItemStorageConfiguration.ReallocationDelay">
            <summary>
            The time between two subsequent runs of the re-allocation of item-descriptions and pods to the storage classes.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.TurnoverItemStorageConfiguration.ReallocationOrderCount">
            <summary>
            The number of orders between two subsequent runs of the re-allocation of item-descriptions and pods to the storage classes.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.TurnoverItemStorageConfiguration.EmptiestInsteadOfRandom">
            <summary>
            Indicates whether the emptiest pod is filled or a random one.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.TurnoverItemStorageConfiguration.BufferThresholdPerClass">
            <summary>
            Specifies the threshold of the reserved capacity above which the pods are refilled.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.TurnoverItemStorageConfiguration.BufferTimeoutPerClass">
            <summary>
            The time after which buffered bundles will be allocated even if they do not meet the threshold criterion.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Configurations.ClosestLocationItemStorageConfiguration">
            <summary>
            The configuration for the corresponding method.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.ClosestLocationItemStorageConfiguration.GetMethodType">
            <summary>
            Returns the type of the corresponding method this configuration belongs to.
            </summary>
            <returns>The type of the method.</returns>
        </member>
        <member name="M:RAWSimO.Core.Configurations.ClosestLocationItemStorageConfiguration.GetMethodName">
            <summary>
            Returns a name identifying the method.
            </summary>
            <returns>The name of the method.</returns>
        </member>
        <member name="F:RAWSimO.Core.Configurations.ClosestLocationItemStorageConfiguration.BufferThreshold">
            <summary>
            Specifies the threshold of the reserved capacity above which the pods are refilled.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.ClosestLocationItemStorageConfiguration.BufferTimeout">
            <summary>
            The time after which buffered bundles will be allocated even if they do not meet the threshold criterion.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.ClosestLocationItemStorageConfiguration.AttributesAreValid(System.String@)">
            <summary>
            Checks whether the item storage configuration is valid.
            </summary>
            <param name="errorMessage">A message describing the error if the configuration is not valid.</param>
            <returns>Indicates whether the item storage configuration is valid.</returns>
        </member>
        <member name="T:RAWSimO.Core.Configurations.ReactiveItemStorageConfiguration">
            <summary>
            The configuration for the corresponding method.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.ReactiveItemStorageConfiguration.GetMethodType">
            <summary>
            Returns the type of the corresponding method this configuration belongs to.
            </summary>
            <returns>The type of the method.</returns>
        </member>
        <member name="M:RAWSimO.Core.Configurations.ReactiveItemStorageConfiguration.GetMethodName">
            <summary>
            Returns a name identifying the method.
            </summary>
            <returns>The name of the method.</returns>
        </member>
        <member name="F:RAWSimO.Core.Configurations.ReactiveItemStorageConfiguration.AllocationRule">
            <summary>
            The rule that is used to select a pod for a bundle.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.ReactiveItemStorageConfiguration.BufferThreshold">
            <summary>
            Specifies the threshold of the reserved capacity above which the pods are refilled.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.ReactiveItemStorageConfiguration.BufferTimeout">
            <summary>
            The time after which buffered bundles will be allocated even if they do not meet the threshold criterion.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.ReactiveItemStorageConfiguration.AttributesAreValid(System.String@)">
            <summary>
            Checks whether the item storage configuration is valid.
            </summary>
            <param name="errorMessage">A message describing the error if the configuration is not valid.</param>
            <returns>Indicates whether the item storage configuration is valid.</returns>
        </member>
        <member name="T:RAWSimO.Core.Configurations.EmptiestItemStorageConfiguration">
            <summary>
            The configuration for the corresponding method.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.EmptiestItemStorageConfiguration.GetMethodType">
            <summary>
            Returns the type of the corresponding method this configuration belongs to.
            </summary>
            <returns>The type of the method.</returns>
        </member>
        <member name="M:RAWSimO.Core.Configurations.EmptiestItemStorageConfiguration.GetMethodName">
            <summary>
            Returns a name identifying the method.
            </summary>
            <returns>The name of the method.</returns>
        </member>
        <member name="F:RAWSimO.Core.Configurations.EmptiestItemStorageConfiguration.StickToPodUntilFull">
            <summary>
            Indicates whether the chosen pod will be used again for other bundles until it is full or setdown.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.EmptiestItemStorageConfiguration.BufferThreshold">
            <summary>
            Specifies the threshold of the reserved capacity above which the pods are refilled.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.EmptiestItemStorageConfiguration.BufferTimeout">
            <summary>
            The time after which buffered bundles will be allocated even if they do not meet the threshold criterion.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.EmptiestItemStorageConfiguration.AttributesAreValid(System.String@)">
            <summary>
            Checks whether the item storage configuration is valid.
            </summary>
            <param name="errorMessage">A message describing the error if the configuration is not valid.</param>
            <returns>Indicates whether the item storage configuration is valid.</returns>
        </member>
        <member name="T:RAWSimO.Core.Configurations.LeastDemandItemStorageConfiguration">
            <summary>
            The configuration for the corresponding method.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.LeastDemandItemStorageConfiguration.GetMethodType">
            <summary>
            Returns the type of the corresponding method this configuration belongs to.
            </summary>
            <returns>The type of the method.</returns>
        </member>
        <member name="M:RAWSimO.Core.Configurations.LeastDemandItemStorageConfiguration.GetMethodName">
            <summary>
            Returns a name identifying the method.
            </summary>
            <returns>The name of the method.</returns>
        </member>
        <member name="F:RAWSimO.Core.Configurations.LeastDemandItemStorageConfiguration.StickToPodUntilFull">
            <summary>
            Indicates whether the chosen pod will be used again for other bundles until it is full or setdown.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.LeastDemandItemStorageConfiguration.BufferThreshold">
            <summary>
            Specifies the threshold of the reserved capacity above which the pods are refilled.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.LeastDemandItemStorageConfiguration.BufferTimeout">
            <summary>
            The time after which buffered bundles will be allocated even if they do not meet the threshold criterion.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.LeastDemandItemStorageConfiguration.AttributesAreValid(System.String@)">
            <summary>
            Checks whether the item storage configuration is valid.
            </summary>
            <param name="errorMessage">A message describing the error if the configuration is not valid.</param>
            <returns>Indicates whether the item storage configuration is valid.</returns>
        </member>
        <member name="T:RAWSimO.Core.Configurations.NoChangeMethodManagementConfiguration">
            <summary>
            The configuration for the corresponding method.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.NoChangeMethodManagementConfiguration.GetMethodType">
            <summary>
            Returns the type of the corresponding method this configuration belongs to.
            </summary>
            <returns>The type of the method.</returns>
        </member>
        <member name="M:RAWSimO.Core.Configurations.NoChangeMethodManagementConfiguration.GetMethodName">
            <summary>
            Returns a name identifying the method.
            </summary>
            <returns>The name of the method.</returns>
        </member>
        <member name="T:RAWSimO.Core.Configurations.RandomMethodManagementConfiguration">
            <summary>
            The configuration for the corresponding method.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.RandomMethodManagementConfiguration.GetMethodType">
            <summary>
            Returns the type of the corresponding method this configuration belongs to.
            </summary>
            <returns>The type of the method.</returns>
        </member>
        <member name="M:RAWSimO.Core.Configurations.RandomMethodManagementConfiguration.GetMethodName">
            <summary>
            Returns a name identifying the method.
            </summary>
            <returns>The name of the method.</returns>
        </member>
        <member name="F:RAWSimO.Core.Configurations.RandomMethodManagementConfiguration.ChangeTimeout">
            <summary>
            The time after which the methods are exchanged.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.RandomMethodManagementConfiguration.ExchangePodStorage">
            <summary>
            Indicates whether to exchange the pod storage manager.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.RandomMethodManagementConfiguration.AttributesAreValid(System.String@)">
            <summary>
            Checks whether the method management configuration is valid.
            </summary>
            <param name="errorMessage">A message describing the error if the configuration is not valid.</param>
            <returns>Indicates whether the method management configuration is valid.</returns>
        </member>
        <member name="T:RAWSimO.Core.Configurations.ScheduledMethodManagementConfiguration">
            <summary>
            The configuration for the corresponding method.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.ScheduledMethodManagementConfiguration.GetMethodType">
            <summary>
            Returns the type of the corresponding method this configuration belongs to.
            </summary>
            <returns>The type of the method.</returns>
        </member>
        <member name="M:RAWSimO.Core.Configurations.ScheduledMethodManagementConfiguration.GetMethodName">
            <summary>
            Returns a name identifying the method.
            </summary>
            <returns>The name of the method.</returns>
        </member>
        <member name="M:RAWSimO.Core.Configurations.ScheduledMethodManagementConfiguration.#ctor">
            <summary>
            Parameter-less contructor mainly used by the xml-serializer.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.ScheduledMethodManagementConfiguration.#ctor(RAWSimO.Core.Configurations.DefaultConstructorIdentificationClass)">
            <summary>
            Contructor that generates default values for all fields.
            </summary>
            <param name="param">Not used.</param>
        </member>
        <member name="F:RAWSimO.Core.Configurations.ScheduledMethodManagementConfiguration.RelativeMode">
            <summary>
            Indicates whether timepoints will be used relative to the overall simulation time (<code>true</code>) or as absolute values (<code>false</code>).
            In the case relative values the timepoints need to be from the range [0,1] and in case of absolute values the timepoints are in simulation time.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.ScheduledMethodManagementConfiguration.ScheduledPodStorageManagers">
            <summary>
            All pod storage managers to switch to scheduled by a timepoint.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Configurations.DefaultOrderBatchingConfiguration">
            <summary>
            The configuration for the corresponding method.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.DefaultOrderBatchingConfiguration.GetMethodType">
            <summary>
            Returns the type of the corresponding method this configuration belongs to.
            </summary>
            <returns>The type of the method.</returns>
        </member>
        <member name="M:RAWSimO.Core.Configurations.DefaultOrderBatchingConfiguration.GetMethodName">
            <summary>
            Returns a name identifying the method.
            </summary>
            <returns>The name of the method.</returns>
        </member>
        <member name="F:RAWSimO.Core.Configurations.DefaultOrderBatchingConfiguration.OrderSelectionRule">
            <summary>
            The rule to choose the order by.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.DefaultOrderBatchingConfiguration.StationSelectionRule">
            <summary>
            The rule to choose the station by.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.DefaultOrderBatchingConfiguration.Recycle">
            <summary>
            Indicates whether stations are recycled, i.e. one station is filled with orders as long as there is capacity left.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.DefaultOrderBatchingConfiguration.FastLane">
            <summary>
            Indicates whether a fast lane is used overriding the last assignment slot.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.DefaultOrderBatchingConfiguration.FastLaneTieBreaker">
            <summary>
            Indicates how to break ties when assigning fast lane orders.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Configurations.RandomOrderBatchingConfiguration">
            <summary>
            The configuration for the corresponding method.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.RandomOrderBatchingConfiguration.GetMethodType">
            <summary>
            Returns the type of the corresponding method this configuration belongs to.
            </summary>
            <returns>The type of the method.</returns>
        </member>
        <member name="M:RAWSimO.Core.Configurations.RandomOrderBatchingConfiguration.GetMethodName">
            <summary>
            Returns a name identifying the method.
            </summary>
            <returns>The name of the method.</returns>
        </member>
        <member name="F:RAWSimO.Core.Configurations.RandomOrderBatchingConfiguration.Recycle">
            <summary>
            Indicates whether stations are recycled, i.e. one station is filled with orders as long as there is capacity left.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Configurations.WorkloadOrderBatchingConfiguration">
            <summary>
            The configuration for the corresponding method.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.WorkloadOrderBatchingConfiguration.GetMethodType">
            <summary>
            Returns the type of the corresponding method this configuration belongs to.
            </summary>
            <returns>The type of the method.</returns>
        </member>
        <member name="M:RAWSimO.Core.Configurations.WorkloadOrderBatchingConfiguration.GetMethodName">
            <summary>
            Returns a name identifying the method.
            </summary>
            <returns>The name of the method.</returns>
        </member>
        <member name="F:RAWSimO.Core.Configurations.WorkloadOrderBatchingConfiguration.OrderingRule">
            <summary>
            Indicates which stations will be preferred for assigning orders to them.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Configurations.RelatedOrderBatchingConfiguration">
            <summary>
            The configuration for the corresponding method.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.RelatedOrderBatchingConfiguration.GetMethodType">
            <summary>
            Returns the type of the corresponding method this configuration belongs to.
            </summary>
            <returns>The type of the method.</returns>
        </member>
        <member name="M:RAWSimO.Core.Configurations.RelatedOrderBatchingConfiguration.GetMethodName">
            <summary>
            Returns a name identifying the method.
            </summary>
            <returns>The name of the method.</returns>
        </member>
        <member name="F:RAWSimO.Core.Configurations.RelatedOrderBatchingConfiguration.TieBreaker">
            <summary>
            The tie breaker to use when there are multiple stations with same number of order lines in common.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Configurations.NearBestPodOrderBatchingConfiguration">
            <summary>
            The configuration for the corresponding method.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.NearBestPodOrderBatchingConfiguration.GetMethodType">
            <summary>
            Returns the type of the corresponding method this configuration belongs to.
            </summary>
            <returns>The type of the method.</returns>
        </member>
        <member name="M:RAWSimO.Core.Configurations.NearBestPodOrderBatchingConfiguration.GetMethodName">
            <summary>
            Returns a name identifying the method.
            </summary>
            <returns>The name of the method.</returns>
        </member>
        <member name="F:RAWSimO.Core.Configurations.NearBestPodOrderBatchingConfiguration.DistanceRule">
            <summary>
            The rule determining which combination of best pod and output station is nearest to each other.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Configurations.ForesightOrderBatchingConfiguration">
            <summary>
            The configuration for the corresponding method.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.ForesightOrderBatchingConfiguration.GetMethodType">
            <summary>
            Returns the type of the corresponding method this configuration belongs to.
            </summary>
            <returns>The type of the method.</returns>
        </member>
        <member name="M:RAWSimO.Core.Configurations.ForesightOrderBatchingConfiguration.GetMethodName">
            <summary>
            Returns a name identifying the method.
            </summary>
            <returns>The name of the method.</returns>
        </member>
        <member name="F:RAWSimO.Core.Configurations.ForesightOrderBatchingConfiguration.ScoreFunctionStationOrder">
            <summary>
            The first score function to determine the best combination of order and station.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.ForesightOrderBatchingConfiguration.ScoreFunctionStationOrderSecondLevel">
            <summary>
            The tie breaker function to determine the best combination of order and station.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Configurations.PodMatchingOrderBatchingConfiguration">
            <summary>
            The configuration for the corresponding method.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.PodMatchingOrderBatchingConfiguration.GetMethodType">
            <summary>
            Returns the type of the corresponding method this configuration belongs to.
            </summary>
            <returns>The type of the method.</returns>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PodMatchingOrderBatchingConfiguration.TieBreaker">
            <summary>
            Indicates how to break ties when assigning orders.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PodMatchingOrderBatchingConfiguration.FastLane">
            <summary>
            Indicates whether a fast lane slot is used, i.e. one slot of each station is kept free for immediately fulfillable orders.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PodMatchingOrderBatchingConfiguration.LateBeforeMatch">
            <summary>
            Indicates that orders already late will be preferred over a well matching order.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PodMatchingOrderBatchingConfiguration.FastLaneTieBreaker">
            <summary>
            Indicates how to break ties when assigning fast lane orders.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.PodMatchingOrderBatchingConfiguration.GetMethodName">
            <summary>
            Returns a name identifying the method.
            </summary>
            <returns>The name of the method.</returns>
        </member>
        <member name="T:RAWSimO.Core.Configurations.LinesInCommonOrderBatchingConfiguration">
            <summary>
            The configuration for the corresponding method.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.LinesInCommonOrderBatchingConfiguration.GetMethodType">
            <summary>
            Returns the type of the corresponding method this configuration belongs to.
            </summary>
            <returns>The type of the method.</returns>
        </member>
        <member name="F:RAWSimO.Core.Configurations.LinesInCommonOrderBatchingConfiguration.TieBreaker">
            <summary>
            Indicates how to break ties when assigning orders.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.LinesInCommonOrderBatchingConfiguration.FastLane">
            <summary>
            Indicates whether a fast lane slot is used, i.e. one slot of each station is kept free for immediately fulfillable orders.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.LinesInCommonOrderBatchingConfiguration.FastLaneTieBreaker">
            <summary>
            Indicates how to break ties when assigning fast lane orders.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.LinesInCommonOrderBatchingConfiguration.GetMethodName">
            <summary>
            Returns a name identifying the method.
            </summary>
            <returns>The name of the method.</returns>
        </member>
        <member name="T:RAWSimO.Core.Configurations.QueueOrderBatchingConfiguration">
            <summary>
            The configuration for the corresponding method.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.QueueOrderBatchingConfiguration.GetMethodType">
            <summary>
            Returns the type of the corresponding method this configuration belongs to.
            </summary>
            <returns>The type of the method.</returns>
        </member>
        <member name="M:RAWSimO.Core.Configurations.QueueOrderBatchingConfiguration.GetMethodName">
            <summary>
            Returns a name identifying the method.
            </summary>
            <returns>The name of the method.</returns>
        </member>
        <member name="F:RAWSimO.Core.Configurations.QueueOrderBatchingConfiguration.QueueLength">
            <summary>
            The length of the order queue per station.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.QueueOrderBatchingConfiguration.FastLane">
            <summary>
            Indicates whether there always is one capacity slot of a station reserved for an immediately fulfillable order.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.QueueOrderBatchingConfiguration.StationOrderSelectionRule1">
            <summary>
            Rule settings for selecting an order to be assigned to a station (main rule).
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.QueueOrderBatchingConfiguration.StationOrderSelectionRule2">
            <summary>
            Rule settings for selecting an order to be assigned to a station (first tie breaker).
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.QueueOrderBatchingConfiguration.StationOrderSelectionRule3">
            <summary>
            Rule settings for selecting an order to be assigned to a station (second tie breaker).
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.QueueOrderBatchingConfiguration.FastLaneOrderSelectionRule1">
            <summary>
            Rule settings for selecting an order for an open fast lane slot of a station (main rule).
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.QueueOrderBatchingConfiguration.FastLaneOrderSelectionRule2">
            <summary>
            Rule settings for selecting an order for an open fast lane slot of a station (first tie breaker).
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.QueueOrderBatchingConfiguration.FastLaneOrderSelectionRule3">
            <summary>
            Rule settings for selecting an order for an open fast lane slot of a station (second tie breaker).
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.QueueOrderBatchingConfiguration.QueueOrderSelectionRule1">
            <summary>
            Rule settings for selecting an order for the queue of a station (main rule).
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.QueueOrderBatchingConfiguration.QueueOrderSelectionRule2">
            <summary>
            Rule settings for selecting an order for the queue of a station (first tie breaker).
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.QueueOrderBatchingConfiguration.QueueOrderSelectionRule3">
            <summary>
            Rule settings for selecting an order for the queue of a station (second tie breaker).
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Configurations.QueueOrderBatchingConfiguration.QueueOrderSelectionRuleType">
            <summary>
            Distinguishes between different order selection strategies for the queue order manager.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.QueueOrderBatchingConfiguration.QueueOrderSelectionRuleType.Random">
            <summary>
            A random selection rule.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.QueueOrderBatchingConfiguration.QueueOrderSelectionRuleType.FCFS">
            <summary>
            A first come first served selection rule.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.QueueOrderBatchingConfiguration.QueueOrderSelectionRuleType.EarliestDeadline">
            <summary>
            Prefers the earliest deadline.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.QueueOrderBatchingConfiguration.QueueOrderSelectionRuleType.VacantDeadline">
            <summary>
            Prefers deadlines that are becoming vacant.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.QueueOrderBatchingConfiguration.QueueOrderSelectionRuleType.InboundMatches">
            <summary>
            Prefers orders with matches along the inbound pods.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.QueueOrderBatchingConfiguration.QueueOrderSelectionRuleType.Completable">
            <summary>
            Prefers orders that can be completed quickly.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.QueueOrderBatchingConfiguration.QueueOrderSelectionRuleType.Lines">
            <summary>
            Prefers orders with most lines.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.QueueOrderBatchingConfiguration.QueueOrderSelectionRuleType.Related">
            <summary>
            Prefers orders related to already assigned ones.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Configurations.QueueOrderBatchingConfiguration.QueueOrderSelectionRuleConfig">
            <summary>
            The base config for all order selection rules implemented by this manager.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.QueueOrderBatchingConfiguration.QueueOrderSelectionRuleConfig.Type">
            <summary>
            Returns the type of this selection rule.
            </summary>
            <returns>The type of this selection rule.</returns>
        </member>
        <member name="T:RAWSimO.Core.Configurations.QueueOrderBatchingConfiguration.QueueOrderSelectionRandom">
            <summary>
            The config for the random selection rule.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.QueueOrderBatchingConfiguration.QueueOrderSelectionRandom.Type">
            <summary>
            Returns the type of this selection rule.
            </summary>
            <returns>The type of this selection rule.</returns>
        </member>
        <member name="T:RAWSimO.Core.Configurations.QueueOrderBatchingConfiguration.QueueOrderSelectionFCFS">
            <summary>
            The config for the FCFS selection rule.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.QueueOrderBatchingConfiguration.QueueOrderSelectionFCFS.Type">
            <summary>
            Returns the type of this selection rule.
            </summary>
            <returns>The type of this selection rule.</returns>
        </member>
        <member name="T:RAWSimO.Core.Configurations.QueueOrderBatchingConfiguration.QueueOrderSelectionEarliestDeadline">
            <summary>
            The config for the earliest deadline selection rule.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.QueueOrderBatchingConfiguration.QueueOrderSelectionEarliestDeadline.Type">
            <summary>
            Returns the type of this selection rule.
            </summary>
            <returns>The type of this selection rule.</returns>
        </member>
        <member name="T:RAWSimO.Core.Configurations.QueueOrderBatchingConfiguration.QueueOrderSelectionDeadlineVacant">
            <summary>
            The config for the deadline closer than X selection rule.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.QueueOrderBatchingConfiguration.QueueOrderSelectionDeadlineVacant.Type">
            <summary>
            Returns the type of this selection rule.
            </summary>
            <returns>The type of this selection rule.</returns>
        </member>
        <member name="F:RAWSimO.Core.Configurations.QueueOrderBatchingConfiguration.QueueOrderSelectionDeadlineVacant.VacantOrderCutoff">
            <summary>
            All orders with a deadline earlier than the given cutoff will be considered vacant.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Configurations.QueueOrderBatchingConfiguration.QueueOrderSelectionInboundMatches">
            <summary>
            The config for the inbound inventory match count selection rule.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.QueueOrderBatchingConfiguration.QueueOrderSelectionInboundMatches.Type">
            <summary>
            Returns the type of this selection rule.
            </summary>
            <returns>The type of this selection rule.</returns>
        </member>
        <member name="F:RAWSimO.Core.Configurations.QueueOrderBatchingConfiguration.QueueOrderSelectionInboundMatches.DistanceForWeighting">
            <summary>
            The distance within which available material will get a score bonus. Matches behind this distance are considered equally.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Configurations.QueueOrderBatchingConfiguration.QueueOrderSelectionCompleteable">
            <summary>
            The config for the immediate order completability selection rule.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.QueueOrderBatchingConfiguration.QueueOrderSelectionCompleteable.Type">
            <summary>
            Returns the type of this selection rule.
            </summary>
            <returns>The type of this selection rule.</returns>
        </member>
        <member name="F:RAWSimO.Core.Configurations.QueueOrderBatchingConfiguration.QueueOrderSelectionCompleteable.OnlyNearestPod">
            <summary>
            Indicates whether only the nearest pod is considered for really immediately completable orders.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Configurations.QueueOrderBatchingConfiguration.QueueOrderSelectionMostLines">
            <summary>
            The config for the most lines selection rule.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.QueueOrderBatchingConfiguration.QueueOrderSelectionMostLines.Type">
            <summary>
            Returns the type of this selection rule.
            </summary>
            <returns>The type of this selection rule.</returns>
        </member>
        <member name="F:RAWSimO.Core.Configurations.QueueOrderBatchingConfiguration.QueueOrderSelectionMostLines.UnitsInsteadOfLines">
            <summary>
            Prefers orders with most units overall instead of most lines.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Configurations.QueueOrderBatchingConfiguration.QueueOrderSelectionRelated">
            <summary>
            The config for the related to order pool selection rule.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.QueueOrderBatchingConfiguration.QueueOrderSelectionRelated.Type">
            <summary>
            Returns the type of this selection rule.
            </summary>
            <returns>The type of this selection rule.</returns>
        </member>
        <member name="T:RAWSimO.Core.Configurations.PrefRestLocationForBot">
            <summary>
            Determines the ordering for the selection of a rest location for a robot.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PrefRestLocationForBot.Random">
            <summary>
            Order by random.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PrefRestLocationForBot.RandomSameTier">
            <summary>
            Order by random, but prefer locations on the same tier.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PrefRestLocationForBot.Middle">
            <summary>
            Order by vicinity to middle of the tier.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PrefRestLocationForBot.MiddleSameTier">
            <summary>
            Order by vicinity to middle of the tier, but prefer the same tier.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PrefRestLocationForBot.Nearest">
            <summary>
            Order by vicinity to bot.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Configurations.PrefIStationForBotWithPod">
            <summary>
            Determines the ordering for the selection of an input station for a robot.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PrefIStationForBotWithPod.Random">
            <summary>
            Order by random.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PrefIStationForBotWithPod.Nearest">
            <summary>
            Order by the distance between bot and station.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PrefIStationForBotWithPod.WorkAmount">
            <summary>
            Order by the estimate amount of work that can be done at the station.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Configurations.PCScorerIStationForBotWithPod">
            <summary>
            The base class for all pod selection scorer parameter classes.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.PCScorerIStationForBotWithPod.Type">
            <summary>
            The type of the method.
            </summary>
            <returns>The type.</returns>
        </member>
        <member name="T:RAWSimO.Core.Configurations.PCScorerIStationForBotWithPodRandom">
            <summary>
            Exposes the parameters for the given pod selection scorer / strategy.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.PCScorerIStationForBotWithPodRandom.Type">
            <summary>
            The type of the method.
            </summary>
            <returns>The type.</returns>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PCScorerIStationForBotWithPodRandom.PreferSameTier">
            <summary>
            Indicates whether to prefer the same tier.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Configurations.PCScorerIStationForBotWithPodNearest">
            <summary>
            Exposes the parameters for the given pod selection scorer / strategy.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.PCScorerIStationForBotWithPodNearest.Type">
            <summary>
            The type of the method.
            </summary>
            <returns>The type.</returns>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PCScorerIStationForBotWithPodNearest.DistanceMetric">
            <summary>
            Indicates whether to prefer the same tier.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Configurations.PCScorerIStationForBotWithPodWorkAmount">
            <summary>
            Exposes the parameters for the given pod selection scorer / strategy.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.PCScorerIStationForBotWithPodWorkAmount.Type">
            <summary>
            The type of the method.
            </summary>
            <returns>The type.</returns>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PCScorerIStationForBotWithPodWorkAmount.IncludeAge">
            <summary>
            Indicates whether to consider the age of the 
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PCScorerIStationForBotWithPodWorkAmount.PreferSameTier">
            <summary>
            Indicates whether to prefer the same tier.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Configurations.PrefOStationForBotWithPod">
            <summary>
            Determines the ordering for the selection of an output station for a robot.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PrefOStationForBotWithPod.Random">
            <summary>
            Order by random.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PrefOStationForBotWithPod.Nearest">
            <summary>
            Order by the distance between bot and station.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PrefOStationForBotWithPod.WorkAmount">
            <summary>
            Order by the estimate amount of work that can be done at the station.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Configurations.PCScorerOStationForBotWithPod">
            <summary>
            The base class for all pod selection scorer parameter classes.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.PCScorerOStationForBotWithPod.Type">
            <summary>
            The type of the method.
            </summary>
            <returns>The type.</returns>
        </member>
        <member name="T:RAWSimO.Core.Configurations.PCScorerOStationForBotWithPodRandom">
            <summary>
            Exposes the parameters for the given pod selection scorer / strategy.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.PCScorerOStationForBotWithPodRandom.Type">
            <summary>
            The type of the method.
            </summary>
            <returns>The type.</returns>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PCScorerOStationForBotWithPodRandom.PreferSameTier">
            <summary>
            Indicates whether to prefer the same tier.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Configurations.PCScorerOStationForBotWithPodNearest">
            <summary>
            Exposes the parameters for the given pod selection scorer / strategy.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.PCScorerOStationForBotWithPodNearest.Type">
            <summary>
            The type of the method.
            </summary>
            <returns>The type.</returns>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PCScorerOStationForBotWithPodNearest.DistanceMetric">
            <summary>
            Indicates whether to prefer the same tier.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Configurations.PCScorerOStationForBotWithPodWorkAmount">
            <summary>
            Exposes the parameters for the given pod selection scorer / strategy.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.PCScorerOStationForBotWithPodWorkAmount.Type">
            <summary>
            The type of the method.
            </summary>
            <returns>The type.</returns>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PCScorerOStationForBotWithPodWorkAmount.ValueMetric">
            <summary>
            Indicates the base metric to calculate the score value.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PCScorerOStationForBotWithPodWorkAmount.OnlyPositiveLateness">
            <summary>
            Indicates whether lateness will only be considered as a positive value, i.e. only already late orders will make a difference in the score value.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PCScorerOStationForBotWithPodWorkAmount.PreferSameTier">
            <summary>
            Indicates whether to prefer the same tier.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Configurations.PrefPodForIStationBot">
            <summary>
            Determines the ordering for the selection of an input station for a pod.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PrefPodForIStationBot.Random">
            <summary>
            Order by random.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PrefPodForIStationBot.Nearest">
            <summary>
            Order by the distance between pod and bot.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PrefPodForIStationBot.Demand">
            <summary>
            Order by demand for the bundles.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PrefPodForIStationBot.WorkAmount">
            <summary>
            Order by the estimate amount of work that can be done at the station.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Configurations.PCScorerPodForIStationBot">
            <summary>
            The base class for all pod selection scorer parameter classes.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.PCScorerPodForIStationBot.Type">
            <summary>
            The type of the method.
            </summary>
            <returns>The type.</returns>
        </member>
        <member name="T:RAWSimO.Core.Configurations.PCScorerPodForIStationBotRandom">
            <summary>
            Exposes the parameters for the given pod selection scorer / strategy.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.PCScorerPodForIStationBotRandom.Type">
            <summary>
            The type of the method.
            </summary>
            <returns>The type.</returns>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PCScorerPodForIStationBotRandom.PreferSameTier">
            <summary>
            Indicates whether to prefer the same tier.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Configurations.PCScorerPodForIStationBotNearest">
            <summary>
            Exposes the parameters for the given pod selection scorer / strategy.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.PCScorerPodForIStationBotNearest.Type">
            <summary>
            The type of the method.
            </summary>
            <returns>The type.</returns>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PCScorerPodForIStationBotNearest.DistanceMetric">
            <summary>
            Indicates whether to prefer the same tier.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PCScorerPodForIStationBotNearest.EstimateBotPodDistance">
            <summary>
            Indicates whether to estimate the distance between the bot and the pod instead of fully calculating it.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Configurations.PCScorerPodForIStationBotDemand">
            <summary>
            Exposes the parameters for the given pod selection scorer / strategy.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.PCScorerPodForIStationBotDemand.Type">
            <summary>
            The type of the method.
            </summary>
            <returns>The type.</returns>
        </member>
        <member name="T:RAWSimO.Core.Configurations.PCScorerPodForIStationBotWorkAmount">
            <summary>
            Exposes the parameters for the given pod selection scorer / strategy.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.PCScorerPodForIStationBotWorkAmount.Type">
            <summary>
            The type of the method.
            </summary>
            <returns>The type.</returns>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PCScorerPodForIStationBotWorkAmount.IncludeAge">
            <summary>
            Indicates whether to consider the age of the 
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PCScorerPodForIStationBotWorkAmount.PreferSameTier">
            <summary>
            Indicates whether to prefer the same tier.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Configurations.PrefPodForOStationBot">
            <summary>
            Determines the ordering for the selection of an output station for a pod.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PrefPodForOStationBot.Random">
            <summary>
            Order by random.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PrefPodForOStationBot.Fill">
            <summary>
            Order by fill level.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PrefPodForOStationBot.Nearest">
            <summary>
            Order by the distance.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PrefPodForOStationBot.Demand">
            <summary>
            Order by combined demand.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PrefPodForOStationBot.Completeable">
            <summary>
            Order by number of completeable orders.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PrefPodForOStationBot.WorkAmount">
            <summary>
            Order by the estimate amount of work that can be done at the station.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Configurations.PCScorerPodForOStationBot">
            <summary>
            The base class for all pod selection scorer parameter classes.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.PCScorerPodForOStationBot.Type">
            <summary>
            The type of the method.
            </summary>
            <returns>The type.</returns>
        </member>
        <member name="T:RAWSimO.Core.Configurations.PCScorerPodForOStationBotRandom">
            <summary>
            Exposes the parameters for the given pod selection scorer / strategy.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.PCScorerPodForOStationBotRandom.Type">
            <summary>
            The type of the method.
            </summary>
            <returns>The type.</returns>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PCScorerPodForOStationBotRandom.PreferSameTier">
            <summary>
            Indicates whether to prefer the same tier.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Configurations.PCScorerPodForOStationBotFill">
            <summary>
            Exposes the parameters for the given pod selection scorer / strategy.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.PCScorerPodForOStationBotFill.Type">
            <summary>
            The type of the method.
            </summary>
            <returns>The type.</returns>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PCScorerPodForOStationBotFill.PreferFullest">
            <summary>
            Indicates whether we are looking for a pod with a lot of inventory on it.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PCScorerPodForOStationBotFill.Binary">
            <summary>
            Indicates whether a relative threshold is used to distinguish between full / empty pods.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PCScorerPodForOStationBotFill.Threshold">
            <summary>
            The threshold to distinguish between full / empty pods when in binary mode.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Configurations.PCScorerPodForOStationBotNearest">
            <summary>
            Exposes the parameters for the given pod selection scorer / strategy.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.PCScorerPodForOStationBotNearest.Type">
            <summary>
            The type of the method.
            </summary>
            <returns>The type.</returns>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PCScorerPodForOStationBotNearest.DistanceMetric">
            <summary>
            Indicates whether to prefer the same tier.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PCScorerPodForOStationBotNearest.EstimateBotPodDistance">
            <summary>
            Indicates whether to estimate the distance between the bot and the pod instead of fully calculating it.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Configurations.PCScorerPodForOStationBotDemand">
            <summary>
            Exposes the parameters for the given pod selection scorer / strategy.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.PCScorerPodForOStationBotDemand.Type">
            <summary>
            The type of the method.
            </summary>
            <returns>The type.</returns>
        </member>
        <member name="T:RAWSimO.Core.Configurations.PCScorerPodForOStationBotCompleteable">
            <summary>
            Exposes the parameters for the given pod selection scorer / strategy.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.PCScorerPodForOStationBotCompleteable.Type">
            <summary>
            The type of the method.
            </summary>
            <returns>The type.</returns>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PCScorerPodForOStationBotCompleteable.IncludeQueuedOrders">
            <summary>
            Indicates whether to consider queued orders too.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Configurations.PCScorerPodForOStationBotWorkAmount">
            <summary>
            Exposes the parameters for the given pod selection scorer / strategy.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.PCScorerPodForOStationBotWorkAmount.Type">
            <summary>
            The type of the method.
            </summary>
            <returns>The type.</returns>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PCScorerPodForOStationBotWorkAmount.ValueMetric">
            <summary>
            Indicates the base metric to calculate the score value.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PCScorerPodForOStationBotWorkAmount.OnlyPositiveLateness">
            <summary>
            Indicates whether lateness will only be considered as a positive value, i.e. only already late orders will make a difference in the score value.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PCScorerPodForOStationBotWorkAmount.PreferSameTier">
            <summary>
            Indicates whether to prefer the same tier.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PCScorerPodForOStationBotWorkAmount.BacklogWeight">
            <summary>
            The weight of picks that can potentially be done with the content of the pod for orders currently assigned to the station's individual backlog.
            The number expresses how one pick will be weighted compared to a pick that can be done right away with orders already assigned to the station.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PCScorerPodForOStationBotWorkAmount.CompleteableOrderBoost">
            <summary>
            The additional boost for picks that are part of an order that can be completed with the assignment, i.e. a value of one means that completeable orders count double.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PCScorerPodForOStationBotWorkAmount.CompleteableQueuedOrders">
            <summary>
            Indicates whether completeable orders that are queued will also be considered.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PCScorerPodForOStationBotWorkAmount.TimeCosts">
            <summary>
            Indicates how much one time unit (for fetching the pod and bringing it to the station) costs in terms of picks (or in terms of eliminated age).
            I.e., this measure is a penalty cost added to each assignment option. Hence, assignments that use a pod further away get punished.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PCScorerPodForOStationBotWorkAmount.EstimateBotPodDistancePenalty">
            <summary>
            Indicates whether to only estimate the distance between bot and pod in order to calculate a penalty (instead of computing the real paths with A*, computationally costly).
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PCScorerPodForOStationBotWorkAmount.EstimatePodStationDistancePenalty">
            <summary>
            Indicates whether to only estimate the distance between pod and station in order to calculate a penalty (instead of computing the real paths with A*, computationally costly).
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Configurations.PodSelectionExtractRequestFilteringMode">
            <summary>
            Distinguishes different modes for the selection of pods for picking.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PodSelectionExtractRequestFilteringMode.AssignedOnly">
            <summary>
            Only requests already assigned to a station will be considered.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PodSelectionExtractRequestFilteringMode.AssignedAndQueuedEqually">
            <summary>
            Assigned and queued requests will be considered equally.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PodSelectionExtractRequestFilteringMode.AssignedAndCompleteQueued">
            <summary>
            Assigned requests and requests belonging to immediately completeable orders will be considered.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Configurations.DefaultPodSelectionConfiguration">
            <summary>
            Exposes parameters for the default selection of pods.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.DefaultPodSelectionConfiguration.OnTheFlyExtract">
            <summary>
            Indicates whether more suitable extract requests are included in an ongoing extract task on-the-fly.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.DefaultPodSelectionConfiguration.OnTheFlyStore">
            <summary>
            Indicates whether more suitable insert requests are included in an ongoing store task on-the-fly.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.DefaultPodSelectionConfiguration.FilterForConsideration">
            <summary>
            Indicates the mode for filtering suitable pods for picking.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.DefaultPodSelectionConfiguration.FilterForReservation">
            <summary>
            Indicates the mode for filtering the requests when deciding the actual reservations for a pod.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.DefaultPodSelectionConfiguration.InputExtendedSearchScorer">
            <summary>
            Rule settings for selecting an input station for a bot carrying a pod (main rule).
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.DefaultPodSelectionConfiguration.InputExtendedSearchScorerTieBreaker1">
            <summary>
            Rule settings for selecting an input station for a bot carrying a pod (first tie breaker).
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.DefaultPodSelectionConfiguration.InputExtendedSearchScorerTieBreaker2">
            <summary>
            Rule settings for selecting an input station for a bot carrying a pod (second tie breaker).
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.DefaultPodSelectionConfiguration.OutputExtendedSearchScorer">
            <summary>
            Rule settings for selecting an output station for a bot carrying a pod (main rule).
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.DefaultPodSelectionConfiguration.OutputExtendedSearchScorerTieBreaker1">
            <summary>
            Rule settings for selecting an output station for a bot carrying a pod (first tie breaker).
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.DefaultPodSelectionConfiguration.OutputExtendedSearchScorerTieBreaker2">
            <summary>
            Rule settings for selecting an output station for a bot carrying a pod (second tie breaker1).
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.DefaultPodSelectionConfiguration.InputPodScorer">
            <summary>
            Rule settings for selecting a pod for a bot working for an input station (main rule).
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.DefaultPodSelectionConfiguration.InputPodScorerTieBreaker1">
            <summary>
            Rule settings for selecting a pod for a bot working for an input station (first tie breaker).
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.DefaultPodSelectionConfiguration.InputPodScorerTieBreaker2">
            <summary>
            Rule settings for selecting a pod for a bot working for an input station (second tie breaker).
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.DefaultPodSelectionConfiguration.OutputPodScorer">
            <summary>
            Rule settings for selecting a pod for a bot working for an output station (main rule).
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.DefaultPodSelectionConfiguration.OutputPodScorerTieBreaker1">
            <summary>
            Rule settings for selecting a pod for a bot working for an output station (first tie breaker).
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.DefaultPodSelectionConfiguration.OutputPodScorerTieBreaker2">
            <summary>
            Rule settings for selecting a pod for a bot working for an output station (second tie breaker).
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.DefaultPodSelectionConfiguration.GetMethodName">
            <summary>
            Returns a name identifying the method.
            </summary>
            <returns>The name of the method.</returns>
        </member>
        <member name="T:RAWSimO.Core.Configurations.PCScorerWorkAmountValueMetric">
            <summary>
            Distinguishes between different metrics for calculating the base score value wor the work amount pod selection rule.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PCScorerWorkAmountValueMetric.OrderAge">
            <summary>
            Assesses the age (time an order spent in its pool) that we can get rid off by picking the corresponding line.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PCScorerWorkAmountValueMetric.OrderDueTime">
            <summary>
            Assesses the lateness we can get rid off by picking the corresponding line.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PCScorerWorkAmountValueMetric.Picks">
            <summary>
            Assesses the number of picks that be done with the pod.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Configurations.SimplePathPlanningConfiguration">
            <summary>
            The configuration for the corresponding method.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.SimplePathPlanningConfiguration.GetMethodType">
            <summary>
            Returns the type of the corresponding method this configuration belongs to.
            </summary>
            <returns>The type of the method.</returns>
        </member>
        <member name="M:RAWSimO.Core.Configurations.SimplePathPlanningConfiguration.GetMethodName">
            <summary>
            Returns a name identifying the method.
            </summary>
            <returns>The name of the method.</returns>
        </member>
        <member name="F:RAWSimO.Core.Configurations.SimplePathPlanningConfiguration.SimpleWaitingEnabled">
            <summary>
            Enables or disables bots simply waiting for the next waypoint to be clear before advancing.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.SimplePathPlanningConfiguration.SimpleWaitingExtendedEnabled">
            <summary>
            Enables or disables bots blocking the waypoint they just left.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.SimplePathPlanningConfiguration.SimpleWaitingD2Enabled">
            <summary>
            Enables or disables waiting for bots approaching the after next waypoint.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.SimplePathPlanningConfiguration.PingPongWaitingEnabled">
            <summary>
            Enables or disables random waiting after a ping pong (bot moving back and forth between two waypoints) occurred.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.SimplePathPlanningConfiguration.Parse(System.String[])">
            <summary>
            Parses the specified arguments.
            </summary>
            <param name="args">The arguments.</param>
        </member>
        <member name="T:RAWSimO.Core.Configurations.DummyPathPlanningConfiguration">
            <summary>
            The configuration for the corresponding method.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.DummyPathPlanningConfiguration.GetMethodType">
            <summary>
            Returns the type of the corresponding method this configuration belongs to.
            </summary>
            <returns>The type of the method.</returns>
        </member>
        <member name="M:RAWSimO.Core.Configurations.DummyPathPlanningConfiguration.GetMethodName">
            <summary>
            Returns a name identifying the method.
            </summary>
            <returns>The name of the method.</returns>
        </member>
        <member name="T:RAWSimO.Core.Configurations.WHCAvStarPathPlanningConfiguration">
            <summary>
            The configuration for the corresponding method.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.WHCAvStarPathPlanningConfiguration.GetMethodType">
            <summary>
            Returns the type of the corresponding method this configuration belongs to.
            </summary>
            <returns>The type of the method.</returns>
        </member>
        <member name="M:RAWSimO.Core.Configurations.WHCAvStarPathPlanningConfiguration.GetMethodName">
            <summary>
            Returns a name identifying the method.
            </summary>
            <returns>The name of the method.</returns>
        </member>
        <member name="F:RAWSimO.Core.Configurations.WHCAvStarPathPlanningConfiguration.LengthOfAWindow">
            <summary>
            The length of a time space search window
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.WHCAvStarPathPlanningConfiguration.AbortAtFirstConflict">
            <summary>
            Abort the search at first conflict
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.WHCAvStarPathPlanningConfiguration.UseDeadlockHandler">
            <summary>
            Indicates whether the method uses a deadlock handler.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.WHCAvStarPathPlanningConfiguration.Parse(System.String[])">
            <summary>
            Parses the specified arguments.
            </summary>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:RAWSimO.Core.Configurations.WHCAvStarPathPlanningConfiguration.AttributesAreValid(System.String@)">
            <summary>
            Checks whether the path planning configuration is valid.
            </summary>
            <param name="errorMessage">A message describing the error if the configuration is not valid.</param>
            <returns>Indicates whether the path planning configuration is valid.</returns>
        </member>
        <member name="T:RAWSimO.Core.Configurations.WHCAnStarPathPlanningConfiguration">
            <summary>
            The configuration for the corresponding method.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.WHCAnStarPathPlanningConfiguration.GetMethodType">
            <summary>
            Returns the type of the corresponding method this configuration belongs to.
            </summary>
            <returns>The type of the method.</returns>
        </member>
        <member name="M:RAWSimO.Core.Configurations.WHCAnStarPathPlanningConfiguration.GetMethodName">
            <summary>
            Returns a name identifying the method.
            </summary>
            <returns>The name of the method.</returns>
        </member>
        <member name="F:RAWSimO.Core.Configurations.WHCAnStarPathPlanningConfiguration.LengthOfAWindow">
            <summary>
            The length of a time space search window
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.WHCAnStarPathPlanningConfiguration.UseBias">
            <summary>
            Indicates whether the method uses the biased cost pathfinding algorithm
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.WHCAnStarPathPlanningConfiguration.UseDeadlockHandler">
            <summary>
            Indicates whether the method uses a deadlock handler.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.WHCAnStarPathPlanningConfiguration.Parse(System.String[])">
            <summary>
            Parses the specified arguments.
            </summary>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:RAWSimO.Core.Configurations.WHCAnStarPathPlanningConfiguration.AttributesAreValid(System.String@)">
            <summary>
            Checks whether the path planning configuration is valid.
            </summary>
            <param name="errorMessage">A message describing the error if the configuration is not valid.</param>
            <returns>Indicates whether the path planning configuration is valid.</returns>
        </member>
        <member name="T:RAWSimO.Core.Configurations.FARPathPlanningConfiguration">
            <summary>
            The configuration for the corresponding method.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.FARPathPlanningConfiguration.GetMethodType">
            <summary>
            Returns the type of the corresponding method this configuration belongs to.
            </summary>
            <returns>The type of the method.</returns>
        </member>
        <member name="M:RAWSimO.Core.Configurations.FARPathPlanningConfiguration.GetMethodName">
            <summary>
            Returns a name identifying the method.
            </summary>
            <returns>The name of the method.</returns>
        </member>
        <member name="F:RAWSimO.Core.Configurations.FARPathPlanningConfiguration.MaximumNumberOfBreakingManeuverTries">
            <summary>
            The maximum number of breaking maneuver tries
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.FARPathPlanningConfiguration.evadingStrategy">
            <summary>
            The evading strategy
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.FARPathPlanningConfiguration.NoBackEvading">
            <summary>
            No evading to a node the bot already evaded from
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.FARPathPlanningConfiguration.UseDeadlockHandler">
            <summary>
            Indicates whether the method uses a deadlock handler.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.FARPathPlanningConfiguration.Parse(System.String[])">
            <summary>
            Parses the specified arguments.
            </summary>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:RAWSimO.Core.Configurations.FARPathPlanningConfiguration.AttributesAreValid(System.String@)">
            <summary>
            Checks whether the path planning configuration is valid.
            </summary>
            <param name="errorMessage">A message describing the error if the configuration is not valid.</param>
            <returns>Indicates whether the path planning configuration is valid.</returns>
        </member>
        <member name="T:RAWSimO.Core.Configurations.CBSPathPlanningConfiguration">
            <summary>
            The configuration for the corresponding method.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.CBSPathPlanningConfiguration.GetMethodType">
            <summary>
            Returns the type of the corresponding method this configuration belongs to.
            </summary>
            <returns>The type of the method.</returns>
        </member>
        <member name="M:RAWSimO.Core.Configurations.CBSPathPlanningConfiguration.GetMethodName">
            <summary>
            Returns a name identifying the method.
            </summary>
            <returns>The name of the method.</returns>
        </member>
        <member name="F:RAWSimO.Core.Configurations.CBSPathPlanningConfiguration.SearchMethod">
            <summary>
            The search method
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.CBSPathPlanningConfiguration.Parse(System.String[])">
            <summary>
            Parses the specified arguments.
            </summary>
            <param name="args">The arguments.</param>
        </member>
        <member name="T:RAWSimO.Core.Configurations.BCPPathPlanningConfiguration">
            <summary>
            The configuration for the corresponding method.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.BCPPathPlanningConfiguration.GetMethodType">
            <summary>
            Returns the type of the corresponding method this configuration belongs to.
            </summary>
            <returns>The type of the method.</returns>
        </member>
        <member name="M:RAWSimO.Core.Configurations.BCPPathPlanningConfiguration.GetMethodName">
            <summary>
            Returns a name identifying the method.
            </summary>
            <returns>The name of the method.</returns>
        </member>
        <member name="F:RAWSimO.Core.Configurations.BCPPathPlanningConfiguration.BiasedCostAmount">
            <summary>
            amount of biased cost in seconds
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.BCPPathPlanningConfiguration.Parse(System.String[])">
            <summary>
            Parses the specified arguments.
            </summary>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:RAWSimO.Core.Configurations.BCPPathPlanningConfiguration.AttributesAreValid(System.String@)">
            <summary>
            Checks whether the path planning configuration is valid.
            </summary>
            <param name="errorMessage">A message describing the error if the configuration is not valid.</param>
            <returns>Indicates whether the path planning configuration is valid.</returns>
        </member>
        <member name="T:RAWSimO.Core.Configurations.PASPathPlanningConfiguration">
            <summary>
            The configuration for the corresponding method.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.PASPathPlanningConfiguration.GetMethodType">
            <summary>
            Returns the type of the corresponding method this configuration belongs to.
            </summary>
            <returns>The type of the method.</returns>
        </member>
        <member name="M:RAWSimO.Core.Configurations.PASPathPlanningConfiguration.GetMethodName">
            <summary>
            Returns a name identifying the method.
            </summary>
            <returns>The name of the method.</returns>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PASPathPlanningConfiguration.MaxPriorities">
            <summary>
            The maximum number of priorities
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.PASPathPlanningConfiguration.LengthOfAWindow">
            <summary>
            The length of a time space search window
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.PASPathPlanningConfiguration.Parse(System.String[])">
            <summary>
            Parses the specified arguments.
            </summary>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:RAWSimO.Core.Configurations.PASPathPlanningConfiguration.AttributesAreValid(System.String@)">
            <summary>
            Checks whether the path planning configuration is valid.
            </summary>
            <param name="errorMessage">A message describing the error if the configuration is not valid.</param>
            <returns>Indicates whether the path planning configuration is valid.</returns>
        </member>
        <member name="T:RAWSimO.Core.Configurations.ODIDPathPlanningConfiguration">
            <summary>
            The configuration for the corresponding method.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.ODIDPathPlanningConfiguration.GetMethodType">
            <summary>
            Returns the type of the corresponding method this configuration belongs to.
            </summary>
            <returns>The type of the method.</returns>
        </member>
        <member name="M:RAWSimO.Core.Configurations.ODIDPathPlanningConfiguration.GetMethodName">
            <summary>
            Returns a name identifying the method.
            </summary>
            <returns>The name of the method.</returns>
        </member>
        <member name="F:RAWSimO.Core.Configurations.ODIDPathPlanningConfiguration.LengthOfAWindow">
            <summary>
            The length of a time space search window
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.ODIDPathPlanningConfiguration.UseFinalReservations">
            <summary>
            Use Final Reservations
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.ODIDPathPlanningConfiguration.MaxNodeCountPerAgent">
            <summary>
            Use Final Reservations
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.ODIDPathPlanningConfiguration.Parse(System.String[])">
            <summary>
            Parses the specified arguments.
            </summary>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:RAWSimO.Core.Configurations.ODIDPathPlanningConfiguration.AttributesAreValid(System.String@)">
            <summary>
            Checks whether the path planning configuration is valid.
            </summary>
            <param name="errorMessage">A message describing the error if the configuration is not valid.</param>
            <returns>Indicates whether the path planning configuration is valid.</returns>
        </member>
        <member name="T:RAWSimO.Core.Configurations.DummyPodStorageConfiguration">
            <summary>
            The configuration for the corresponding method.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.DummyPodStorageConfiguration.GetMethodType">
            <summary>
            Returns the type of the corresponding method this configuration belongs to.
            </summary>
            <returns>The type of the method.</returns>
        </member>
        <member name="M:RAWSimO.Core.Configurations.DummyPodStorageConfiguration.GetMethodName">
            <summary>
            Returns a name identifying the method.
            </summary>
            <returns>The name of the method.</returns>
        </member>
        <member name="T:RAWSimO.Core.Configurations.RandomPodStorageConfiguration">
            <summary>
            The configuration for the corresponding method.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.RandomPodStorageConfiguration.GetMethodType">
            <summary>
            Returns the type of the corresponding method this configuration belongs to.
            </summary>
            <returns>The type of the method.</returns>
        </member>
        <member name="M:RAWSimO.Core.Configurations.RandomPodStorageConfiguration.GetMethodName">
            <summary>
            Returns a name identifying the method.
            </summary>
            <returns>The name of the method.</returns>
        </member>
        <member name="F:RAWSimO.Core.Configurations.RandomPodStorageConfiguration.PreferSameTier">
            <summary>
            Indicates whether the controller prefers storage locations of the same tier over others. Locations of the same tier are still chosen randomly.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Configurations.FixedPodStorageConfiguration">
            <summary>
            The configuration for the corresponding method.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.FixedPodStorageConfiguration.GetMethodType">
            <summary>
            Returns the type of the corresponding method this configuration belongs to.
            </summary>
            <returns>The type of the method.</returns>
        </member>
        <member name="M:RAWSimO.Core.Configurations.FixedPodStorageConfiguration.GetMethodName">
            <summary>
            Returns a name identifying the method.
            </summary>
            <returns>The name of the method.</returns>
        </member>
        <member name="F:RAWSimO.Core.Configurations.FixedPodStorageConfiguration.ClassBorders">
            <summary>
            The fraction of the storage used for A items.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.FixedPodStorageConfiguration.ReallocationDelay">
            <summary>
            The time between two subsequent runs of the re-allocation of item-descriptions and pods to the storage classes.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.FixedPodStorageConfiguration.ReallocationOrderCount">
            <summary>
            The number of orders between two subsequent runs of the re-allocation of item-descriptions and pods to the storage classes.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.FixedPodStorageConfiguration.StorageLocationClassRule">
            <summary>
            Indicates which rule to use to assign the storage locations to the different classes.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.FixedPodStorageConfiguration.PodDisposeRule">
            <summary>
            Indicates how a free storage location is selected from all free storage locations of a class.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.FixedPodStorageConfiguration.AttributesAreValid(System.String@)">
            <summary>
            Checks whether the pod storage configuration is valid.
            </summary>
            <param name="errorMessage">A message describing the error if the configuration is not valid.</param>
            <returns>Indicates whether the pod storage configuration is valid.</returns>
        </member>
        <member name="T:RAWSimO.Core.Configurations.NearestPodStorageConfiguration">
            <summary>
            The configuration for the corresponding method.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.NearestPodStorageConfiguration.GetMethodType">
            <summary>
            Returns the type of the corresponding method this configuration belongs to.
            </summary>
            <returns>The type of the method.</returns>
        </member>
        <member name="M:RAWSimO.Core.Configurations.NearestPodStorageConfiguration.GetMethodName">
            <summary>
            Returns a name identifying the method.
            </summary>
            <returns>The name of the method.</returns>
        </member>
        <member name="F:RAWSimO.Core.Configurations.NearestPodStorageConfiguration.PodDisposeRule">
            <summary>
            Indicates which distance metric is used to select a free pod storage location.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Configurations.StationBasedPodStorageConfiguration">
            <summary>
            The configuration for the corresponding method.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.StationBasedPodStorageConfiguration.GetMethodType">
            <summary>
            Returns the type of the corresponding method this configuration belongs to.
            </summary>
            <returns>The type of the method.</returns>
        </member>
        <member name="M:RAWSimO.Core.Configurations.StationBasedPodStorageConfiguration.GetMethodName">
            <summary>
            Returns a name identifying the method.
            </summary>
            <returns>The name of the method.</returns>
        </member>
        <member name="F:RAWSimO.Core.Configurations.StationBasedPodStorageConfiguration.OutputStationMode">
            <summary>
            Indicates whether to store the pods near the output-stations or the input-stations.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.StationBasedPodStorageConfiguration.PodDisposeRule">
            <summary>
            Indicates which distance metric is used to select a free pod storage location.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Configurations.CachePodStorageConfiguration">
            <summary>
            The configuration for the corresponding method.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.CachePodStorageConfiguration.GetMethodType">
            <summary>
            Returns the type of the corresponding method this configuration belongs to.
            </summary>
            <returns>The type of the method.</returns>
        </member>
        <member name="M:RAWSimO.Core.Configurations.CachePodStorageConfiguration.GetMethodName">
            <summary>
            Returns a name identifying the method.
            </summary>
            <returns>The name of the method.</returns>
        </member>
        <member name="F:RAWSimO.Core.Configurations.CachePodStorageConfiguration.ZoningConfiguration">
            <summary>
            The config to use for creating the different zones.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.CachePodStorageConfiguration.WeightUtility">
            <summary>
            The weight for the utility score of the pod.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.CachePodStorageConfiguration.WeightSpeed">
            <summary>
            The weight for the speed score of the pod.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.CachePodStorageConfiguration.WeightCacheFill">
            <summary>
            The weight of the current cache fill level when deciding whether to store a pod in the cache (compared to the already stored pods).
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.CachePodStorageConfiguration.WeightCacheUtility">
            <summary>
            The weight of the utility when deciding whether to store a pod in the cache (compared to the already stored pods).
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.CachePodStorageConfiguration.PodCacheableThreshold">
            <summary>
            If the combined value of cache-fill score and utility of the pod (value is of range [0,1]) is higher than this threshold the pod will be brought to the cache.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.CachePodStorageConfiguration.PodDisposeRule">
            <summary>
            The rule to use for selecting the storage location for the pod. This is superimposed by the decision about whether a pod is stored in the cache or not.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Configurations.UtilityPodStorageConfiguration">
            <summary>
            The configuration for the corresponding method.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.UtilityPodStorageConfiguration.GetMethodType">
            <summary>
            Returns the type of the corresponding method this configuration belongs to.
            </summary>
            <returns>The type of the method.</returns>
        </member>
        <member name="M:RAWSimO.Core.Configurations.UtilityPodStorageConfiguration.GetMethodName">
            <summary>
            Returns a name identifying the method.
            </summary>
            <returns>The name of the method.</returns>
        </member>
        <member name="F:RAWSimO.Core.Configurations.UtilityPodStorageConfiguration.UtilityConfig">
            <summary>
            The fractional amount of storage locations considered to be the most popular locations (by their distance to the output-stations).
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Configurations.TurnoverPodStorageConfiguration">
            <summary>
            The configuration for the corresponding method.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.TurnoverPodStorageConfiguration.GetMethodType">
            <summary>
            Returns the type of the corresponding method this configuration belongs to.
            </summary>
            <returns>The type of the method.</returns>
        </member>
        <member name="M:RAWSimO.Core.Configurations.TurnoverPodStorageConfiguration.GetMethodName">
            <summary>
            Returns a name identifying the method.
            </summary>
            <returns>The name of the method.</returns>
        </member>
        <member name="F:RAWSimO.Core.Configurations.TurnoverPodStorageConfiguration.ClassBorders">
            <summary>
            The fraction of the storage used for A items.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.TurnoverPodStorageConfiguration.ReallocationDelay">
            <summary>
            The time between two subsequent runs of the re-allocation of item-descriptions and pods to the storage classes.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.TurnoverPodStorageConfiguration.ReallocationOrderCount">
            <summary>
            The number of orders between two subsequent runs of the re-allocation of item-descriptions and pods to the storage classes.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.TurnoverPodStorageConfiguration.StorageLocationClassRule">
            <summary>
            Indicates which rule to use to assign the storage locations to the different classes.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.TurnoverPodStorageConfiguration.PodDisposeRule">
            <summary>
            Indicates how a free storage location is selected from all free storage locations of a class.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.TurnoverPodStorageConfiguration.AttributesAreValid(System.String@)">
            <summary>
            Checks whether the pod storage configuration is valid.
            </summary>
            <param name="errorMessage">A message describing the error if the configuration is not valid.</param>
            <returns>Indicates whether the pod storage configuration is valid.</returns>
        </member>
        <member name="T:RAWSimO.Core.Configurations.RandomReplenishmentBatchingConfiguration">
            <summary>
            The configuration for the corresponding method.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.RandomReplenishmentBatchingConfiguration.GetMethodType">
            <summary>
            Returns the type of the corresponding method this configuration belongs to.
            </summary>
            <returns>The type of the method.</returns>
        </member>
        <member name="M:RAWSimO.Core.Configurations.RandomReplenishmentBatchingConfiguration.GetMethodName">
            <summary>
            Returns a name identifying the method.
            </summary>
            <returns>The name of the method.</returns>
        </member>
        <member name="F:RAWSimO.Core.Configurations.RandomReplenishmentBatchingConfiguration.Recycle">
            <summary>
            Indicates whether stations are recycled, i.e. one station is filled with bundles as long as there is capacity left.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Configurations.SamePodReplenishmentBatchingConfiguration">
            <summary>
            The configuration for the corresponding method.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.SamePodReplenishmentBatchingConfiguration.GetMethodType">
            <summary>
            Returns the type of the corresponding method this configuration belongs to.
            </summary>
            <returns>The type of the method.</returns>
        </member>
        <member name="M:RAWSimO.Core.Configurations.SamePodReplenishmentBatchingConfiguration.GetMethodName">
            <summary>
            Returns a name identifying the method.
            </summary>
            <returns>The name of the method.</returns>
        </member>
        <member name="F:RAWSimO.Core.Configurations.SamePodReplenishmentBatchingConfiguration.FirstStationRule">
            <summary>
            Indicates how the first station is selected for a set of incoming bundles. If all bundles fit the station, it is the only station used for the bundles.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.SamePodReplenishmentBatchingConfiguration.BreakBatches">
            <summary>
            Tells the mechanism whether batches of bundles for a single pod can be divided across multiple stations at all.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.SamePodReplenishmentBatchingConfiguration.FCFS">
            <summary>
            Tells the mechanism to process batches in the order they arrive instead of aiming to allocate them as quickly as possible.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.SamePodReplenishmentBatchingConfiguration.OnlySameTier">
            <summary>
            Tells the mechanism to only accept pods for an input station that are located on the same tier.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Configurations.DummyRepositioningConfiguration">
            <summary>
            The configuration for the corresponding method.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.DummyRepositioningConfiguration.GetMethodType">
            <summary>
            Returns the type of the corresponding method this configuration belongs to.
            </summary>
            <returns>The type of the method.</returns>
        </member>
        <member name="M:RAWSimO.Core.Configurations.DummyRepositioningConfiguration.GetMethodName">
            <summary>
            Returns a name identifying the method.
            </summary>
            <returns>The name of the method.</returns>
        </member>
        <member name="T:RAWSimO.Core.Configurations.CacheDropoffRepositioningConfiguration">
            <summary>
            The configuration for the corresponding method.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.CacheDropoffRepositioningConfiguration.GetMethodType">
            <summary>
            Returns the type of the corresponding method this configuration belongs to.
            </summary>
            <returns>The type of the method.</returns>
        </member>
        <member name="M:RAWSimO.Core.Configurations.CacheDropoffRepositioningConfiguration.GetMethodName">
            <summary>
            Returns a name identifying the method.
            </summary>
            <returns>The name of the method.</returns>
        </member>
        <member name="F:RAWSimO.Core.Configurations.CacheDropoffRepositioningConfiguration.ZoningConfiguration">
            <summary>
            The config to use for creating the different zones.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.CacheDropoffRepositioningConfiguration.PreferSameTierMoves">
            <summary>
            Prefers same tier moves first.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.CacheDropoffRepositioningConfiguration.TargetFillCache">
            <summary>
            The targeted fill level of the cache.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.CacheDropoffRepositioningConfiguration.WeightUtility">
            <summary>
            The weight for the utility score of the pod.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.CacheDropoffRepositioningConfiguration.WeightSpeed">
            <summary>
            The weight for the speed score of the pod.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.CacheDropoffRepositioningConfiguration.PodCacheableThreshold">
            <summary>
            The fractional amount of pods that need to be less useful than the pod to remove from a drop-off location, so that the pod will be cached.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.CacheDropoffRepositioningConfiguration.PodDisposeRule">
            <summary>
            The rule to use for selecting the new storage location for the pod. This is superimposed by the decision about whether a pod is stored in the cache or not.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.CacheDropoffRepositioningConfiguration.GlobalTimeout">
            <summary>
            A global timeout that is used to block calls for a while, if no suitable move could be determined (in order to safe computational ressources).
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Configurations.CacheRepositioningConfiguration">
            <summary>
            The configuration for the corresponding method.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.CacheRepositioningConfiguration.GetMethodType">
            <summary>
            Returns the type of the corresponding method this configuration belongs to.
            </summary>
            <returns>The type of the method.</returns>
        </member>
        <member name="M:RAWSimO.Core.Configurations.CacheRepositioningConfiguration.GetMethodName">
            <summary>
            Returns a name identifying the method.
            </summary>
            <returns>The name of the method.</returns>
        </member>
        <member name="F:RAWSimO.Core.Configurations.CacheRepositioningConfiguration.ZoningConfiguration">
            <summary>
            The config to use for creating the different zones.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.CacheRepositioningConfiguration.CacheClearing">
            <summary>
            Number of storage locations within cache to keep free per station.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.CacheRepositioningConfiguration.PodEmptyThreshold">
            <summary>
            A threshold beneath which a pod is considered empty as a fraction of its capacity.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.CacheRepositioningConfiguration.UselessConsiderBacklog">
            <summary>
            Indicates whether the complete backlog is considered for uselessness assessment.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.CacheRepositioningConfiguration.GlobalTimeout">
            <summary>
            A global timeout that is used to block calls for a while, if no suitable move could be determined (in order to safe computational ressources).
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Configurations.UtilityRepositioningConfiguration">
            <summary>
            The configuration for the corresponding method.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.UtilityRepositioningConfiguration.GetMethodType">
            <summary>
            Returns the type of the corresponding method this configuration belongs to.
            </summary>
            <returns>The type of the method.</returns>
        </member>
        <member name="M:RAWSimO.Core.Configurations.UtilityRepositioningConfiguration.GetMethodName">
            <summary>
            Returns a name identifying the method.
            </summary>
            <returns>The name of the method.</returns>
        </member>
        <member name="F:RAWSimO.Core.Configurations.UtilityRepositioningConfiguration.UtilityConfig">
            <summary>
            The config for the pod utility manager component.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.UtilityRepositioningConfiguration.GlobalTimeout">
            <summary>
            A global timeout that is used to block calls for a while, if no suitable move could be determined (in order to safe computational ressources).
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Configurations.ConceptRepositioningConfiguration">
            <summary>
            The configuration for the corresponding method.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.ConceptRepositioningConfiguration.GetMethodType">
            <summary>
            Returns the type of the corresponding method this configuration belongs to.
            </summary>
            <returns>The type of the method.</returns>
        </member>
        <member name="M:RAWSimO.Core.Configurations.ConceptRepositioningConfiguration.GetMethodName">
            <summary>
            Returns a name identifying the method.
            </summary>
            <returns>The name of the method.</returns>
        </member>
        <member name="F:RAWSimO.Core.Configurations.ConceptRepositioningConfiguration.SampleParameterDouble">
            <summary>
            Just a sample variable. Remove me.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.ConceptRepositioningConfiguration.SampleParameterBool">
            <summary>
            Just a sample variable. Remove me.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Configurations.ActivateAllStationActivationConfiguration">
            <summary>
            The configuration for the corresponding method.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.ActivateAllStationActivationConfiguration.GetMethodType">
            <summary>
            Returns the type of the corresponding method this configuration belongs to.
            </summary>
            <returns>The type of the method.</returns>
        </member>
        <member name="M:RAWSimO.Core.Configurations.ActivateAllStationActivationConfiguration.GetMethodName">
            <summary>
            Returns a name identifying the method.
            </summary>
            <returns>The name of the method.</returns>
        </member>
        <member name="T:RAWSimO.Core.Configurations.BacklogThresholdStationActivationConfiguration">
            <summary>
            The configuration for the corresponding method.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.BacklogThresholdStationActivationConfiguration.GetMethodType">
            <summary>
            Returns the type of the corresponding method this configuration belongs to.
            </summary>
            <returns>The type of the method.</returns>
        </member>
        <member name="M:RAWSimO.Core.Configurations.BacklogThresholdStationActivationConfiguration.GetMethodName">
            <summary>
            Returns a name identifying the method.
            </summary>
            <returns>The name of the method.</returns>
        </member>
        <member name="F:RAWSimO.Core.Configurations.BacklogThresholdStationActivationConfiguration.Timeout">
            <summary>
            The timeout between two decisions of activating / deactivating a station.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.BacklogThresholdStationActivationConfiguration.OStationActivateThreshold">
            <summary>
            The number of orders in backlog above which another output-station gets activated.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.BacklogThresholdStationActivationConfiguration.OStationDeactivateThreshold">
            <summary>
            The overall utilization (relative used capacity) of output-stations below which a station gets deactivated.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.BacklogThresholdStationActivationConfiguration.IStationActivateThreshold">
            <summary>
            The number of bundles in backlog above which another input-station gets activated.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.BacklogThresholdStationActivationConfiguration.IStationDeactivateThreshold">
            <summary>
            The overall utilization (relative used capacity) of input-stations below which a station gets deactivated.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Configurations.ConstantRatioStationActivationConfiguration">
            <summary>
            The configuration for the corresponding method.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.ConstantRatioStationActivationConfiguration.GetMethodType">
            <summary>
            Returns the type of the corresponding method this configuration belongs to.
            </summary>
            <returns>The type of the method.</returns>
        </member>
        <member name="M:RAWSimO.Core.Configurations.ConstantRatioStationActivationConfiguration.GetMethodName">
            <summary>
            Returns a name identifying the method.
            </summary>
            <returns>The name of the method.</returns>
        </member>
        <member name="F:RAWSimO.Core.Configurations.ConstantRatioStationActivationConfiguration.ActiveRatio">
            <summary>
            The ratio of stations overall being activated, i.e. 0.75 activates 75 % of all stations. The remaining ones will be split by the replenish / pick ratio.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.ConstantRatioStationActivationConfiguration.PickReplenishRatio">
            <summary>
            The ratio of pick vs. replenishment stations being activated, i.e. 0.75 will activate three times more pick than replenishment stations. Pick station count will be 'floored', if it does not divide nicely.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Configurations.WorkShiftStationActivationConfiguration">
            <summary>
            The configuration for the corresponding method.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.WorkShiftStationActivationConfiguration.#ctor">
            <summary>
            Parameter-less constructor mainly used by the xml-serializer.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.WorkShiftStationActivationConfiguration.#ctor(RAWSimO.Core.Configurations.DefaultConstructorIdentificationClass)">
            <summary>
            Constructor that generates default values for all fields.
            </summary>
            <param name="param">Not used.</param>
        </member>
        <member name="M:RAWSimO.Core.Configurations.WorkShiftStationActivationConfiguration.GetMethodType">
            <summary>
            Returns the type of the corresponding method this configuration belongs to.
            </summary>
            <returns>The type of the method.</returns>
        </member>
        <member name="M:RAWSimO.Core.Configurations.WorkShiftStationActivationConfiguration.GetMethodName">
            <summary>
            Returns a name identifying the method.
            </summary>
            <returns>The name of the method.</returns>
        </member>
        <member name="F:RAWSimO.Core.Configurations.WorkShiftStationActivationConfiguration.Shifts">
            <summary>
            Defines all shifts of the period. The boolean field indicates whether the shift activates or deactivates the stations.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.WorkShiftStationActivationConfiguration.LoopTime">
            <summary>
            The time after which the shifts are read again from the beginning, i.e. the length of a "period". 
            Usually this is one day, but can also be used to plan an entire week by defining appropriate shifts and using a loop time of one week in seconds.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Configurations.BruteForceTaskAllocationConfiguration">
            <summary>
            The configuration for the corresponding method.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.BruteForceTaskAllocationConfiguration.GetMethodType">
            <summary>
            Returns the type of the corresponding method this configuration belongs to.
            </summary>
            <returns>The type of the method.</returns>
        </member>
        <member name="M:RAWSimO.Core.Configurations.BruteForceTaskAllocationConfiguration.GetMethodName">
            <summary>
            Returns a name identifying the method.
            </summary>
            <returns>The name of the method.</returns>
        </member>
        <member name="T:RAWSimO.Core.Configurations.RandomTaskAllocationConfiguration">
            <summary>
            The configuration for the corresponding method.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.RandomTaskAllocationConfiguration.GetMethodType">
            <summary>
            Returns the type of the corresponding method this configuration belongs to.
            </summary>
            <returns>The type of the method.</returns>
        </member>
        <member name="M:RAWSimO.Core.Configurations.RandomTaskAllocationConfiguration.GetMethodName">
            <summary>
            Returns a name identifying the method.
            </summary>
            <returns>The name of the method.</returns>
        </member>
        <member name="F:RAWSimO.Core.Configurations.RandomTaskAllocationConfiguration.SwitchModeIfNoWork">
            <summary>
            Indicates whether to switch to the other mode automatically if there is no further work to do in the current mode.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.RandomTaskAllocationConfiguration.DoRepositioningIfNoWork">
            <summary>
            Indicates whether to do repositioning moves (if available), if no other tasks are available.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.RandomTaskAllocationConfiguration.PreferSameTier">
            <summary>
            Indicates whether the bot will search for work to do on the same tier it is located on first.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.RandomTaskAllocationConfiguration.StickToModeProbability">
            <summary>
            The probability by which the bot sticks to its current mode (input or output).
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.RandomTaskAllocationConfiguration.StickToPodProbability">
            <summary>
            The probability by which the bot sticks to the pod it is currently carrying. The bot will still change the pod if there is no task available in its current mode.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.RandomTaskAllocationConfiguration.RepositioningProbability">
            <summary>
            The probability by which the bot attempts a repositioning move instead of starting a new insert or extract task. This is only taken into account, if the robot is not currently carrying a pod.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Configurations.BalancedTaskAllocationConfiguration">
            <summary>
            The configuration for the corresponding method.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.BalancedTaskAllocationConfiguration.GetMethodType">
            <summary>
            Returns the type of the corresponding method this configuration belongs to.
            </summary>
            <returns>The type of the method.</returns>
        </member>
        <member name="M:RAWSimO.Core.Configurations.BalancedTaskAllocationConfiguration.GetMethodName">
            <summary>
            Returns a name identifying the method.
            </summary>
            <returns>The name of the method.</returns>
        </member>
        <member name="M:RAWSimO.Core.Configurations.BalancedTaskAllocationConfiguration.AttributesAreValid(System.String@)">
            <summary>
            Checks whether the task allacation configuration is valid.
            </summary>
            <param name="errorMessage">A message describing the error if the configuration is not valid.</param>
            <returns>Indicates whether the task allocation configuration is valid.</returns>
        </member>
        <member name="F:RAWSimO.Core.Configurations.BalancedTaskAllocationConfiguration.BotReallocationTimeout">
            <summary>
            Timeout between two reallocation runs. Set this to 0 to disable reallocation at all.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.BalancedTaskAllocationConfiguration.WeightInputStations">
            <summary>
            Weight to use for assigning bots to input-stations.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.BalancedTaskAllocationConfiguration.WeightOutputStations">
            <summary>
            Weight to use for assigning bots to output-stations.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.BalancedTaskAllocationConfiguration.WeightRepositioning">
            <summary>
            Weight to use for assigning bots to do repositioning tasks.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.BalancedTaskAllocationConfiguration.BotsPerStationLimit">
            <summary>
            Limits the number of bots assigned to a single station.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.BalancedTaskAllocationConfiguration.PreferSameTier">
            <summary>
            Indicates whether the bot will search for work to do on the same tier it is located on first.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.BalancedTaskAllocationConfiguration.ExtendSearch">
            <summary>
            Indicates whether the bot will search for work to do with its current pod for another station, if there is no more work for its current station-pod combination.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.BalancedTaskAllocationConfiguration.ExtendedSearchRadius">
            <summary>
            The radius in which a station has to be in order to be considered for the search expansion. The distance is measured from the station the bot is assigned to.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.BalancedTaskAllocationConfiguration.SearchAll">
            <summary>
            Indicates whether all stations will be searched for any work to do (in distance order from current station) over setting the bot to rest instead.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.BalancedTaskAllocationConfiguration.RepositionBeforeRest">
            <summary>
            Aims to do repositioning moves, if available, before setting a bot to rest.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.BalancedTaskAllocationConfiguration.PodSelectionConfig">
            <summary>
            The pod selection configuration to use.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.BalancedTaskAllocationConfiguration.RestLocationOrderType">
            <summary>
            The order to use when looking for a suitable resting location.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Configurations.SwarmTaskAllocationConfiguration">
            <summary>
            The configuration for the corresponding method.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.SwarmTaskAllocationConfiguration.GetMethodType">
            <summary>
            Returns the type of the corresponding method this configuration belongs to.
            </summary>
            <returns>The type of the method.</returns>
        </member>
        <member name="M:RAWSimO.Core.Configurations.SwarmTaskAllocationConfiguration.GetMethodName">
            <summary>
            Returns a name identifying the method.
            </summary>
            <returns>The name of the method.</returns>
        </member>
        <member name="F:RAWSimO.Core.Configurations.SwarmTaskAllocationConfiguration.alpha">
            <summary>
            alpha for Threshold formula
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.SwarmTaskAllocationConfiguration.beta">
            <summary>
            beta for Threshold formula
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.SwarmTaskAllocationConfiguration.multiplikator">
            <summary>
            hardness of multiplikator, to increase prbability of unused stations
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.SwarmTaskAllocationConfiguration.maxMultiplikatorValue">
            <summary>
            "Comment me"
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.SwarmTaskAllocationConfiguration.restPercentage">
            <summary>
            hardness of probability of a rest task
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.SwarmTaskAllocationConfiguration.maximumBotsPerStation">
            <summary>
            Sets the Maximum of Bots per Station
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.SwarmTaskAllocationConfiguration.ExtendSearch">
            <summary>
            Indicates whether the bot will search for work to do with its current pod for another station, if there is no more work for its current station-pod combination.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.SwarmTaskAllocationConfiguration.ExtendedSearchRadius">
            <summary>
            The radius in which a station has to be in order to be considered for the search expansion. The distance is measured from the station the bot is assigned to.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.SwarmTaskAllocationConfiguration.PodSelectionConfig">
            <summary>
            The sub configuration for selecting the pods for picking and replenishment.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.SwarmTaskAllocationConfiguration.RestLocationOrderType">
            <summary>
            The order to use when looking for a suitable resting location.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.SwarmTaskAllocationConfiguration.AttributesAreValid(System.String@)">
            <summary>
            Checks whether the task allacation configuration is valid.
            </summary>
            <param name="errorMessage">A message describing the error if the configuration is not valid.</param>
            <returns>Indicates whether the task allocation configuration is valid.</returns>
        </member>
        <member name="T:RAWSimO.Core.Configurations.ConstantRatioTaskAllocationConfiguration">
            <summary>
            The configuration for the corresponding method.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.ConstantRatioTaskAllocationConfiguration.GetMethodType">
            <summary>
            Returns the type of the corresponding method this configuration belongs to.
            </summary>
            <returns>The type of the method.</returns>
        </member>
        <member name="M:RAWSimO.Core.Configurations.ConstantRatioTaskAllocationConfiguration.GetMethodName">
            <summary>
            Returns a name identifying the method.
            </summary>
            <returns>The name of the method.</returns>
        </member>
        <member name="F:RAWSimO.Core.Configurations.ConstantRatioTaskAllocationConfiguration.PickBotRatio">
            <summary>
            The ratio of bots used for picking compared to the overall count.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.ConstantRatioTaskAllocationConfiguration.RefreshAllocationTimeout">
            <summary>
            The time between two updates of the robot allocations. The allocations are only updated, if stations become active or inactive.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.ConstantRatioTaskAllocationConfiguration.OnTheFlyExtract">
            <summary>
            Indicates whether to add further requests on-the-fly, if the robot is already carrying a suitable pod the a station where there is more work to do.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.ConstantRatioTaskAllocationConfiguration.OnTheFlyStore">
            <summary>
            Indicates whether to add further requests on-the-fly, if the robot is already carrying a suitable pod the a station where there is more work to do.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.ConstantRatioTaskAllocationConfiguration.PodSelectionConfig">
            <summary>
            The sub configuration for selecting the pods for picking and replenishment.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.ConstantRatioTaskAllocationConfiguration.RestLocationOrderType">
            <summary>
            The order to use when looking for a suitable resting location.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Configurations.ConceptTaskAllocationConfiguration">
            <summary>
            The configuration for the corresponding method.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.ConceptTaskAllocationConfiguration.GetMethodType">
            <summary>
            Returns the type of the corresponding method this configuration belongs to.
            </summary>
            <returns>The type of the method.</returns>
        </member>
        <member name="M:RAWSimO.Core.Configurations.ConceptTaskAllocationConfiguration.GetMethodName">
            <summary>
            Returns a name identifying the method.
            </summary>
            <returns>The name of the method.</returns>
        </member>
        <member name="F:RAWSimO.Core.Configurations.ConceptTaskAllocationConfiguration.ExtractModeProb">
            <summary>
            The probability for choosing an extract task.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Configurations.OverrideConfiguration">
            <summary>
            Exposes values that override other given values.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.OverrideConfiguration.OverrideInputStationCountValue">
            <summary>
            The fractional number of input stations to add, i.e. a value of 0.5 means that only 50 % of the stations are added while the remaining ones specified by the instance file are ignored.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.OverrideConfiguration.OverrideInputStationCount">
            <summary>
            Indicate whether to override the number of active input stations.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.OverrideConfiguration.OverrideOutputStationCountValue">
            <summary>
            The fractional number of output stations to add, i.e. a value of 0.5 means that only 50 % of the stations are added while the remaining ones specified by the instance file are ignored.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.OverrideConfiguration.OverrideOutputStationCount">
            <summary>
            Indicate whether to override the number of active output stations.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.OverrideConfiguration.OverrideBotCountPerOStationValue">
            <summary>
            The number of bots to use per output station.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.OverrideConfiguration.OverrideBotCountPerOStation">
            <summary>
            Indicates whether to override the number of bots with a number of bots per output station.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.OverrideConfiguration.OverrideBotPodTransferTimeValue">
            <summary>
            The time for setting down or picking up a pod.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.OverrideConfiguration.OverrideBotPodTransferTime">
            <summary>
            Indicates whether to override the values given by the instance for the parameter.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.OverrideConfiguration.OverrideBotMaxAccelerationValue">
            <summary>
            The acceleration of the robots.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.OverrideConfiguration.OverrideBotMaxAcceleration">
            <summary>
            Indicates whether to override the values given by the instance for the parameter.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.OverrideConfiguration.OverrideBotMaxDecelerationValue">
            <summary>
            The deceleration of the robots.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.OverrideConfiguration.OverrideBotMaxDeceleration">
            <summary>
            Indicates whether to override the values given by the instance for the parameter.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.OverrideConfiguration.OverrideBotMaxVelocityValue">
            <summary>
            The maximal velocity of the robots.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.OverrideConfiguration.OverrideBotMaxVelocity">
            <summary>
            Indicates whether to override the values given by the instance for the parameter.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.OverrideConfiguration.OverrideBotTurnSpeedValue">
            <summary>
            The turning speed of the robots.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.OverrideConfiguration.OverrideBotTurnSpeed">
            <summary>
            Indicates whether to override the values given by the instance for the parameter.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.OverrideConfiguration.OverridePodCapacityValue">
            <summary>
            The capacity of the pods.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.OverrideConfiguration.OverridePodCapacity">
            <summary>
            Indicates whether to override the values given by the instance for the parameter.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.OverrideConfiguration.OverrideInputStationCapacityValue">
            <summary>
            The capacity of the input stations.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.OverrideConfiguration.OverrideInputStationCapacity">
            <summary>
            Indicates whether to override the values given by the instance for the parameter.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.OverrideConfiguration.OverrideOutputStationCapacityValue">
            <summary>
            The capacity of the output stations.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.OverrideConfiguration.OverrideOutputStationCapacity">
            <summary>
            Indicates whether to override the values given by the instance for the parameter.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.OverrideConfiguration.OverrideInputStationItemBundleTransferTimeValue">
            <summary>
            The time it takes to put a bundle on a pod.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.OverrideConfiguration.OverrideInputStationItemBundleTransferTime">
            <summary>
            Indicates whether to override the values given by the instance for the parameter.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.OverrideConfiguration.OverrideOutputStationItemTransferTimeValue">
            <summary>
            The time it takes to handle an item at a pick station.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.OverrideConfiguration.OverrideOutputStationItemTransferTime">
            <summary>
            Indicates whether to override the values given by the instance for the parameter.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.OverrideConfiguration.OverrideOutputStationItemPickTimeValue">
            <summary>
            The time it takes for picking an item.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.OverrideConfiguration.OverrideOutputStationItemPickTime">
            <summary>
            Indicates whether to override the values given by the instance for the parameter.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Configurations.SettingConfiguration">
            <summary>
            The base configuration.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.SettingConfiguration.Name">
            <summary>
            A name identifying the configuration.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Configurations.SettingConfiguration.GetMetaInfoBasedConfigName">
            <summary>
            Creates a name for the setting supplying basic information.
            </summary>
            <returns>The name of the scenario.</returns>
        </member>
        <member name="F:RAWSimO.Core.Configurations.SettingConfiguration.SimulationWarmupTime">
            <summary>
            The warmup-time for the simulation in seconds.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.SettingConfiguration.SimulationDuration">
            <summary>
            The duration of the simulation in seconds.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.SettingConfiguration.Seed">
            <summary>
            The random seed to use.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.SettingConfiguration.LogLevel">
            <summary>
            The log level used to filter output messages.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.SettingConfiguration.LogFileLevel">
            <summary>
            The log level that indicates which output files will be written.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.SettingConfiguration.MonitorWellSortedness">
            <summary>
            Indicates whether well-sortedness will be tracked (computationally intense).
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.SettingConfiguration.DebugMode">
            <summary>
            Indicates the current debug mode.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.SettingConfiguration.Tolerance">
            <summary>
            Distance between a pod and a station which is considered close enough.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.SettingConfiguration.UseAcceleration">
            <summary>
            Indicates whether to simulate the acceleration or use top-speed instantly.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.SettingConfiguration.UseTurnDelay">
            <summary>
            Indicates whether to simulate the rotation or use oritaion instantly.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.SettingConfiguration.RotatePods">
            <summary>
            Indicates whether to rotate pods while the bot is rotating. This actually only results in different visual feedback.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.SettingConfiguration.QueueHandlingEnabled">
            <summary>
            Indicates whether to use or ignore queues in the waypoint-system.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.SettingConfiguration.StationShutdownThresholdTime">
            <summary>
            The idle-time after which a station is considered resting / shutdown.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.SettingConfiguration.CorrelativeFrequencyTracking">
            <summary>
            Enables / disables the tracking of correlative frequencies between item descriptions.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.SettingConfiguration.IntenseLocationPolling">
            <summary>
            Indicates whether locations of the robots are polled alot more frequently in order to get more precise statistical feedback (note: this may cause huge output files).
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.SettingConfiguration.InventoryConfiguration">
            <summary>
            All configuration settings for the generation or input of inventory.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.SettingConfiguration.OverrideConfig">
            <summary>
            Exposes values that override and replace others given by the instance file.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.SettingConfiguration.CommentTag1">
            <summary>
            Some optional comment tag that will be written to the footprint.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.SettingConfiguration.CommentTag2">
            <summary>
            Some optional comment tag that will be written to the footprint.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.SettingConfiguration.CommentTag3">
            <summary>
            Some optional comment tag that will be written to the footprint.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.SettingConfiguration.HeatMode">
            <summary>
            The heat mode to use when visualizing the simulation.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.SettingConfiguration.LogAction">
            <summary>
            The action that is called when something is written to the output.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.SettingConfiguration.StartTime">
            <summary>
            The timestamp of the start of the execution.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.SettingConfiguration.StopTime">
            <summary>
            The timestamp of the finish of the execution.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.SettingConfiguration.StatisticsDirectory">
            <summary>
            The directory to write all statistics file to.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.SettingConfiguration.VisualizationAttached">
            <summary>
            Indicates whether a visualization is attached.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.SettingConfiguration.VisualizationOnly">
            <summary>
            Indicates that the instance will only be drawn and can not be executed.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.SettingConfiguration.RealWorldIntegrationCommandOutput">
            <summary>
            Real world commands will be printed
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Configurations.SettingConfiguration.RealWorldIntegrationEventDriven">
            <summary>
            Real world events determine the end of a state
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Control.Allocator">
            <summary>
            This class helps allocating the orders and bundles after decisions about their assignment were conducted.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Allocator.#ctor(RAWSimO.Core.Instance)">
            <summary>
            Creates a new instance of this object.
            </summary>
            <param name="instance">The instance this allocated belongs to.</param>
        </member>
        <member name="P:RAWSimO.Core.Control.Allocator.Instance">
            <summary>
            The instance this manager is assigned to.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Allocator._iStationAssignments">
            <summary>
            All decided but not yet allocated bundle to input station assignments.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Allocator._podAssignments">
            <summary>
            All decided but not yet allocated bundle to pod assignments.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Allocator.Allocate(RAWSimO.Core.Items.ItemBundle,RAWSimO.Core.Elements.Pod,RAWSimO.Core.Elements.InputStation)">
            <summary>
            Allocates the input request.
            </summary>
            <param name="bundle">The bundle to allocate.</param>
            <param name="pod">The pod the bundle shall be stored in.</param>
            <param name="station">The station that shall handle the bundle.</param>
        </member>
        <member name="M:RAWSimO.Core.Control.Allocator.Allocate(RAWSimO.Core.Items.Order,RAWSimO.Core.Elements.OutputStation)">
            <summary>
            Allocates the order.
            </summary>
            <param name="order">The order to allocate.</param>
            <param name="station">The station to allocate the order to.</param>
        </member>
        <member name="M:RAWSimO.Core.Control.Allocator.Submit(RAWSimO.Core.Items.ItemBundle,RAWSimO.Core.Elements.InputStation)">
            <summary>
            Submits a new replenishment assignment decision to the allocator.
            </summary>
            <param name="bundle">The bundle that is being assigned to an input station.</param>
            <param name="station">The input station that shall be used to store the bundle.</param>
        </member>
        <member name="M:RAWSimO.Core.Control.Allocator.Submit(RAWSimO.Core.Items.ItemBundle,RAWSimO.Core.Elements.Pod)">
            <summary>
            Submits a new bundle storage assignment decision to the allocator.
            </summary>
            <param name="bundle">The bundle that is being assigned to a storage pod.</param>
            <param name="pod">The pod in which the bundle shall be stored.</param>
        </member>
        <member name="M:RAWSimO.Core.Control.Allocator.Queue(RAWSimO.Core.Items.Order,RAWSimO.Core.Elements.OutputStation)">
            <summary>
            Adds an order to the queue of a station. This is only done for information tracking purposes. The actual decision submission has to be done separately by the respective controller.
            </summary>
            <param name="order">The order to queue.</param>
            <param name="station">The station to queue the order to.</param>
        </member>
        <member name="M:RAWSimO.Core.Control.Allocator.IsBundleStorageDecided(RAWSimO.Core.Items.ItemBundle)">
            <summary>
            Checks whether an assignment of the bundle to a pod was already done.
            </summary>
            <param name="bundle">The bundle to check.</param>
            <returns><code>true</code> if the assignment is present, <code>false</code> otherwise.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.Allocator.GetNextEventTime(System.Double)">
            <summary>
            The next event when this element has to be updated.
            </summary>
            <param name="currentTime">The current time of the simulation.</param>
            <returns>The next time this element has to be updated.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.Allocator.Update(System.Double,System.Double)">
            <summary>
            Updates the element to the specified time.
            </summary>
            <param name="lastTime">The time before the update.</param>
            <param name="currentTime">The time to update to.</param>
        </member>
        <member name="T:RAWSimO.Core.Control.BotManager">
            <summary>
            The base implementation for managing the tasks of the bots.
            </summary>
            <summary>
            The base implementation for managing the tasks of the bots.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.BotManager.waypointGraph">
            <summary>
            The waypoint graph.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Control.BotManager.Instance">
            <summary>
            The instance this manager belongs to.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.BotManager._taskQueues">
            <summary>
            All task queues of the robots.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.BotManager._lastTaskEnqueued">
            <summary>
            The last task that was assigned to the bot.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.BotManager.#ctor(RAWSimO.Core.Instance)">
            <summary>
            Creates a new task allocation manager instance.
            </summary>
            <param name="instance">The instance the manager belongs to.</param>
        </member>
        <member name="M:RAWSimO.Core.Control.BotManager.EnqueueExtract(RAWSimO.Core.Elements.Bot,RAWSimO.Core.Elements.OutputStation,RAWSimO.Core.Elements.Pod,System.Collections.Generic.List{RAWSimO.Core.Management.ExtractRequest})">
            <summary>
            Enqueues an extraction task.
            </summary>
            <param name="bot">The bot that shall execute the task.</param>
            <param name="station">The station at which the task will be executed.</param>
            <param name="pod">The pod used for the task.</param>
            <param name="requests">The requests to handle when executing the task.</param>
        </member>
        <member name="M:RAWSimO.Core.Control.BotManager.EnqueueInsert(RAWSimO.Core.Elements.Bot,RAWSimO.Core.Elements.InputStation,RAWSimO.Core.Elements.Pod,System.Collections.Generic.List{RAWSimO.Core.Management.InsertRequest})">
            <summary>
            Enqueues an insertion task.
            </summary>
            <param name="bot">The bot that shall execute the task.</param>
            <param name="station">The station at which the task will be executed.</param>
            <param name="pod">The pod to use for this task.</param>
            <param name="requests">The requests that will be handled by the task.</param>
        </member>
        <member name="M:RAWSimO.Core.Control.BotManager.EnqueueParkPod(RAWSimO.Core.Elements.Bot,RAWSimO.Core.Elements.Pod,RAWSimO.Core.Waypoints.Waypoint)">
            <summary>
            Enqueues a pod parking operation.
            </summary>
            <param name="bot">The bot that shall execute the task.</param>
            <param name="pod">The pod to park.</param>
            <param name="storageLocation">The storage location to park the pod at.</param>
        </member>
        <member name="M:RAWSimO.Core.Control.BotManager.EnqueueRepositionPod(RAWSimO.Core.Elements.Bot,RAWSimO.Core.Elements.Pod,RAWSimO.Core.Waypoints.Waypoint)">
            <summary>
            Enqueus a pod repositioning operation.
            </summary>
            <param name="bot">The bot that shall execute the task.</param>
            <param name="pod">The pod to reposition.</param>
            <param name="storageLocation">The storage location the pod shall be brought to.</param>
        </member>
        <member name="M:RAWSimO.Core.Control.BotManager.EnqueueRest(RAWSimO.Core.Elements.Bot,RAWSimO.Core.Waypoints.Waypoint)">
            <summary>
            Enqueues a rest task.
            </summary>
            <param name="bot">The bot that shall idle.</param>
            <param name="restLocation">The location to use for idling.</param>
        </member>
        <member name="M:RAWSimO.Core.Control.BotManager.GetLastEnqueuedTask(RAWSimO.Core.Elements.Bot)">
            <summary>
            Returns the last task that was enqueued for the given bot or <code>null</code>, if none is available.
            </summary>
            <param name="bot">The bot to check the last enqueued task for.</param>
            <returns>The last task enqueued by an inheriting controller.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.BotManager.GetNextTask(RAWSimO.Core.Elements.Bot)">
            <summary>
            Main decision routine that determines the next task the bot will do.
            </summary>
            <param name="bot">The bot to assign a task to.</param>
        </member>
        <member name="M:RAWSimO.Core.Control.BotManager.RestLocationToBotAllocationMetric(RAWSimO.Core.Configurations.PrefRestLocationForBot,RAWSimO.Core.Elements.Bot,RAWSimO.Core.Waypoints.Waypoint)">
            <summary>
            Determines a value that can be used to order possible rest locations for a pod.
            </summary>
            <param name="orderType">The order metric to use.</param>
            <param name="bot">The bot looking for a job.</param>
            <param name="restLocation">The rest location to look at.</param>
            <returns>A value reflecting the given metric. The lowest value indicates the best option for the given metric.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.BotManager.ChooseRestLocation(RAWSimO.Core.Elements.Bot,RAWSimO.Core.Configurations.PrefRestLocationForBot)">
            <summary>
            Chooses a rest location from all available ones for the given bot.
            </summary>
            <param name="bot">The bot to choose a rest location for.</param>
            <param name="restLocationOrderType">The rest location preference.</param>
        </member>
        <member name="M:RAWSimO.Core.Control.BotManager.DoRestTask(RAWSimO.Core.Elements.Bot,RAWSimO.Core.Configurations.PrefRestLocationForBot)">
            <summary>
            Allocates a rest task.
            </summary>
            <param name="bot">The bot that shall rest.</param>
            <param name="restLocationOrder">The order in which the next free resting location is chosen (if the bot already rested before, the same location is used).</param>
        </member>
        <member name="M:RAWSimO.Core.Control.BotManager.DoRepositioningTask(RAWSimO.Core.Elements.Bot)">
            <summary>
            Allocates a repositioning task, if available.
            </summary>
            <param name="bot">The bot that shall perform a repositioning task.</param>
            <returns><code>true</code> if the bot was assigned a repositioning task, <code>false</code> otherwise (no task was assigned).</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.BotManager.DoRepositioningTaskOrRest(RAWSimO.Core.Elements.Bot,RAWSimO.Core.Configurations.PrefRestLocationForBot)">
            <summary>
            Attempts to do a repositioning task. If no such task is available a resting task is done instead.
            </summary>
            <param name="bot">The bot.</param>
            <param name="restLocationOrder">The order in which the next free resting location is chosen.</param>
            <returns><code>true</code> if a repositioning move was found, <code>false</code> otherwise.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.BotManager.DoParkPodTask(RAWSimO.Core.Elements.Bot)">
            <summary>
            Attempts to park the currently carried pod.
            </summary>
            <param name="bot">The bot carrying a pod.</param>
            <returns><code>true</code> if a park pod task was enqueued, <code>false</code> otherwise.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.BotManager.RequestNewTask(RAWSimO.Core.Elements.Bot)">
            <summary>
            Requests a new task for the given robot.
            </summary>
            <param name="bot">The bot.</param>
        </member>
        <member name="M:RAWSimO.Core.Control.BotManager.PodPickedUp(RAWSimO.Core.Elements.Bot,RAWSimO.Core.Elements.Pod,RAWSimO.Core.Waypoints.Waypoint)">
            <summary>
            This has to be called when the robot picked up the given pod.
            </summary>
            <param name="r">The bot that picked up the pod.</param>
            <param name="b">The pod that was picked up.</param>
            <param name="w">The waypoint at which the robot executed the operation.</param>
        </member>
        <member name="M:RAWSimO.Core.Control.BotManager.PodSetDown(RAWSimO.Core.Elements.Bot,RAWSimO.Core.Elements.Pod,RAWSimO.Core.Waypoints.Waypoint)">
            <summary>
            This has to be called when the robot set down the given pod.
            </summary>
            <param name="r">The bot that set down the pod.</param>
            <param name="b">The pod that was set down.</param>
            <param name="w">The waypoint at which the robot executed the operation.</param>
        </member>
        <member name="M:RAWSimO.Core.Control.BotManager.TaskComplete(RAWSimO.Core.Elements.Bot,RAWSimO.Core.Control.BotTask)">
            <summary>
            This has to be called when the robot finished its task.
            </summary>
            <param name="r">The robot that finished its task.</param>
            <param name="t">The task that the robot finished.</param>
        </member>
        <member name="M:RAWSimO.Core.Control.BotManager.TaskAborted(RAWSimO.Core.Elements.Bot,RAWSimO.Core.Control.BotTask)">
            <summary>
            This has to be called when the robot aborts its task.
            </summary>
            <param name="r">The robot that aborted its task.</param>
            <param name="t">The task that the robot aborted.</param>
        </member>
        <member name="M:RAWSimO.Core.Control.BotManager.GetNextEventTime(System.Double)">
            <summary>
            The next event when this element has to be updated.
            </summary>
            <param name="currentTime">The current time of the simulation.</param>
            <returns>The next time this element has to be updated.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.BotManager.Update(System.Double,System.Double)">
            <summary>
            Updates the element to the specified time.
            </summary>
            <param name="lastTime">The time before the update.</param>
            <param name="currentTime">The time to update to.</param>
        </member>
        <member name="M:RAWSimO.Core.Control.BotManager.SignalCurrentTime(System.Double)">
            <summary>
            Signals the current time to the mechanism. The mechanism can decide to block the simulation thread in order consume remaining real-time.
            </summary>
            <param name="currentTime">The current simulation time.</param>
        </member>
        <member name="M:RAWSimO.Core.Control.BotManager.StatFinish">
            <summary>
            The callback that indicates that the simulation is finished and statistics have to submitted to the instance.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.BotManager.StatReset">
            <summary>
            The callback indicates a reset of the statistics.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.BotManager.WrongTierPenaltyForOrderWorkAmount">
            <summary>
            Penalty to use when work amount is considered, but tiers differ.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.BotManager.WrongTierPenaltyForBundleWorkAmount">
            <summary>
            Penalty to use when work amount is considered, but tiers differ.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Control.BotManager.DistanceMetricType">
            <summary>
            Distinguishes between different distance metrics.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.BotManager.DistanceMetricType.Euclidean">
            <summary>
            The distance using the euclidean norm.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.BotManager.DistanceMetricType.Manhattan">
            <summary>
            The distance by using the manhattan metric.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.BotManager.DistanceMetricType.ShortestPath">
            <summary>
            An A* calculated shortest path.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.BotManager.DistanceMetricType.ShortestTime">
            <summary>
            An A* calculated time-efficient path.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.BotManager._availableCounts">
            <summary>
            Stores the available counts per SKU for a pod for on-the-fly assessment.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.BotManager.InitPodSelection">
            <summary>
            Initializes some fields for pod selection.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.BotManager.AnyRelevantRequests(RAWSimO.Core.Elements.Pod,RAWSimO.Core.Elements.InputStation)">
            <summary>
            Checks whether any request matches the combination of pod and station, i.e. whether any work can be done with the pod at the station.
            </summary>
            <param name="pod">The pod to check.</param>
            <param name="station">The station to check.</param>
            <returns>Returns <code>true</code> when there is work that can be done with this combination, <code>false</code> otherwise.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.BotManager.GetPossibleRequests(RAWSimO.Core.Elements.Pod,RAWSimO.Core.Elements.InputStation)">
            <summary>
            Returns a list of relevant store-requests for the given pod / input-station combination.
            </summary>
            <param name="pod">The pod in focus.</param>
            <param name="station">The station in focus.</param>
            <returns>A list of store-requests for bundles that can be put on the pod.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.BotManager.AnyRelevantRequests(RAWSimO.Core.Elements.Pod,RAWSimO.Core.Elements.OutputStation,RAWSimO.Core.Configurations.PodSelectionExtractRequestFilteringMode)">
            <summary>
            Checks whether any request matches the combination of pod and station, i.e. whether any work can be done with the pod at the station.
            </summary>
            <param name="pod">The pod to check.</param>
            <param name="station">The station to check.</param>
            <param name="filterForConsideration">Indicates the mode for filtering suitable pods for picking.</param>
            <returns>Returns <code>true</code> when there is work that can be done with this combination, <code>false</code> otherwise.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.BotManager.GetPossibleRequests(RAWSimO.Core.Elements.Pod,RAWSimO.Core.Elements.OutputStation,RAWSimO.Core.Configurations.PodSelectionExtractRequestFilteringMode)">
            <summary>
            Returns a list of relevant items for the given pod / output-station combination.
            </summary>
            <param name="pod">The pod in focus.</param>
            <param name="station">The station in focus.</param>
            <param name="filterForReservation">Indicates the mode for filtering the requests when deciding the actual reservations for a pod.</param>
            <returns>A list of tuples of items to serve the respective extract-requests.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.BotManager.GenerateScorerIStationForBotWithPod(RAWSimO.Core.Configurations.PCScorerIStationForBotWithPod)">
            <summary>
            Instantiates a scoring function from the given config.
            </summary>
            <param name="scorerConfig">The config.</param>
            <returns>The scoring function.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.BotManager.GenerateScorerOStationForBotWithPod(RAWSimO.Core.Configurations.PCScorerOStationForBotWithPod)">
            <summary>
            Instantiates a scoring function from the given config.
            </summary>
            <param name="scorerConfig">The config.</param>
            <returns>The scoring function.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.BotManager.GenerateScorerPodForIStationBot(RAWSimO.Core.Configurations.PCScorerPodForIStationBot)">
            <summary>
            Instantiates a scoring function from the given config.
            </summary>
            <param name="scorerConfig">The config.</param>
            <returns>The scoring function.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.BotManager.GenerateScorerPodForOStationBot(RAWSimO.Core.Configurations.PCScorerPodForOStationBot)">
            <summary>
            Instantiates a scoring function from the given config.
            </summary>
            <param name="scorerConfig">The config.</param>
            <returns>The scoring function.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.BotManager.Score(RAWSimO.Core.Configurations.PCScorerIStationForBotWithPodRandom,RAWSimO.Core.Elements.Bot,RAWSimO.Core.Elements.InputStation)">
            <summary>
            Determines a score that can be used to decide about an assignment.
            </summary>
            <param name="config">The config specifying further parameters.</param>
            <param name="bot">The bot.</param>
            <param name="station">The station.</param>
            <returns>A score that can be used to decide about the best assignment. Minimization / Smaller is better.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.BotManager.Score(RAWSimO.Core.Configurations.PCScorerIStationForBotWithPodNearest,RAWSimO.Core.Elements.Bot,RAWSimO.Core.Elements.InputStation)">
            <summary>
            Determines a score that can be used to decide about an assignment.
            </summary>
            <param name="config">The config specifying further parameters.</param>
            <param name="bot">The bot.</param>
            <param name="station">The station.</param>
            <returns>A score that can be used to decide about the best assignment. Minimization / Smaller is better.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.BotManager.Score(RAWSimO.Core.Configurations.PCScorerIStationForBotWithPodWorkAmount,RAWSimO.Core.Elements.Bot,RAWSimO.Core.Elements.InputStation)">
            <summary>
            Determines a score that can be used to decide about an assignment.
            </summary>
            <param name="config">The config specifying further parameters.</param>
            <param name="bot">The bot.</param>
            <param name="station">The station.</param>
            <returns>A score that can be used to decide about the best assignment. Minimization / Smaller is better.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.BotManager.Score(RAWSimO.Core.Configurations.PCScorerOStationForBotWithPodRandom,RAWSimO.Core.Elements.Bot,RAWSimO.Core.Elements.OutputStation)">
            <summary>
            Determines a score that can be used to decide about an assignment.
            </summary>
            <param name="config">The config specifying further parameters.</param>
            <param name="bot">The bot.</param>
            <param name="station">The station.</param>
            <returns>A score that can be used to decide about the best assignment. Minimization / Smaller is better.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.BotManager.Score(RAWSimO.Core.Configurations.PCScorerOStationForBotWithPodNearest,RAWSimO.Core.Elements.Bot,RAWSimO.Core.Elements.OutputStation)">
            <summary>
            Determines a score that can be used to decide about an assignment.
            </summary>
            <param name="config">The config specifying further parameters.</param>
            <param name="bot">The bot.</param>
            <param name="station">The station.</param>
            <returns>A score that can be used to decide about the best assignment. Minimization / Smaller is better.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.BotManager.Score(RAWSimO.Core.Configurations.PCScorerOStationForBotWithPodWorkAmount,RAWSimO.Core.Elements.Bot,RAWSimO.Core.Elements.OutputStation)">
            <summary>
            Determines a score that can be used to decide about an assignment.
            </summary>
            <param name="config">The config specifying further parameters.</param>
            <param name="bot">The bot.</param>
            <param name="station">The station.</param>
            <returns>A score that can be used to decide about the best assignment. Minimization / Smaller is better.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.BotManager.Score(RAWSimO.Core.Configurations.PCScorerPodForIStationBotRandom,RAWSimO.Core.Elements.Bot,RAWSimO.Core.Elements.Pod,RAWSimO.Core.Elements.InputStation)">
            <summary>
            Determines a score that can be used to decide about an assignment.
            </summary>
            <param name="config">The config specifying further parameters.</param>
            <param name="bot">The bot.</param>
            <param name="pod">The pod.</param>
            <param name="station">The station.</param>
            <returns>A score that can be used to decide about the best assignment. Minimization / Smaller is better.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.BotManager.Score(RAWSimO.Core.Configurations.PCScorerPodForIStationBotNearest,RAWSimO.Core.Elements.Bot,RAWSimO.Core.Elements.Pod,RAWSimO.Core.Elements.InputStation)">
            <summary>
            Determines a score that can be used to decide about an assignment.
            </summary>
            <param name="config">The config specifying further parameters.</param>
            <param name="bot">The bot.</param>
            <param name="pod">The pod.</param>
            <param name="station">The station.</param>
            <returns>A score that can be used to decide about the best assignment. Minimization / Smaller is better.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.BotManager.Score(RAWSimO.Core.Configurations.PCScorerPodForIStationBotDemand,RAWSimO.Core.Elements.Bot,RAWSimO.Core.Elements.Pod,RAWSimO.Core.Elements.InputStation)">
            <summary>
            Determines a score that can be used to decide about an assignment.
            </summary>
            <param name="config">The config specifying further parameters.</param>
            <param name="bot">The bot.</param>
            <param name="pod">The pod.</param>
            <param name="station">The station.</param>
            <returns>A score that can be used to decide about the best assignment. Minimization / Smaller is better.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.BotManager.Score(RAWSimO.Core.Configurations.PCScorerPodForIStationBotWorkAmount,RAWSimO.Core.Elements.Bot,RAWSimO.Core.Elements.Pod,RAWSimO.Core.Elements.InputStation)">
            <summary>
            Determines a score that can be used to decide about an assignment.
            </summary>
            <param name="config">The config specifying further parameters.</param>
            <param name="bot">The bot.</param>
            <param name="pod">The pod.</param>
            <param name="station">The station.</param>
            <returns>A score that can be used to decide about the best assignment. Minimization / Smaller is better.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.BotManager.Score(RAWSimO.Core.Configurations.PCScorerPodForOStationBotRandom,RAWSimO.Core.Elements.Bot,RAWSimO.Core.Elements.Pod,RAWSimO.Core.Elements.OutputStation)">
            <summary>
            Determines a score that can be used to decide about an assignment.
            </summary>
            <param name="config">The config specifying further parameters.</param>
            <param name="bot">The bot.</param>
            <param name="pod">The pod.</param>
            <param name="station">The station.</param>
            <returns>A score that can be used to decide about the best assignment. Minimization / Smaller is better.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.BotManager.Score(RAWSimO.Core.Configurations.PCScorerPodForOStationBotFill,RAWSimO.Core.Elements.Bot,RAWSimO.Core.Elements.Pod,RAWSimO.Core.Elements.OutputStation)">
            <summary>
            Determines a score that can be used to decide about an assignment.
            </summary>
            <param name="config">The config specifying further parameters.</param>
            <param name="bot">The bot.</param>
            <param name="pod">The pod.</param>
            <param name="station">The station.</param>
            <returns>A score that can be used to decide about the best assignment. Minimization / Smaller is better.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.BotManager.Score(RAWSimO.Core.Configurations.PCScorerPodForOStationBotNearest,RAWSimO.Core.Elements.Bot,RAWSimO.Core.Elements.Pod,RAWSimO.Core.Elements.OutputStation)">
            <summary>
            Determines a score that can be used to decide about an assignment.
            </summary>
            <param name="config">The config specifying further parameters.</param>
            <param name="bot">The bot.</param>
            <param name="pod">The pod.</param>
            <param name="station">The station.</param>
            <returns>A score that can be used to decide about the best assignment. Minimization / Smaller is better.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.BotManager.Score(RAWSimO.Core.Configurations.PCScorerPodForOStationBotDemand,RAWSimO.Core.Elements.Bot,RAWSimO.Core.Elements.Pod,RAWSimO.Core.Elements.OutputStation)">
            <summary>
            Determines a score that can be used to decide about an assignment.
            </summary>
            <param name="config">The config specifying further parameters.</param>
            <param name="bot">The bot.</param>
            <param name="pod">The pod.</param>
            <param name="station">The station.</param>
            <returns>A score that can be used to decide about the best assignment. Minimization / Smaller is better.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.BotManager.Score(RAWSimO.Core.Configurations.PCScorerPodForOStationBotCompleteable,RAWSimO.Core.Elements.Bot,RAWSimO.Core.Elements.Pod,RAWSimO.Core.Elements.OutputStation)">
            <summary>
            Determines a score that can be used to decide about an assignment.
            </summary>
            <param name="config">The config specifying further parameters.</param>
            <param name="bot">The bot.</param>
            <param name="pod">The pod.</param>
            <param name="station">The station.</param>
            <returns>A score that can be used to decide about the best assignment. Minimization / Smaller is better.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.BotManager.Score(RAWSimO.Core.Configurations.PCScorerPodForOStationBotWorkAmount,RAWSimO.Core.Elements.Bot,RAWSimO.Core.Elements.Pod,RAWSimO.Core.Elements.OutputStation)">
            <summary>
            Determines a score that can be used to decide about an assignment.
            </summary>
            <param name="config">The config specifying further parameters.</param>
            <param name="bot">The bot.</param>
            <param name="pod">The pod.</param>
            <param name="station">The station.</param>
            <returns>A score that can be used to decide about the best assignment. Minimization / Smaller is better.</returns>
        </member>
        <member name="F:RAWSimO.Core.Control.BotManager._currentBot">
            <summary>
            The current bot to assess.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.BotManager._currentPod">
            <summary>
            The current pod to assess.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.BotManager._currentIStation">
            <summary>
            The current input station to assess
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.BotManager._currentOStation">
            <summary>
            The current output station to assess
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.BotManager._bestPodIStationCandidateSelector">
            <summary>
            A helper used to determine the best candidate.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.BotManager._bestIStationCandidateSelector">
            <summary>
            A helper used to determine the best candidate.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.BotManager._bestPodOStationCandidateSelector">
            <summary>
            A helper used to determine the best candidate.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.BotManager._bestOStationCandidateSelector">
            <summary>
            A helper used to determine the best candidate.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.BotManager.DoStoreTaskForStation(RAWSimO.Core.Elements.Bot,RAWSimO.Core.Elements.InputStation,System.Boolean,System.Double,RAWSimO.Core.Configurations.DefaultPodSelectionConfiguration)">
            <summary>
            Allocates an available store task to the bot for the predefined input-station. If no task is available the search might be extended to neighbour-stations or a rest task is done.
            </summary>
            <param name="bot">The bot to allocate a task to.</param>
            <param name="iStation">The station to do work for.</param>
            <param name="extendSearch">Indicates whether the search can be extended to neighbor stations.</param>
            <param name="extendSearchRadius">The radius by which the search can be expanded.</param>
            <param name="config">Pod selection config to use.</param>
            <returns>true if bot has a new store task or is just parking the pod, false if it is doing a rest task.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.BotManager.DoExtractTaskForStation(RAWSimO.Core.Elements.Bot,RAWSimO.Core.Elements.OutputStation,System.Boolean,System.Double,RAWSimO.Core.Configurations.DefaultPodSelectionConfiguration)">
            <summary>
            Allocates an available extract task to the bot for the predefined output-station. If no task is available the search might be extended to neighbour-stations or a rest task is done.
            </summary>
            <param name="bot">The bot to allocate a task to.</param>
            <param name="oStation">The station to do work for.</param>
            <param name="extendSearch">Indicates whether the search can be extended to neighbor stations.</param>
            <param name="extendedSearchRadius">The radius by which the search can be expanded.</param>
            <param name="config">Pod selection config to use.</param>
            /// <returns>true if bot has a new extract task or is just parking the pod, false if it is doing a rest task.</returns>
        </member>
        <member name="F:RAWSimO.Core.Control.BotManager._outputStationHasPotentialOnTheFlyWork">
            <summary>
            Indicates whether we already have looked at the current order situation of the corresponding station (no need to look for additional work to do with the current pods).
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.BotManager._inputStationHasPotentialOnTheFlyWork">
            <summary>
            Indicates whether we already have looked at the current bundle situation of the corresponding station (no need to look for additional work to do with the current pods).
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.BotManager._onTheFlyExtractSituationInvestigated">
            <summary>
            Indicates whether the current extract request situation was already investigated.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.BotManager._onTheFlyStoreSituationInvestigated">
            <summary>
            Indicates whether the current store request situation was already investigated.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.BotManager.OrderAllocated(RAWSimO.Core.Elements.OutputStation,RAWSimO.Core.Items.Order)">
            <summary>
            This is called whenever a new order is assigned to a station, hence, introducing potential new work to do with pods inbound at that station.
            </summary>
            <param name="oStation">The output station that got a new order assigned to it.</param>
            <param name="order">The newly assigned order.</param>
        </member>
        <member name="M:RAWSimO.Core.Control.BotManager.BundleAllocated(RAWSimO.Core.Elements.InputStation,RAWSimO.Core.Items.ItemBundle)">
            <summary>
            This is called whenever a new bundle is assigned to a station, hence, introducing potential new work to do with pods inbound at the station.
            </summary>
            <param name="iStation">The input station that got a new bundle assigned to it.</param>
            <param name="bundle">The newly assigned bundle.</param>
        </member>
        <member name="M:RAWSimO.Core.Control.BotManager.PodPickup(RAWSimO.Core.Elements.Pod,RAWSimO.Core.Elements.Bot)">
            <summary>
            This is called whenever a pod was picked up, hence, introducing potential new work to do with the new pod inbound to a station.
            </summary>
            <param name="pod">The pod that was picked up.</param>
            <param name="bot">The bot that picked up the pod.</param>
        </member>
        <member name="M:RAWSimO.Core.Control.BotManager.InitHasPotentialOnTheFlyWork">
            <summary>
            Initializes the potential on-the-fly work information.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.BotManager.AssignOnTheFlyWork(RAWSimO.Core.Configurations.DefaultPodSelectionConfiguration)">
            <summary>
            Tries to assign more additional requests to the tasks currently executed by the robots.
            </summary>
            <param name="config">The config to use.</param>
        </member>
        <member name="F:RAWSimO.Core.Control.BotManager._statPodForOStationScorerValues">
            <summary>
            Contains the aggregated scorer values.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.BotManager._statPodForOStationAssignments">
            <summary>
            Contains the number of assignments done.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.BotManager._statPodForIStationScorerValues">
            <summary>
            Contains the aggregated scorer values.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.BotManager._statPodForIStationAssignments">
            <summary>
            Contains the number of assignments done.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.BotManager._statOStationForPodScorerValues">
            <summary>
            Contains the aggregated scorer values.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.BotManager._statOStationForPodAssignments">
            <summary>
            Contains the number of assignments done.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.BotManager._statIStationForPodScorerValues">
            <summary>
            Contains the aggregated scorer values.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.BotManager._statIStationForPodAssignments">
            <summary>
            Contains the number of assignments done.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.BotManager.StatResetPC">
            <summary>
            The callback indicates a reset of the statistics.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.BotManager.StatFinishPC">
            <summary>
            The callback that indicates that the simulation is finished and statistics have to submitted to the instance.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Control.BotTask">
            <summary>
            Defines the task a robot can execute.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.BotTask.#ctor(RAWSimO.Core.Instance,RAWSimO.Core.Elements.Bot)">
            <summary>
            Creates a new task.
            </summary>
            <param name="instance">The instance in which the task is executed.</param>
            <param name="bot">The bot that shall execute the task.</param>
        </member>
        <member name="P:RAWSimO.Core.Control.BotTask.Instance">
            <summary>
            The instance this task belongs to.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Control.BotTask.Type">
            <summary>
            The type of the task.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Control.BotTask.Bot">
            <summary>
            The bot that executes the task.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.BotTask.Prepare">
            <summary>
            Prepares everything for executing the task (claiming resources and similar).
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.BotTask.Cancel">
            <summary>
            Cleans up a cancelled task.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.BotTask.Finish">
            <summary>
            Cleans up after a task was successfully executed.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Control.ParkPodTask">
            <summary>
            This class represents a park pod task.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.ParkPodTask.#ctor(RAWSimO.Core.Instance,RAWSimO.Core.Elements.Bot,RAWSimO.Core.Elements.Pod,RAWSimO.Core.Waypoints.Waypoint)">
            <summary>
            Creates a new task.
            </summary>
            <param name="instance">The instance this task belongs to.</param>
            <param name="bot">The bot that shall execute the task.</param>
            <param name="pod">The pod that the robot shall park.</param>
            <param name="storageLocation">The location at which the pod shall be parked.</param>
        </member>
        <member name="P:RAWSimO.Core.Control.ParkPodTask.Type">
            <summary>
            The type of the task.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Control.ParkPodTask.StorageLocation">
            <summary>
            The storage location to use for the pod.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Control.ParkPodTask.Pod">
            <summary>
            The pod to store.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.ParkPodTask.Prepare">
            <summary>
            Prepares everything for executing the task (claiming resources and similar).
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.ParkPodTask.Finish">
            <summary>
            Cleans up after a task was successfully executed.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.ParkPodTask.Cancel">
            <summary>
            Cleans up a cancelled task.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Control.RepositionPodTask">
            <summary>
            This class represents a park pod task.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.RepositionPodTask.#ctor(RAWSimO.Core.Instance,RAWSimO.Core.Elements.Bot,RAWSimO.Core.Elements.Pod,RAWSimO.Core.Waypoints.Waypoint)">
            <summary>
            Creates a new task.
            </summary>
            <param name="instance">The instance this task belongs to.</param>
            <param name="bot">The bot that shall execute the task.</param>
            <param name="pod">The pod that the robot shall park.</param>
            <param name="storageLocation">The location to bring the pod to.</param>
        </member>
        <member name="P:RAWSimO.Core.Control.RepositionPodTask.Type">
            <summary>
            The type of the task.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Control.RepositionPodTask.StorageLocation">
            <summary>
            The location to bring the pod to.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Control.RepositionPodTask.Pod">
            <summary>
            The pod to store.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.RepositionPodTask.Prepare">
            <summary>
            Prepares everything for executing the task (claiming resources and similar).
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.RepositionPodTask.Finish">
            <summary>
            Cleans up after a task was successfully executed.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.RepositionPodTask.Cancel">
            <summary>
            Cleans up a cancelled task.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Control.ExtractTask">
            <summary>
            Defines an extraction task.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.ExtractTask.#ctor(RAWSimO.Core.Instance,RAWSimO.Core.Elements.Bot,RAWSimO.Core.Elements.Pod,RAWSimO.Core.Elements.OutputStation,System.Collections.Generic.List{RAWSimO.Core.Management.ExtractRequest})">
            <summary>
            Creates a new task.
            </summary>
            <param name="instance">The instance this task belongs to.</param>
            <param name="bot">The robot that shall execute the task.</param>
            <param name="reservedPod">The pod to use for executing the task.</param>
            <param name="outputStation">The output station to bring the pod to.</param>
            <param name="requests">The requests to handle with this task.</param>
        </member>
        <member name="P:RAWSimO.Core.Control.ExtractTask.Type">
            <summary>
            The type of the task.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Control.ExtractTask.OutputStation">
            <summary>
            The output station to bring the pod to.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Control.ExtractTask.Requests">
            <summary>
            The requests to finish by executing this task.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Control.ExtractTask.ReservedPod">
            <summary>
            The pod to use for this task.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.ExtractTask.FirstPicked">
            <summary>
            Marks the first request handled.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.ExtractTask.FirstAborted">
            <summary>
            Marks the first request aborted and re-inserts it into the pool of available requests.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.ExtractTask.AddRequest(RAWSimO.Core.Management.ExtractRequest)">
            <summary>
            Adds another request to this task on-the-fly.
            </summary>
            <param name="request">The request that shall also be completed by this task.</param>
        </member>
        <member name="M:RAWSimO.Core.Control.ExtractTask.Prepare">
            <summary>
            Prepares everything for executing the task (claiming resources and similar).
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.ExtractTask.Cancel">
            <summary>
            Cleans up a cancelled task.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.ExtractTask.Finish">
            <summary>
            Cleans up after a task was successfully executed.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Control.InsertTask">
            <summary>
            Defines a store task.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.InsertTask.#ctor(RAWSimO.Core.Instance,RAWSimO.Core.Elements.Bot,RAWSimO.Core.Elements.Pod,RAWSimO.Core.Elements.InputStation,System.Collections.Generic.List{RAWSimO.Core.Management.InsertRequest})">
            <summary>
            Creates a new task.
            </summary>
            <param name="instance">The instance the task belongs to.</param>
            <param name="bot">The bot that shall carry out the task.</param>
            <param name="reservedPod">The pod to use for the task.</param>
            <param name="inputStation">The input station to bring the pod to.</param>
            <param name="requests">The requests that shall be finished after successful execution of the task.</param>
        </member>
        <member name="P:RAWSimO.Core.Control.InsertTask.Type">
            <summary>
            The type of the task.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Control.InsertTask.InputStation">
            <summary>
            The input station at which the task is carried out.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Control.InsertTask.Requests">
            <summary>
            The requests to finish by executing this task.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Control.InsertTask.ReservedPod">
            <summary>
            The pod used for storing the bundles.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.InsertTask.FirstStored">
            <summary>
            Marks the first request handled.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.InsertTask.FirstAborted">
            <summary>
            Marks the first request aborted and re-inserts it into the pool of available requests.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.InsertTask.AddRequest(RAWSimO.Core.Management.InsertRequest)">
            <summary>
            Adds another request to this task on-the-fly.
            </summary>
            <param name="request">The request that shall also be completed by this task.</param>
        </member>
        <member name="M:RAWSimO.Core.Control.InsertTask.Prepare">
            <summary>
            Prepares everything for executing the task (claiming resources and similar).
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.InsertTask.Cancel">
            <summary>
            Cleans up a cancelled task.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.InsertTask.Finish">
            <summary>
            Cleans up after a task was successfully executed.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Control.RestTask">
            <summary>
            Defines a rest task.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.RestTask.#ctor(RAWSimO.Core.Instance,RAWSimO.Core.Elements.Bot,RAWSimO.Core.Waypoints.Waypoint)">
            <summary>
            Creates a new task.
            </summary>
            <param name="instance">The instance this task belongs to.</param>
            <param name="bot">The bot that shall rest.</param>
            <param name="restingLocation">The location at which the robot shall rest.</param>
        </member>
        <member name="P:RAWSimO.Core.Control.RestTask.Type">
            <summary>
            The type of the task.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Control.RestTask.RestingLocation">
            <summary>
            The location at which the robot shall rest.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.RestTask.Prepare">
            <summary>
            Prepares everything for executing the task (claiming resources and similar).
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.RestTask.Finish">
            <summary>
            Cleans up after a task was successfully executed.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.RestTask.Cancel">
            <summary>
            Cleans up a cancelled task.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Control.DummyTask">
            <summary>
            Defines a dummy task that basically does nothing.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.DummyTask.#ctor(RAWSimO.Core.Instance,RAWSimO.Core.Elements.Bot)">
            <summary>
            Creates a new placeholder task.
            </summary>
            <param name="instance">The instance the task belongs to.</param>
            <param name="bot">The bot for which the placeholder task shall be generated.</param>
        </member>
        <member name="P:RAWSimO.Core.Control.DummyTask.Type">
            <summary>
            The type of the task.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.DummyTask.Prepare">
            <summary>
            Prepares everything for executing the task (claiming resources and similar).
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.DummyTask.Cancel">
            <summary>
            Cleans up a cancelled task.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.DummyTask.Finish">
            <summary>
            Cleans up after a task was successfully executed.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Control.BotTaskType">
            <summary>
            Enumerates all tasks a robot can carry out.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.BotTaskType.None">
            <summary>
            An empty task.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.BotTaskType.ParkPod">
            <summary>
            Tells the bot to store the specified pod at the destination location.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.BotTaskType.RepositionPod">
            <summary>
            Tells the bot to move a pod to a new location.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.BotTaskType.Insert">
            <summary>
            Tells the bot to carry the specified pod to the desired <code>InputStation</code>.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.BotTaskType.Extract">
            <summary>
            Tells the bot to carry the specified pod to the desired <code>OutputStation</code>.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.BotTaskType.Rest">
            <summary>
            Tells the bot to rest.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Control.BundleManager">
            <summary>
            Implements the core functionality of a bundle manager.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.BundleManager.#ctor(RAWSimO.Core.Instance)">
            <summary>
            Creates a new instance of this manager.
            </summary>
            <param name="instance">The instance this manager belongs to.</param>
        </member>
        <member name="P:RAWSimO.Core.Control.BundleManager.Instance">
            <summary>
            The instance this manager is assigned to.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.BundleManager._pendingBundles">
            <summary>
            All not yet decided item-bundles.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Control.BundleManager.SituationInvestigated">
            <summary>
            Indicates that the current situation has already been investigated. So that it will be ignored.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.BundleManager.DecideAboutPendingBundles">
            <summary>
            This is called to decide about potentially pending bundles.
            This method is being timed for statistical purposes and is also ONLY called when <code>SituationInvestigated</code> is <code>false</code>.
            Hence, set the field accordingly to react on events not tracked by this outer skeleton.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.BundleManager.AddToReadyList(RAWSimO.Core.Items.ItemBundle,RAWSimO.Core.Elements.InputStation)">
            <summary>
            Adds the transaction to the ready list.
            </summary>
            <param name="bundle">The bundle that is going to be transferred.</param>
            <param name="station">The station the bundle is distributed from.</param>
        </member>
        <member name="M:RAWSimO.Core.Control.BundleManager.SignalBundleStored(RAWSimO.Core.Elements.InputStation,RAWSimO.Core.Elements.Bot,RAWSimO.Core.Elements.Pod,RAWSimO.Core.Items.ItemBundle)">
            <summary>
            Signals the manager that the bundle was stored in the pod.
            </summary>
            <param name="station">The station.</param>
            <param name="bot">The bot.</param>
            <param name="pod">The pod.</param>
            <param name="bundle">The bundle.</param>
        </member>
        <member name="M:RAWSimO.Core.Control.BundleManager.SignalNewBundleAvailable(RAWSimO.Core.Items.ItemBundle)">
            <summary>
            Signals the manager that a new bundle became available.
            </summary>
            <param name="bundle">The new bundle.</param>
        </member>
        <member name="M:RAWSimO.Core.Control.BundleManager.SignalStationActivated(RAWSimO.Core.Elements.InputStation)">
            <summary>
            Signals the manager that a station that was previously not in use can now be assigned bundles.
            </summary>
            <param name="station">The newly activated station.</param>
        </member>
        <member name="M:RAWSimO.Core.Control.BundleManager.GetNextEventTime(System.Double)">
            <summary>
            The next event when this element has to be updated.
            </summary>
            <param name="currentTime">The current time of the simulation.</param>
            <returns>The next time this element has to be updated.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.BundleManager.Update(System.Double,System.Double)">
            <summary>
            Updates the element to the specified time.
            </summary>
            <param name="lastTime">The time before the update.</param>
            <param name="currentTime">The time to update to.</param>
        </member>
        <member name="M:RAWSimO.Core.Control.BundleManager.SignalCurrentTime(System.Double)">
            <summary>
            Signals the current time to the mechanism. The mechanism can decide to block the simulation thread in order consume remaining real-time.
            </summary>
            <param name="currentTime">The current simulation time.</param>
        </member>
        <member name="M:RAWSimO.Core.Control.BundleManager.StatFinish">
            <summary>
            The callback that indicates that the simulation is finished and statistics have to submitted to the instance.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.BundleManager.StatReset">
            <summary>
            The callback indicates a reset of the statistics.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Control.Controller">
            <summary>
            The main class containing all control mechanisms for decisions conducted during simulation.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Controller.#ctor(RAWSimO.Core.Instance)">
            <summary>
            Creates a new controller instance.
            </summary>
            <param name="instance">The instance this controller belongs to.</param>
        </member>
        <member name="P:RAWSimO.Core.Control.Controller.Instance">
            <summary>
            The instance to simulate.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Control.Controller.MethodManager">
            <summary>
            The method manager.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Control.Controller.OrderManager">
            <summary>
            The order manager.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Control.Controller.BundleManager">
            <summary>
            The bundle manager.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Control.Controller.StorageManager">
            <summary>
            The storage manager.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Control.Controller.PodStorageManager">
            <summary>
            The pod storage manager.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Control.Controller.RepositioningManager">
            <summary>
            The repositioning manager.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Control.Controller.StationManager">
            <summary>
            The station manager.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Control.Controller.BotManager">
            <summary>
            The bot manager.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Control.Controller.PathManager">
            <summary>
            The path planner.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Control.Controller.Allocator">
            <summary>
            The allocator.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Controller._currentTime">
            <summary>
            The current time.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Controller._updateFinishTime">
            <summary>
            The time the simulation step is completed.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Control.Controller.CurrentTime">
            <summary>
            The current time.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Control.Controller.Progress">
            <summary>
            The progress of the simulation.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Controller.WaitForUnfinishedWorker(System.Double)">
            <summary>
            Used to wait for workers that are still busy. (In case we simulated faster than real-time)
            </summary>
            <param name="currentTime">The current simulation time.</param>
        </member>
        <member name="M:RAWSimO.Core.Control.Controller.Update(System.Double)">
            <summary>
            Moves the simulation forward by the specified amount of time.
            </summary>
            <param name="elapsedTime">The relative amount of time by which the simulation is forwarded.</param>
        </member>
        <member name="M:RAWSimO.Core.Control.Controller.ExchangePodStorageManager(RAWSimO.Core.Control.PodStorageManager)">
            <summary>
            Exchanges the active pod storage manager with the given one.
            </summary>
            <param name="newManager">The new manager.</param>
        </member>
        <member name="T:RAWSimO.Core.Control.Defaults.ItemStorage.ClosestLocationStorageManager">
            <summary>
            Implements a storage manager using the closest free pod.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.ItemStorage.ClosestLocationStorageManager.#ctor(RAWSimO.Core.Instance)">
            <summary>
            Creates a new instance of this manager.
            </summary>
            <param name="instance">The instance this manager belongs to.</param>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.ItemStorage.ClosestLocationStorageManager._config">
            <summary>
            The config of this controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.ItemStorage.ClosestLocationStorageManager._bundleToStation">
            <summary>
            Tracks the assignments of bundles to input-stations.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.ItemStorage.ClosestLocationStorageManager.SelectPodForInititalInventory(RAWSimO.Core.Instance,RAWSimO.Core.Items.ItemBundle)">
            <summary>
            Selects a pod for a bundle generated during initialization.
            </summary>
            <param name="instance">The active instance.</param>
            <param name="bundle">The bundle to assign to a pod.</param>
            <returns>The selected pod.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.ItemStorage.ClosestLocationStorageManager.GetStorageBufferThreshold(RAWSimO.Core.Elements.Pod)">
            <summary>
            Retrieves the threshold value above which buffered decisions for that respective pod are submitted to the system.
            </summary>
            <param name="pod">The pod to get the threshold value for.</param>
            <returns>The threshold value above which buffered decisions are submitted. Use 0 to immediately submit decisions.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.ItemStorage.ClosestLocationStorageManager.GetStorageBufferTimeout(RAWSimO.Core.Elements.Pod)">
            <summary>
            Retrieves the time after which buffered bundles will be allocated even if they do not meet the threshold criterion.
            </summary>
            <param name="pod">The pod to get the timeout value for.</param>
            <returns>The buffer timeout.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.ItemStorage.ClosestLocationStorageManager.DecideAboutPendingBundles">
            <summary>
            This is called to decide about potentially pending bundles.
            This method is being timed for statistical purposes and is also ONLY called when <code>SituationInvestigated</code> is <code>false</code>.
            Hence, set the field accordingly to react on events not tracked by this outer skeleton.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.ItemStorage.ClosestLocationStorageManager.ReplenishmentBatchingDecided(RAWSimO.Core.Elements.InputStation,RAWSimO.Core.Items.ItemBundle)">
            <summary>
            Used to keep track of the decisions done by replenishment batching.
            </summary>
            <param name="station">The chosen station.</param>
            <param name="bundle">The corresponding bundle.</param>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.ItemStorage.ClosestLocationStorageManager.SignalCurrentTime(System.Double)">
            <summary>
            Signals the current time to the mechanism. The mechanism can decide to block the simulation thread in order consume remaining real-time.
            </summary>
            <param name="currentTime">The current simulation time.</param>
        </member>
        <member name="T:RAWSimO.Core.Control.Defaults.ItemStorage.CorrelativeStorageManager">
            <summary>
            Creates a correlative storage manager that aims to assign bundles in a family based manner.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.ItemStorage.CorrelativeStorageManager.#ctor(RAWSimO.Core.Instance)">
            <summary>
            Creates a new instance of this manager.
            </summary>
            <param name="instance">The instance this manager belongs to.</param>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.ItemStorage.CorrelativeStorageManager.SelectPodForInititalInventory(RAWSimO.Core.Instance,RAWSimO.Core.Items.ItemBundle)">
            <summary>
            Selects a pod for a bundle generated during initialization.
            </summary>
            <param name="instance">The active instance.</param>
            <param name="bundle">The bundle to assign to a pod.</param>
            <returns>The selected pod.</returns>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.ItemStorage.CorrelativeStorageManager._config">
            <summary>
            The config of this controller.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.ItemStorage.CorrelativeStorageManager.GetStorageBufferThreshold(RAWSimO.Core.Elements.Pod)">
            <summary>
            Retrieves the threshold value above which buffered decisions for that respective pod are submitted to the system.
            </summary>
            <param name="pod">The pod to get the threshold value for.</param>
            <returns>The threshold value above which buffered decisions are submitted. Use 0 to immediately submit decisions.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.ItemStorage.CorrelativeStorageManager.GetStorageBufferTimeout(RAWSimO.Core.Elements.Pod)">
            <summary>
            Retrieves the time after which buffered bundles will be allocated even if they do not meet the threshold criterion.
            </summary>
            <param name="pod">The pod to get the timeout value for.</param>
            <returns>The buffer timeout.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.ItemStorage.CorrelativeStorageManager.DecideAboutPendingBundles">
            <summary>
            This is called to decide about potentially pending bundles.
            This method is being timed for statistical purposes and is also ONLY called when <code>SituationInvestigated</code> is <code>false</code>.
            Hence, set the field accordingly to react on events not tracked by this outer skeleton.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.ItemStorage.CorrelativeStorageManager.SignalCurrentTime(System.Double)">
            <summary>
            Signals the current time to the mechanism. The mechanism can decide to block the simulation thread in order consume remaining real-time.
            </summary>
            <param name="currentTime">The current simulation time.</param>
        </member>
        <member name="T:RAWSimO.Core.Control.Defaults.ItemStorage.DummyStorageManager">
            <summary>
            A manager that can be used when the decisions ordinarily made by a storage manager are conducted in another manager.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.ItemStorage.DummyStorageManager.#ctor(RAWSimO.Core.Instance)">
            <summary>
            Creates a new instance of this manager.
            </summary>
            <param name="instance">The instance this manager belongs to.</param>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.ItemStorage.DummyStorageManager.SelectPodForInititalInventory(RAWSimO.Core.Instance,RAWSimO.Core.Items.ItemBundle)">
            <summary>
            Selects a pod for a bundle generated during initialization.
            </summary>
            <param name="instance">The active instance.</param>
            <param name="bundle">The bundle to assign to a pod.</param>
            <returns>The selected pod.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.ItemStorage.DummyStorageManager.DecideAboutPendingBundles">
            <summary>
            This is called to decide about potentially pending bundles.
            This method is being timed for statistical purposes and is also ONLY called when <code>SituationInvestigated</code> is <code>false</code>.
            Hence, set the field accordingly to react on events not tracked by this outer skeleton.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.ItemStorage.DummyStorageManager.GetStorageBufferThreshold(RAWSimO.Core.Elements.Pod)">
            <summary>
            Retrieves the threshold value above which buffered decisions for that respective pod are submitted to the system.
            </summary>
            <param name="pod">The pod to get the threshold value for.</param>
            <returns>The threshold value above which buffered decisions are submitted. Use 0 to immediately submit decisions.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.ItemStorage.DummyStorageManager.GetStorageBufferTimeout(RAWSimO.Core.Elements.Pod)">
            <summary>
            Retrieves the time after which buffered bundles will be allocated even if they do not meet the threshold criterion.
            </summary>
            <param name="pod">The pod to get the timeout value for.</param>
            <returns>The buffer timeout.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.ItemStorage.DummyStorageManager.SignalCurrentTime(System.Double)">
            <summary>
            Signals the current time to the mechanism. The mechanism can decide to block the simulation thread in order consume remaining real-time.
            </summary>
            <param name="currentTime">The current simulation time.</param>
        </member>
        <member name="T:RAWSimO.Core.Control.Defaults.ItemStorage.EmptiestStorageManager">
            <summary>
            Implements an item storage manager always choosing the emptiest pod for a bundle.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.ItemStorage.EmptiestStorageManager.#ctor(RAWSimO.Core.Instance)">
            <summary>
            Creates a new instance of this manager.
            </summary>
            <param name="instance">The instance this manager belongs to.</param>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.ItemStorage.EmptiestStorageManager.SelectPodForInititalInventory(RAWSimO.Core.Instance,RAWSimO.Core.Items.ItemBundle)">
            <summary>
            Selects a pod for a bundle generated during initialization.
            </summary>
            <param name="instance">The active instance.</param>
            <param name="bundle">The bundle to assign to a pod.</param>
            <returns>The selected pod.</returns>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.ItemStorage.EmptiestStorageManager._config">
            <summary>
            The config of this controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.ItemStorage.EmptiestStorageManager._lastChosenPod">
            <summary>
            The last pod.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.ItemStorage.EmptiestStorageManager.DecideAboutPendingBundles">
            <summary>
            This is called to decide about potentially pending bundles.
            This method is being timed for statistical purposes and is also ONLY called when <code>SituationInvestigated</code> is <code>false</code>.
            Hence, set the field accordingly to react on events not tracked by this outer skeleton.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.ItemStorage.EmptiestStorageManager.GetStorageBufferThreshold(RAWSimO.Core.Elements.Pod)">
            <summary>
            Retrieves the threshold value above which buffered decisions for that respective pod are submitted to the system.
            </summary>
            <param name="pod">The pod to get the threshold value for.</param>
            <returns>The threshold value above which buffered decisions are submitted. Use 0 to immediately submit decisions.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.ItemStorage.EmptiestStorageManager.GetStorageBufferTimeout(RAWSimO.Core.Elements.Pod)">
            <summary>
            Retrieves the time after which buffered bundles will be allocated even if they do not meet the threshold criterion.
            </summary>
            <param name="pod">The pod to get the timeout value for.</param>
            <returns>The buffer timeout.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.ItemStorage.EmptiestStorageManager.SignalCurrentTime(System.Double)">
            <summary>
            Signals the current time to the mechanism. The mechanism can decide to block the simulation thread in order consume remaining real-time.
            </summary>
            <param name="currentTime">The current simulation time.</param>
        </member>
        <member name="T:RAWSimO.Core.Control.Defaults.ItemStorage.FixedStorageManager">
            <summary>
            Creates a TestFixed storage manager that aims to assign bundles in a family based manner.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.ItemStorage.FixedStorageManager.SelectPodForInititalInventory(RAWSimO.Core.Instance,RAWSimO.Core.Items.ItemBundle)">
            <summary>
            Selects a pod for a bundle generated during initialization.
            </summary>
            <param name="instance">The active instance.</param>
            <param name="bundle">The bundle to assign to a pod.</param>
            <returns>The selected pod.</returns>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.ItemStorage.FixedStorageManager._config">
            <summary>
            The config of this controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.ItemStorage.FixedStorageManager._classManager">
            <summary>
            The class manager in use.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.ItemStorage.FixedStorageManager._lastChosenPodByClass">
            <summary>
            The last pod chosen per class.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.ItemStorage.FixedStorageManager._lastChosenPodByClassReverse">
            <summary>
            The last pod chosen per class in reverse.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.ItemStorage.FixedStorageManager._classReservedCapacityPercentageForRefill">
            <summary>
            Relative reserved capacity by class above which the pod gets refilled.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.ItemStorage.FixedStorageManager._classBufferTimeout">
            <summary>
            The buffer timeout per storage class.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.ItemStorage.FixedStorageManager.GetStorageBufferThreshold(RAWSimO.Core.Elements.Pod)">
            <summary>
            Retrieves the threshold value above which buffered decisions for that respective pod are submitted to the system.
            </summary>
            <param name="pod">The pod to get the threshold value for.</param>
            <returns>The threshold value above which buffered decisions are submitted. Use 0 to immediately submit decisions.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.ItemStorage.FixedStorageManager.GetStorageBufferTimeout(RAWSimO.Core.Elements.Pod)">
            <summary>
            Retrieves the time after which buffered bundles will be allocated even if they do not meet the threshold criterion.
            </summary>
            <param name="pod">The pod to get the timeout value for.</param>
            <returns>The buffer timeout.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.ItemStorage.FixedStorageManager.DecideAboutPendingBundles">
            <summary>
            This is called to decide about potentially pending bundles.
            This method is being timed for statistical purposes and is also ONLY called when <code>SituationInvestigated</code> is <code>false</code>.
            Hence, set the field accordingly to react on events not tracked by this outer skeleton.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.ItemStorage.FixedStorageManager.ChoosePod(RAWSimO.Core.Items.ItemBundle)">
            <summary>
            Selects a pod for the given bundle.
            </summary>
            <param name="bundle">The bundle to select a pod for.</param>
            <returns>The chosen pod.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.ItemStorage.FixedStorageManager.ChoosePodByConfig(System.Int32,RAWSimO.Core.Items.ItemBundle)">
            <summary>
            Selects a pod for the bundle according to the desired class.
            </summary>
            <param name="classId">The class of the desired pod.</param>
            <param name="bundle">The bundle to assign to a pod.</param>
            <returns>The pod for the given bundle or <code>null</code> in case it does not fit any pod.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.ItemStorage.FixedStorageManager.ChoosePodByConfigRunning(System.Int32,RAWSimO.Core.Items.ItemBundle)">
            <summary>
            Selects a pod for the bundle according to the desired class.
            </summary>
            <param name="classId">The class of the desired pod.</param>
            <param name="bundle">The bundle to assign to a pod.</param>
            <returns>The pod for the given bundle or <code>null</code> in case it does not fit any pod.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.ItemStorage.FixedStorageManager.SignalCurrentTime(System.Double)">
            <summary>
            Signals the current time to the mechanism. The mechanism can decide to block the simulation thread in order consume remaining real-time.
            </summary>
            <param name="currentTime">The current simulation time.</param>
        </member>
        <member name="T:RAWSimO.Core.Control.Defaults.ItemStorage.LeastDemandStorageManager">
            <summary>
            Implements an item storage manager choosing the least demanded pod.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.ItemStorage.LeastDemandStorageManager.#ctor(RAWSimO.Core.Instance)">
            <summary>
            Creates a new instance of this manager.
            </summary>
            <param name="instance">The instance this manager belongs to.</param>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.ItemStorage.LeastDemandStorageManager.SelectPodForInititalInventory(RAWSimO.Core.Instance,RAWSimO.Core.Items.ItemBundle)">
            <summary>
            Selects a pod for a bundle generated during initialization.
            </summary>
            <param name="instance">The active instance.</param>
            <param name="bundle">The bundle to assign to a pod.</param>
            <returns>The selected pod.</returns>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.ItemStorage.LeastDemandStorageManager._config">
            <summary>
            The config of this controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.ItemStorage.LeastDemandStorageManager._lastChosenPod">
            <summary>
            The last pod.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.ItemStorage.LeastDemandStorageManager.DecideAboutPendingBundles">
            <summary>
            This is called to decide about potentially pending bundles.
            This method is being timed for statistical purposes and is also ONLY called when <code>SituationInvestigated</code> is <code>false</code>.
            Hence, set the field accordingly to react on events not tracked by this outer skeleton.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.ItemStorage.LeastDemandStorageManager.GetStorageBufferThreshold(RAWSimO.Core.Elements.Pod)">
            <summary>
            Retrieves the threshold value above which buffered decisions for that respective pod are submitted to the system.
            </summary>
            <param name="pod">The pod to get the threshold value for.</param>
            <returns>The threshold value above which buffered decisions are submitted. Use 0 to immediately submit decisions.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.ItemStorage.LeastDemandStorageManager.GetStorageBufferTimeout(RAWSimO.Core.Elements.Pod)">
            <summary>
            Retrieves the time after which buffered bundles will be allocated even if they do not meet the threshold criterion.
            </summary>
            <param name="pod">The pod to get the timeout value for.</param>
            <returns>The buffer timeout.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.ItemStorage.LeastDemandStorageManager.SignalCurrentTime(System.Double)">
            <summary>
            Signals the current time to the mechanism. The mechanism can decide to block the simulation thread in order consume remaining real-time.
            </summary>
            <param name="currentTime">The current simulation time.</param>
        </member>
        <member name="T:RAWSimO.Core.Control.Defaults.ItemStorage.RandomStorageManager">
            <summary>
            Implements a random storage manager that just randomly assigns bundles to pods.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.ItemStorage.RandomStorageManager.#ctor(RAWSimO.Core.Instance)">
            <summary>
            Creates a new instance of this manager.
            </summary>
            <param name="instance">The instance this manager belongs to.</param>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.ItemStorage.RandomStorageManager.SelectPodForInititalInventory(RAWSimO.Core.Instance,RAWSimO.Core.Items.ItemBundle)">
            <summary>
            Selects a pod for a bundle generated during initialization.
            </summary>
            <param name="instance">The active instance.</param>
            <param name="bundle">The bundle to assign to a pod.</param>
            <returns>The selected pod.</returns>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.ItemStorage.RandomStorageManager._config">
            <summary>
            The config of this controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.ItemStorage.RandomStorageManager._lastChosenPod">
            <summary>
            The last pod.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.ItemStorage.RandomStorageManager.DecideAboutPendingBundles">
            <summary>
            This is called to decide about potentially pending bundles.
            This method is being timed for statistical purposes and is also ONLY called when <code>SituationInvestigated</code> is <code>false</code>.
            Hence, set the field accordingly to react on events not tracked by this outer skeleton.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.ItemStorage.RandomStorageManager.GetStorageBufferThreshold(RAWSimO.Core.Elements.Pod)">
            <summary>
            Retrieves the threshold value above which buffered decisions for that respective pod are submitted to the system.
            </summary>
            <param name="pod">The pod to get the threshold value for.</param>
            <returns>The threshold value above which buffered decisions are submitted. Use 0 to immediately submit decisions.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.ItemStorage.RandomStorageManager.GetStorageBufferTimeout(RAWSimO.Core.Elements.Pod)">
            <summary>
            Retrieves the time after which buffered bundles will be allocated even if they do not meet the threshold criterion.
            </summary>
            <param name="pod">The pod to get the timeout value for.</param>
            <returns>The buffer timeout.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.ItemStorage.RandomStorageManager.SignalCurrentTime(System.Double)">
            <summary>
            Signals the current time to the mechanism. The mechanism can decide to block the simulation thread in order consume remaining real-time.
            </summary>
            <param name="currentTime">The current simulation time.</param>
        </member>
        <member name="T:RAWSimO.Core.Control.Defaults.ItemStorage.ReactiveItemStorageAllocationRule">
            <summary>
            The rule that is used to select a pod for a bundle.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.ItemStorage.ReactiveItemStorageAllocationRule.RandomSameTier">
            <summary>
            Uses a random pod, but prefers pods of the same tier as the input-station is located on.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.ItemStorage.ReactiveItemStorageAllocationRule.EmptiestSameTier">
            <summary>
            Uses the emptiest pod, but prefers pods of the same tier as the input-station is located on.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Control.Defaults.ItemStorage.ReactiveStorageManager">
            <summary>
            Implements a storage manager using the closest free pod.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.ItemStorage.ReactiveStorageManager.#ctor(RAWSimO.Core.Instance)">
            <summary>
            Creates a new instance of this manager.
            </summary>
            <param name="instance">The instance this manager belongs to.</param>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.ItemStorage.ReactiveStorageManager._config">
            <summary>
            The config of this controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.ItemStorage.ReactiveStorageManager._bundleToStation">
            <summary>
            Tracks the assignments of bundles to input-stations.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.ItemStorage.ReactiveStorageManager.SelectPodForInititalInventory(RAWSimO.Core.Instance,RAWSimO.Core.Items.ItemBundle)">
            <summary>
            Selects a pod for a bundle generated during initialization.
            </summary>
            <param name="instance">The active instance.</param>
            <param name="bundle">The bundle to assign to a pod.</param>
            <returns>The selected pod.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.ItemStorage.ReactiveStorageManager.GetStorageBufferThreshold(RAWSimO.Core.Elements.Pod)">
            <summary>
            Retrieves the threshold value above which buffered decisions for that respective pod are submitted to the system.
            </summary>
            <param name="pod">The pod to get the threshold value for.</param>
            <returns>The threshold value above which buffered decisions are submitted. Use 0 to immediately submit decisions.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.ItemStorage.ReactiveStorageManager.GetStorageBufferTimeout(RAWSimO.Core.Elements.Pod)">
            <summary>
            Retrieves the time after which buffered bundles will be allocated even if they do not meet the threshold criterion.
            </summary>
            <param name="pod">The pod to get the timeout value for.</param>
            <returns>The buffer timeout.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.ItemStorage.ReactiveStorageManager.DecideAboutPendingBundles">
            <summary>
            This is called to decide about potentially pending bundles.
            This method is being timed for statistical purposes and is also ONLY called when <code>SituationInvestigated</code> is <code>false</code>.
            Hence, set the field accordingly to react on events not tracked by this outer skeleton.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.ItemStorage.ReactiveStorageManager.ReplenishmentBatchingDecided(RAWSimO.Core.Elements.InputStation,RAWSimO.Core.Items.ItemBundle)">
            <summary>
            Used to keep track of the decisions done by replenishment batching.
            </summary>
            <param name="station">The chosen station.</param>
            <param name="bundle">The corresponding bundle.</param>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.ItemStorage.ReactiveStorageManager.SignalCurrentTime(System.Double)">
            <summary>
            Signals the current time to the mechanism. The mechanism can decide to block the simulation thread in order consume remaining real-time.
            </summary>
            <param name="currentTime">The current simulation time.</param>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.ItemStorage.TurnoverStorageManager.SelectPodForInititalInventory(RAWSimO.Core.Instance,RAWSimO.Core.Items.ItemBundle)">
            <summary>
            Selects a pod for a bundle generated during initialization.
            </summary>
            <param name="instance">The active instance.</param>
            <param name="bundle">The bundle to assign to a pod.</param>
            <returns>The selected pod.</returns>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.ItemStorage.TurnoverStorageManager._config">
            <summary>
            The config for this manager.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.ItemStorage.TurnoverStorageManager._classManager">
            <summary>
            The class manager in use.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.ItemStorage.TurnoverStorageManager._lastChosenPodByClass">
            <summary>
            The last pod chosen per class.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.ItemStorage.TurnoverStorageManager._lastChosenPodByClassReverse">
            <summary>
            The last pod chosen per class in reverse.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.ItemStorage.TurnoverStorageManager._classReservedCapacityPercentageForRefill">
            <summary>
            Relative reserved capacity by class above which the pod gets refilled.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.ItemStorage.TurnoverStorageManager._classBufferTimeout">
            <summary>
            The buffer timeout per storage class.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.ItemStorage.TurnoverStorageManager.GetStorageBufferThreshold(RAWSimO.Core.Elements.Pod)">
            <summary>
            Retrieves the threshold value above which buffered decisions for that respective pod are submitted to the system.
            </summary>
            <param name="pod">The pod to get the threshold value for.</param>
            <returns>The threshold value above which buffered decisions are submitted. Use 0 to immediately submit decisions.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.ItemStorage.TurnoverStorageManager.GetStorageBufferTimeout(RAWSimO.Core.Elements.Pod)">
            <summary>
            Retrieves the time after which buffered bundles will be allocated even if they do not meet the threshold criterion.
            </summary>
            <param name="pod">The pod to get the timeout value for.</param>
            <returns>The buffer timeout.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.ItemStorage.TurnoverStorageManager.DecideAboutPendingBundles">
            <summary>
            This is called to decide about potentially pending bundles.
            This method is being timed for statistical purposes and is also ONLY called when <code>SituationInvestigated</code> is <code>false</code>.
            Hence, set the field accordingly to react on events not tracked by this outer skeleton.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.ItemStorage.TurnoverStorageManager.ChoosePod(RAWSimO.Core.Items.ItemBundle)">
            <summary>
            Selects a pod for the given bundle.
            </summary>
            <param name="bundle">The bundle to select a pod for.</param>
            <returns>The chosen pod.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.ItemStorage.TurnoverStorageManager.ChoosePodByConfig(System.Int32,RAWSimO.Core.Items.ItemBundle)">
            <summary>
            Selects a pod for the bundle according to the desired class.
            </summary>
            <param name="classId">The class of the desired pod.</param>
            <param name="bundle">The bundle to assign to a pod.</param>
            <returns>The pod for the given bundle or <code>null</code> in case it does not fit any pod.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.ItemStorage.TurnoverStorageManager.SignalCurrentTime(System.Double)">
            <summary>
            Signals the current time to the mechanism. The mechanism can decide to block the simulation thread in order consume remaining real-time.
            </summary>
            <param name="currentTime">The current simulation time.</param>
        </member>
        <member name="T:RAWSimO.Core.Control.Defaults.MethodManagement.NoChangeMethodManager">
            <summary>
            Defines a method manager that does not change any methods at all.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.MethodManagement.NoChangeMethodManager.#ctor(RAWSimO.Core.Instance)">
            <summary>
            Creates a new instance of this manager.
            </summary>
            <param name="instance">The instance this manager belongs to.</param>
        </member>
        <member name="T:RAWSimO.Core.Control.Defaults.MethodManagement.RandomMethodManager">
            <summary>
            Declares a random method manager that changes methods at specified time points randomly.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.MethodManagement.RandomMethodManager.#ctor(RAWSimO.Core.Instance)">
            <summary>
            Creates a new instance of the manager.
            </summary>
            <param name="instance">The instance this manager belongs to.</param>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.MethodManagement.RandomMethodManager._config">
            <summary>
            The config of this controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.MethodManagement.RandomMethodManager._nextChange">
            <summary>
            Indicates when the next change has to be done.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.MethodManagement.RandomMethodManager._podManagers">
            <summary>
            The pod storage managers handled by this meta method.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.MethodManagement.RandomMethodManager.GetNextEventTime(System.Double)">
            <summary>
            The next event when this element has to be updated.
            </summary>
            <param name="currentTime">The current time of the simulation.</param>
            <returns>The next time this element has to be updated.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.MethodManagement.RandomMethodManager.Update(System.Double,System.Double)">
            <summary>
            Updates the element to the specified time.
            </summary>
            <param name="lastTime">The time before the update.</param>
            <param name="currentTime">The time to update to.</param>
        </member>
        <member name="T:RAWSimO.Core.Control.Defaults.MethodManagement.ScheduleMethodManager">
            <summary>
            Declares a scheduled method manager that changes methods at specified time points to the ones supplied by the configuration.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.MethodManagement.ScheduleMethodManager.#ctor(RAWSimO.Core.Instance)">
            <summary>
            Creates a new instance of the manager.
            </summary>
            <param name="instance">The instance this manager belongs to.</param>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.MethodManagement.ScheduleMethodManager._config">
            <summary>
            The config of this controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.MethodManagement.ScheduleMethodManager._podStorageManagerQueue">
            <summary>
            All switches that need to be done for pod storage management.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.MethodManagement.ScheduleMethodManager.TranslateTime(System.Double)">
            <summary>
            Translates the time depending on the setting for relative mode.
            </summary>
            <param name="time">The time to translate.</param>
            <returns>The time in simulation time.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.MethodManagement.ScheduleMethodManager.GetNextEventTime(System.Double)">
            <summary>
            The next event when this element has to be updated.
            </summary>
            <param name="currentTime">The current time of the simulation.</param>
            <returns>The next time this element has to be updated.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.MethodManagement.ScheduleMethodManager.Update(System.Double,System.Double)">
            <summary>
            Updates the element to the specified time.
            </summary>
            <param name="lastTime">The time before the update.</param>
            <param name="currentTime">The time to update to.</param>
        </member>
        <member name="T:RAWSimO.Core.Control.Defaults.OrderBatching.DefaultOrderSelection">
            <summary>
            Defines default order selection rules.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.OrderBatching.DefaultOrderSelection.Random">
            <summary>
            Chooses a random order.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.OrderBatching.DefaultOrderSelection.FCFS">
            <summary>
            Chooses the oldest order.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.OrderBatching.DefaultOrderSelection.DueTime">
            <summary>
            Chooses the order with the earliest due date.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.OrderBatching.DefaultOrderSelection.FrequencyAge">
            <summary>
            Chooses the order with the highest combined frequency while also considering its age.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Control.Defaults.OrderBatching.DefaultOutputStationSelection">
            <summary>
            Defines default output station selection rules.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.OrderBatching.DefaultOutputStationSelection.Random">
            <summary>
            Chooses a random station.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.OrderBatching.DefaultOutputStationSelection.LeastBusy">
            <summary>
            Chooses the least busy station.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.OrderBatching.DefaultOutputStationSelection.MostBusy">
            <summary>
            Chooses the most busy station.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Control.Defaults.OrderBatching.DefaultOrderManager">
            <summary>
            Implements a manager that randomly assigns orders to output-stations.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.OrderBatching.DefaultOrderManager.#ctor(RAWSimO.Core.Instance)">
            <summary>
            Creates a new instance of this manager.
            </summary>
            <param name="instance">The instance this manager belongs to.</param>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.OrderBatching.DefaultOrderManager._config">
            <summary>
            The config of this controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.OrderBatching.DefaultOrderManager._lastChosenStation">
            <summary>
            The station that was chosen last time.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.OrderBatching.DefaultOrderManager.IsAssignable(RAWSimO.Core.Elements.OutputStation)">
            <summary>
            Checks whether another order is assignable to the given station.
            </summary>
            <param name="station">The station to check.</param>
            <returns><code>true</code> if there is another open slot, <code>false</code> otherwise.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.OrderBatching.DefaultOrderManager.IsAssignableKeepFastLaneSlot(RAWSimO.Core.Elements.OutputStation)">
            <summary>
            Checks whether another order is assignable to the given station.
            </summary>
            <param name="station">The station to check.</param>
            <returns><code>true</code> if there is another open slot and another one reserved for fast-lane, <code>false</code> otherwise.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.OrderBatching.DefaultOrderManager.Initialize">
            <summary>
            Initializes this controller.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.OrderBatching.DefaultOrderManager.PrepareAssessment">
            <summary>
            Prepares some meta information.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.OrderBatching.DefaultOrderManager.DecideAboutPendingOrders">
            <summary>
            This is called to decide about potentially pending orders.
            This method is being timed for statistical purposes and is also ONLY called when <code>SituationInvestigated</code> is <code>false</code>.
            Hence, set the field accordingly to react on events not tracked by this outer skeleton.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.OrderBatching.DefaultOrderManager.SignalCurrentTime(System.Double)">
            <summary>
            Signals the current time to the mechanism. The mechanism can decide to block the simulation thread in order consume remaining real-time.
            </summary>
            <param name="currentTime">The current simulation time.</param>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.OrderBatching.DefaultOrderManager._statScorerValuesOrder">
            <summary>
            Contains the aggregated scorer values.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.OrderBatching.DefaultOrderManager._statScorerValuesStation">
            <summary>
            Contains the aggregated scorer values.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.OrderBatching.DefaultOrderManager._statOrderSelections">
            <summary>
            Contains the number of selections done.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.OrderBatching.DefaultOrderManager._statStationSelections">
            <summary>
            Contains the number of selections done.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.OrderBatching.DefaultOrderManager.StatReset">
            <summary>
            The callback indicates a reset of the statistics.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.OrderBatching.DefaultOrderManager.StatFinish">
            <summary>
            The callback that indicates that the simulation is finished and statistics have to submitted to the instance.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Control.Defaults.OrderBatching.ScoreFunctionStationOrder">
            <summary>
            Defines the different available functions for scoring a station order tuple.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.OrderBatching.ScoreFunctionStationOrder.InboundPodsAvailablePicks">
            <summary>
            Determines the already available picks from incoming pods.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.OrderBatching.ScoreFunctionStationOrder.InboundPodsAvailablePicksDepletePod">
            <summary>
            Determines the already available picks from incoming pods and gives an extra bonus for depleting an item from a pod.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.OrderBatching.ScoreFunctionStationOrder.Deadline">
            <summary>
            Simply picks the combination with the order which deadline is next.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.OrderBatching.ScoreFunctionStationOrder.InboundPodsAvailablePicksNotDepletePod">
            <summary>
            Determines the already available picks from incoming pods and gives an extra bonus for not depleting an item from a pod.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Control.Defaults.OrderBatching.ForesightOrderManager">
            <summary>
            Implements a manager that uses information of the backlog to exploit similarities in orders when assigning them.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.OrderBatching.ForesightOrderManager.#ctor(RAWSimO.Core.Instance)">
            <summary>
            Creates a new instance of this manager.
            </summary>
            <param name="instance">The instance this manager belongs to.</param>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.OrderBatching.ForesightOrderManager._config">
            <summary>
            The config of this controller.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.OrderBatching.ForesightOrderManager.DecideAboutPendingOrders">
            <summary>
            This is called to decide about potentially pending orders.
            This method is being timed for statistical purposes and is also ONLY called when <code>SituationInvestigated</code> is <code>false</code>.
            Hence, set the field accordingly to react on events not tracked by this outer skeleton.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.OrderBatching.ForesightOrderManager.SignalCurrentTime(System.Double)">
            <summary>
            Signals the current time to the mechanism. The mechanism can decide to block the simulation thread in order consume remaining real-time.
            </summary>
            <param name="currentTime">The current simulation time.</param>
        </member>
        <member name="T:RAWSimO.Core.Control.Defaults.OrderBatching.LinesInCommonOrderManager">
            <summary>
            Implements a manager that assigns orders most similar to the ones already assigned to a station.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.OrderBatching.LinesInCommonOrderManager.#ctor(RAWSimO.Core.Instance)">
            <summary>
            Creates a new instance of this manager.
            </summary>
            <param name="instance">The instance this manager belongs to.</param>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.OrderBatching.LinesInCommonOrderManager._config">
            <summary>
            The config of this controller.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.OrderBatching.LinesInCommonOrderManager.IsAssignable(RAWSimO.Core.Elements.OutputStation)">
            <summary>
            Checks whether another order is assignable to the given station.
            </summary>
            <param name="station">The station to check.</param>
            <returns><code>true</code> if there is another open slot, <code>false</code> otherwise.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.OrderBatching.LinesInCommonOrderManager.IsAssignableKeepFastLaneSlot(RAWSimO.Core.Elements.OutputStation)">
            <summary>
            Checks whether another order is assignable to the given station.
            </summary>
            <param name="station">The station to check.</param>
            <returns><code>true</code> if there is another open slot and another one reserved for fast-lane, <code>false</code> otherwise.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.OrderBatching.LinesInCommonOrderManager.Initialize">
            <summary>
            Initializes this controller.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.OrderBatching.LinesInCommonOrderManager.PrepareAssessment">
            <summary>
            Prepares some meta information.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.OrderBatching.LinesInCommonOrderManager.DecideAboutPendingOrders">
            <summary>
            This is called to decide about potentially pending orders.
            This method is being timed for statistical purposes and is also ONLY called when <code>SituationInvestigated</code> is <code>false</code>.
            Hence, set the field accordingly to react on events not tracked by this outer skeleton.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.OrderBatching.LinesInCommonOrderManager.SignalCurrentTime(System.Double)">
            <summary>
            Signals the current time to the mechanism. The mechanism can decide to block the simulation thread in order consume remaining real-time.
            </summary>
            <param name="currentTime">The current simulation time.</param>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.OrderBatching.LinesInCommonOrderManager._statScorerValues">
            <summary>
            Contains the aggregated scorer values.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.OrderBatching.LinesInCommonOrderManager._statAssignments">
            <summary>
            Contains the number of assignments done.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.OrderBatching.LinesInCommonOrderManager._statLinesInCommonScoreIndex">
            <summary>
            The index of the lines in common scorer.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.OrderBatching.LinesInCommonOrderManager.StatReset">
            <summary>
            The callback indicates a reset of the statistics.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.OrderBatching.LinesInCommonOrderManager.StatFinish">
            <summary>
            The callback that indicates that the simulation is finished and statistics have to submitted to the instance.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Control.Defaults.OrderBatching.NearBestPodOrderBatchingDistanceRule">
            <summary>
            The rule for determining which of the best pods is nearest to the respective station.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.OrderBatching.NearBestPodOrderBatchingDistanceRule.Euclid">
            <summary>
            Uses the euclidean distance measure to determine the shortest distance between a best pod and an output-station.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.OrderBatching.NearBestPodOrderBatchingDistanceRule.Manhattan">
            <summary>
            Uses the manhattan distance measure to determine the shortest distance between a best pod and an output-station.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.OrderBatching.NearBestPodOrderBatchingDistanceRule.ShortestPath">
            <summary>
            Uses the shortest path (calculated by A*) to determine the shortest distance between a best pod and an output-station.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Control.Defaults.OrderBatching.NearBestPodOrderManager">
            <summary>
            Implements a manager that assigns orders to output-stations with most lines in common.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.OrderBatching.NearBestPodOrderManager.#ctor(RAWSimO.Core.Instance)">
            <summary>
            Creates a new instance of this manager.
            </summary>
            <param name="instance">The instance this manager belongs to.</param>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.OrderBatching.NearBestPodOrderManager._config">
            <summary>
            The config of this controller.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.OrderBatching.NearBestPodOrderManager.DecideAboutPendingOrders">
            <summary>
            This is called to decide about potentially pending orders.
            This method is being timed for statistical purposes and is also ONLY called when <code>SituationInvestigated</code> is <code>false</code>.
            Hence, set the field accordingly to react on events not tracked by this outer skeleton.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.OrderBatching.NearBestPodOrderManager.SignalCurrentTime(System.Double)">
            <summary>
            Signals the current time to the mechanism. The mechanism can decide to block the simulation thread in order consume remaining real-time.
            </summary>
            <param name="currentTime">The current simulation time.</param>
        </member>
        <member name="T:RAWSimO.Core.Control.Defaults.OrderBatching.PodMatchingOrderManager">
            <summary>
            Implements a manager that uses information of the backlog to exploit similarities in orders when assigning them.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.OrderBatching.PodMatchingOrderManager.#ctor(RAWSimO.Core.Instance)">
            <summary>
            Creates a new instance of this manager.
            </summary>
            <param name="instance">The instance this manager belongs to.</param>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.OrderBatching.PodMatchingOrderManager._config">
            <summary>
            The config of this controller.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.OrderBatching.PodMatchingOrderManager.IsAssignable(RAWSimO.Core.Elements.OutputStation)">
            <summary>
            Checks whether another order is assignable to the given station.
            </summary>
            <param name="station">The station to check.</param>
            <returns><code>true</code> if there is another open slot, <code>false</code> otherwise.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.OrderBatching.PodMatchingOrderManager.IsAssignableKeepFastLaneSlot(RAWSimO.Core.Elements.OutputStation)">
            <summary>
            Checks whether another order is assignable to the given station.
            </summary>
            <param name="station">The station to check.</param>
            <returns><code>true</code> if there is another open slot and another one reserved for fast-lane, <code>false</code> otherwise.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.OrderBatching.PodMatchingOrderManager.Initialize">
            <summary>
            Initializes this controller.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.OrderBatching.PodMatchingOrderManager.PrepareAssessment">
            <summary>
            Prepares some meta information.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.OrderBatching.PodMatchingOrderManager.DecideAboutPendingOrders">
            <summary>
            This is called to decide about potentially pending orders.
            This method is being timed for statistical purposes and is also ONLY called when <code>SituationInvestigated</code> is <code>false</code>.
            Hence, set the field accordingly to react on events not tracked by this outer skeleton.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.OrderBatching.PodMatchingOrderManager.SignalCurrentTime(System.Double)">
            <summary>
            Signals the current time to the mechanism. The mechanism can decide to block the simulation thread in order consume remaining real-time.
            </summary>
            <param name="currentTime">The current simulation time.</param>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.OrderBatching.PodMatchingOrderManager._statScorerValues">
            <summary>
            Contains the aggregated scorer values.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.OrderBatching.PodMatchingOrderManager._statAssignments">
            <summary>
            Contains the number of assignments done.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.OrderBatching.PodMatchingOrderManager._statPodMatchingScoreIndex">
            <summary>
            The index of the pod matching scorer.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.OrderBatching.PodMatchingOrderManager.StatReset">
            <summary>
            The callback indicates a reset of the statistics.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.OrderBatching.PodMatchingOrderManager.StatFinish">
            <summary>
            The callback that indicates that the simulation is finished and statistics have to submitted to the instance.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Control.Defaults.OrderBatching.QueueOrderManager">
            <summary>
            An order manager building order queues per station.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.OrderBatching.QueueOrderManager.#ctor(RAWSimO.Core.Instance)">
            <summary>
            Creates a new instance of this manager.
            </summary>
            <param name="instance">The instance this manager belongs to.</param>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.OrderBatching.QueueOrderManager._config">
            <summary>
            The config of this controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.OrderBatching.QueueOrderManager._stationQueues">
            <summary>
            The queues of orders per station.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.OrderBatching.QueueOrderManager._bestCandidateSelectorQueue">
            <summary>
            Helper to select the next order for an output station queue.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.OrderBatching.QueueOrderManager._bestCandidateSelectorFastLane">
            <summary>
            Helper to select the next order for the fast lane of an output station.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.OrderBatching.QueueOrderManager._bestCandidateSelectorStation">
            <summary>
            Helper to select the next order for an output station itself.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.OrderBatching.QueueOrderManager._currentOrder">
            <summary>
            Current order to assess.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.OrderBatching.QueueOrderManager._currentStation">
            <summary>
            Current station to assess.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.OrderBatching.QueueOrderManager.Init">
            <summary>
            Inits the controller.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.OrderBatching.QueueOrderManager.GenerateScorer(RAWSimO.Core.Configurations.QueueOrderBatchingConfiguration.QueueOrderSelectionRuleConfig,System.Boolean)">
            <summary>
            Instantiates a scoring function from the given config.
            </summary>
            <param name="scorerConfig">The config.</param>
            <param name="stationAssignment">Indicates whether the order shall be assigned to the station directly.</param>
            <returns>The scoring function.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.OrderBatching.QueueOrderManager.PrepareAssessment">
            <summary>
            Prepares another assessment run.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.OrderBatching.QueueOrderManager.ValidStationIgnoreFastLane(RAWSimO.Core.Elements.OutputStation)">
            <summary>
            Indicates whether the station is available for assigning an order to it.
            </summary>
            <param name="s">The station to check.</param>
            <returns><code>true</code> if an order can be assigned to the station, <code>false</code> otherwise.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.OrderBatching.QueueOrderManager.ValidStationKeepFastLane(RAWSimO.Core.Elements.OutputStation)">
            <summary>
            Indicates whether the station is available for assigning an order to it while keeping one slot open for fast lane.
            </summary>
            <param name="s">The station to check.</param>
            <returns><code>true</code> if an order can be assigned to the station, <code>false</code> otherwise.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.OrderBatching.QueueOrderManager.ValidFastLaneAssignment(RAWSimO.Core.Elements.OutputStation,RAWSimO.Core.Items.Order)">
            <summary>
            Validates that the given combination is a valid assignment to the fast-lane slot of a station.
            </summary>
            <param name="s">The station.</param>
            <param name="o">The order.</param>
            <returns><code>true</code> if the assignment is valid, <code>false</code> otherwise.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.OrderBatching.QueueOrderManager.DecideAboutPendingOrders">
            <summary>
            This is called to decide about potentially pending orders.
            This method is being timed for statistical purposes and is also ONLY called when <code>SituationInvestigated</code> is <code>false</code>.
            Hence, set the field accordingly to react on events not tracked by this outer skeleton.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.OrderBatching.QueueOrderManager.SignalCurrentTime(System.Double)">
            <summary>
            Signals the current time to the mechanism. The mechanism can decide to block the simulation thread in order consume remaining real-time.
            </summary>
            <param name="currentTime">The current simulation time.</param>
        </member>
        <member name="T:RAWSimO.Core.Control.Defaults.OrderBatching.RandomOrderManager">
            <summary>
            Implements a manager that randomly assigns orders to output-stations.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.OrderBatching.RandomOrderManager.#ctor(RAWSimO.Core.Instance)">
            <summary>
            Creates a new instance of this manager.
            </summary>
            <param name="instance">The instance this manager belongs to.</param>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.OrderBatching.RandomOrderManager._config">
            <summary>
            The config of this controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.OrderBatching.RandomOrderManager._lastChosenStation">
            <summary>
            The station that was chosen last time.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.OrderBatching.RandomOrderManager.DecideAboutPendingOrders">
            <summary>
            This is called to decide about potentially pending orders.
            This method is being timed for statistical purposes and is also ONLY called when <code>SituationInvestigated</code> is <code>false</code>.
            Hence, set the field accordingly to react on events not tracked by this outer skeleton.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.OrderBatching.RandomOrderManager.SignalCurrentTime(System.Double)">
            <summary>
            Signals the current time to the mechanism. The mechanism can decide to block the simulation thread in order consume remaining real-time.
            </summary>
            <param name="currentTime">The current simulation time.</param>
        </member>
        <member name="T:RAWSimO.Core.Control.Defaults.OrderBatching.RelatedOrderBatchingTieBreaker">
            <summary>
            Indicates the rule to use for tie-breaking due to same number of order lines in common.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.OrderBatching.RelatedOrderBatchingTieBreaker.Random">
            <summary>
            Uses random values for tie breaking.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.OrderBatching.RelatedOrderBatchingTieBreaker.LeastBusy">
            <summary>
            The least busy station will be used in a tie situation.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.OrderBatching.RelatedOrderBatchingTieBreaker.MostBusy">
            <summary>
            The most busy station will be used in a tie situation.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Control.Defaults.OrderBatching.RelatedOrderManager">
            <summary>
            Implements a manager that assigns orders to output-stations with most lines in common.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.OrderBatching.RelatedOrderManager.#ctor(RAWSimO.Core.Instance)">
            <summary>
            Creates a new instance of this manager.
            </summary>
            <param name="instance">The instance this manager belongs to.</param>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.OrderBatching.RelatedOrderManager._config">
            <summary>
            The config of this controller.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.OrderBatching.RelatedOrderManager.DecideAboutPendingOrders">
            <summary>
            This is called to decide about potentially pending orders.
            This method is being timed for statistical purposes and is also ONLY called when <code>SituationInvestigated</code> is <code>false</code>.
            Hence, set the field accordingly to react on events not tracked by this outer skeleton.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.OrderBatching.RelatedOrderManager.SignalCurrentTime(System.Double)">
            <summary>
            Signals the current time to the mechanism. The mechanism can decide to block the simulation thread in order consume remaining real-time.
            </summary>
            <param name="currentTime">The current simulation time.</param>
        </member>
        <member name="T:RAWSimO.Core.Control.Defaults.OrderBatching.WorkloadOrderingRule">
            <summary>
            Indicates the rule for ordering the stations when assigning orders.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.OrderBatching.WorkloadOrderingRule.LowestOrderCount">
            <summary>
            Prefers stations with the lowest count of orders already assigned to.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.OrderBatching.WorkloadOrderingRule.HighestOrderCount">
            <summary>
            Preferes stations with the highest count of orders already assigned to.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Control.Defaults.OrderBatching.WorkloadOrderManager">
            <summary>
            Implements a manager that assigns orders to output-stations depending on the workload of these.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.OrderBatching.WorkloadOrderManager.#ctor(RAWSimO.Core.Instance)">
            <summary>
            Creates a new instance of this manager.
            </summary>
            <param name="instance">The instance this manager belongs to.</param>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.OrderBatching.WorkloadOrderManager._config">
            <summary>
            The config of this controller.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.OrderBatching.WorkloadOrderManager.DecideAboutPendingOrders">
            <summary>
            This is called to decide about potentially pending orders.
            This method is being timed for statistical purposes and is also ONLY called when <code>SituationInvestigated</code> is <code>false</code>.
            Hence, set the field accordingly to react on events not tracked by this outer skeleton.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.OrderBatching.WorkloadOrderManager.SignalCurrentTime(System.Double)">
            <summary>
            Signals the current time to the mechanism. The mechanism can decide to block the simulation thread in order consume remaining real-time.
            </summary>
            <param name="currentTime">The current simulation time.</param>
        </member>
        <member name="T:RAWSimO.Core.Control.Defaults.PathPlanning.BCPPathManager">
            <summary>
            Controller of the bot.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.PathPlanning.BCPPathManager.#ctor(RAWSimO.Core.Instance)">
            <summary>
            constructor
            </summary>
            <param name="instance">instance</param>
        </member>
        <member name="T:RAWSimO.Core.Control.Defaults.PathPlanning.CBSPathManager">
            <summary>
            Controller of the bot.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.PathPlanning.CBSPathManager.#ctor(RAWSimO.Core.Instance)">
            <summary>
            constructor
            </summary>
            <param name="instance">instance</param>
        </member>
        <member name="T:RAWSimO.Core.Control.Defaults.PathPlanning.DummyPathManager">
            <summary>
            Controller of the bot.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.PathPlanning.DummyPathManager.#ctor(RAWSimO.Core.Instance)">
            <summary>
            constructor
            </summary>
            <param name="instance">instance</param>
        </member>
        <member name="T:RAWSimO.Core.Control.Defaults.PathPlanning.FARPathManager">
            <summary>
            Controller of the bot.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.PathPlanning.FARPathManager.#ctor(RAWSimO.Core.Instance)">
            <summary>
            constructor
            </summary>
            <param name="instance">instance</param>
        </member>
        <member name="T:RAWSimO.Core.Control.Defaults.PathPlanning.ODIDPathManager">
            <summary>
            ODIDPathManager
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.PathPlanning.ODIDPathManager.#ctor(RAWSimO.Core.Instance)">
            <summary>
            constructor
            </summary>
            <param name="instance">instance</param>
        </member>
        <member name="T:RAWSimO.Core.Control.Defaults.PathPlanning.PASPathManager">
            <summary>
            Controller of the bot.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.PathPlanning.PASPathManager.#ctor(RAWSimO.Core.Instance)">
            <summary>
            constructor
            </summary>
            <param name="instance">instance</param>
        </member>
        <member name="T:RAWSimO.Core.Control.Defaults.PathPlanning.WHCAnStarPathManager">
            <summary>
            Controller of the bot.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.PathPlanning.WHCAnStarPathManager.#ctor(RAWSimO.Core.Instance)">
            <summary>
            constructor
            </summary>
            <param name="instance">instance</param>
        </member>
        <member name="T:RAWSimO.Core.Control.Defaults.PathPlanning.WHCAvStarPathManager">
            <summary>
            Controller of the bot.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.PathPlanning.WHCAvStarPathManager.#ctor(RAWSimO.Core.Instance)">
            <summary>
            constructor
            </summary>
            <param name="instance">instance</param>
        </member>
        <member name="T:RAWSimO.Core.Control.Defaults.PodStorage.CachePodStorageManager">
            <summary>
            Implements a pod storage manager that aims to use the next free storage location.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.PodStorage.CachePodStorageManager.#ctor(RAWSimO.Core.Instance)">
            <summary>
            Creates a new instance of the manager.
            </summary>
            <param name="instance">The instance this manager belongs to.</param>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.PodStorage.CachePodStorageManager._config">
            <summary>
            The config for this manager.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.PodStorage.CachePodStorageManager._cacheStations">
            <summary>
            Contains information about the station to which a certain cache storage location belongs.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.PodStorage.CachePodStorageManager._bestCandidateSelector">
            <summary>
            A helper used to determine the best storage location.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.PodStorage.CachePodStorageManager._currentCacheable">
            <summary>
            A helper variable storing the current cache info of the pod.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.PodStorage.CachePodStorageManager._currentStation">
            <summary>
            The current station the pod is leaving.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.PodStorage.CachePodStorageManager._currentPodLocation">
            <summary>
            A helper variable storing the current pod location to assess.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.PodStorage.CachePodStorageManager._currentStorageLocation">
            <summary>
            A helper variable storing the current waypoint to assess.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.PodStorage.CachePodStorageManager.Init">
            <summary>
            Initializes this manager.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.PodStorage.CachePodStorageManager.GetStorageLocationForPod(RAWSimO.Core.Elements.Pod)">
            <summary>
            Returns a suitable storage location for the given pod.
            </summary>
            <param name="pod">The pod to fetch a storage location for.</param>
            <returns>The storage location to use.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.PodStorage.CachePodStorageManager.SignalCurrentTime(System.Double)">
            <summary>
            Signals the current time to the mechanism. The mechanism can decide to block the simulation thread in order consume remaining real-time.
            </summary>
            <param name="currentTime">The current simulation time.</param>
        </member>
        <member name="T:RAWSimO.Core.Control.Defaults.PodStorage.DummyPodStorageManager">
            <summary>
            A manager that can be used when the decisions ordinarily made by a pod storage manager are conducted in another manager.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.PodStorage.DummyPodStorageManager.GetStorageLocationForPod(RAWSimO.Core.Elements.Pod)">
            <summary>
            Returns a suitable storage location for the given pod.
            </summary>
            <param name="pod">The pod to fetch a storage location for.</param>
            <returns>The storage location to use.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.PodStorage.DummyPodStorageManager.SignalCurrentTime(System.Double)">
            <summary>
            Signals the current time to the mechanism. The mechanism can decide to block the simulation thread in order consume remaining real-time.
            </summary>
            <param name="currentTime">The current simulation time.</param>
        </member>
        <member name="T:RAWSimO.Core.Control.Defaults.PodStorage.FixedPodStorageManager">
            <summary>
            Defines a manager that does not change the assignment of pods to storage locations over time.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.PodStorage.FixedPodStorageManager.#ctor(RAWSimO.Core.Instance)">
            <summary>
            Creates a new instance of this manager.
            </summary>
            <param name="instance">The instance this manager belongs to.</param>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.PodStorage.FixedPodStorageManager._config">
            <summary>
            The config for this manager.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.PodStorage.FixedPodStorageManager._classManager">
            <summary>
            The class manager in use.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.PodStorage.FixedPodStorageManager._positions">
            <summary>
            The positions of the pods.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.PodStorage.FixedPodStorageManager.GetStorageLocationForPod(RAWSimO.Core.Elements.Pod)">
            <summary>
            Returns a suitable storage location for the given pod.
            </summary>
            <param name="pod">The pod to fetch a storage location for.</param>
            <returns>The storage location to use.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.PodStorage.FixedPodStorageManager.SignalCurrentTime(System.Double)">
            <summary>
            Signals the current time to the mechanism. The mechanism can decide to block the simulation thread in order consume remaining real-time.
            </summary>
            <param name="currentTime">The current simulation time.</param>
        </member>
        <member name="T:RAWSimO.Core.Control.Defaults.PodStorage.NearestPodStorageLocationDisposeRule">
            <summary>
            Defines by which distance measure the free storage location is selected.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.PodStorage.NearestPodStorageLocationDisposeRule.Euclid">
            <summary>
            Uses the euclidean distance measure to find the next free storage location.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.PodStorage.NearestPodStorageLocationDisposeRule.Manhattan">
            <summary>
            Uses the manhattan distance measure to find the next free storage location.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.PodStorage.NearestPodStorageLocationDisposeRule.ShortestPath">
            <summary>
            Uses the shortest path (calculated by A*) to find the next free storage location.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.PodStorage.NearestPodStorageLocationDisposeRule.ShortestTime">
            <summary>
            Uses the most time-efficient path (calculated by A* with turn costs) to find the next free storage location.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Control.Defaults.PodStorage.NearestPodStorageManager">
            <summary>
            Implements a pod storage manager that aims to use the next free storage location.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.PodStorage.NearestPodStorageManager.#ctor(RAWSimO.Core.Instance)">
            <summary>
            Creates a new instance of the manager.
            </summary>
            <param name="instance">The instance this manager belongs to.</param>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.PodStorage.NearestPodStorageManager._config">
            <summary>
            The config for this manager.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.PodStorage.NearestPodStorageManager.GetStorageLocationForPod(RAWSimO.Core.Elements.Pod)">
            <summary>
            Returns a suitable storage location for the given pod.
            </summary>
            <param name="pod">The pod to fetch a storage location for.</param>
            <returns>The storage location to use.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.PodStorage.NearestPodStorageManager.SignalCurrentTime(System.Double)">
            <summary>
            Signals the current time to the mechanism. The mechanism can decide to block the simulation thread in order consume remaining real-time.
            </summary>
            <param name="currentTime">The current simulation time.</param>
        </member>
        <member name="T:RAWSimO.Core.Control.Defaults.PodStorage.RandomPodStorageManager">
            <summary>
            Implements a pod storage manager that randomly assigns pods to free storage locations.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.PodStorage.RandomPodStorageManager.#ctor(RAWSimO.Core.Instance)">
            <summary>
            Creates a new instance of this manager.
            </summary>
            <param name="instance">The instance this manager belongs to.</param>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.PodStorage.RandomPodStorageManager.GetStorageLocationForPod(RAWSimO.Core.Elements.Pod)">
            <summary>
            Returns a suitable storage location for the given pod.
            </summary>
            <param name="pod">The pod to fetch a storage location for.</param>
            <returns>The storage location to use.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.PodStorage.RandomPodStorageManager.SignalCurrentTime(System.Double)">
            <summary>
            Signals the current time to the mechanism. The mechanism can decide to block the simulation thread in order consume remaining real-time.
            </summary>
            <param name="currentTime">The current simulation time.</param>
        </member>
        <member name="T:RAWSimO.Core.Control.Defaults.PodStorage.StationBasedPodStorageLocationDisposeRule">
            <summary>
            Defines by which distance measure the free storage location is selected.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.PodStorage.StationBasedPodStorageLocationDisposeRule.Euclid">
            <summary>
            Uses the euclidean distance measure to find the next free storage location.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.PodStorage.StationBasedPodStorageLocationDisposeRule.Manhattan">
            <summary>
            Uses the manhattan distance measure to find the next free storage location.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.PodStorage.StationBasedPodStorageLocationDisposeRule.ShortestPath">
            <summary>
            Uses the shortest path (calculated by A*) to find the next free storage location.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.PodStorage.StationBasedPodStorageLocationDisposeRule.ShortestTime">
            <summary>
            Uses the most time-efficient path (calculated by A* with turn costs) to find the next free storage location.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Control.Defaults.PodStorage.StationBasedPodStorageManager">
            <summary>
            Implements a pod storage manager that aims to keep the pods near to the stations.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.PodStorage.StationBasedPodStorageManager.#ctor(RAWSimO.Core.Instance)">
            <summary>
            Creates a new instance of this manager.
            </summary>
            <param name="instance">The instance this manager belongs to.</param>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.PodStorage.StationBasedPodStorageManager._config">
            <summary>
            The config for this manager.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.PodStorage.StationBasedPodStorageManager.GetStorageLocationForPod(RAWSimO.Core.Elements.Pod)">
            <summary>
            Decides the waypoint to use when storing a pod. This call is measured by the timing done.
            </summary>
            <param name="pod">The pod to store.</param>
            <returns>The waypoint to use.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.PodStorage.StationBasedPodStorageManager.SignalCurrentTime(System.Double)">
            <summary>
            Signals the current time to the mechanism. The mechanism can decide to block the simulation thread in order consume remaining real-time.
            </summary>
            <param name="currentTime">The current simulation time.</param>
        </member>
        <member name="T:RAWSimO.Core.Control.Defaults.PodStorage.TurnoverPodStorageManager">
            <summary>
            Supplies a turnover based pod storage manager.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.PodStorage.TurnoverPodStorageManager.#ctor(RAWSimO.Core.Instance)">
            <summary>
            Creates a new instance of this manager.
            </summary>
            <param name="instance">The instance this manager belongs to.</param>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.PodStorage.TurnoverPodStorageManager._config">
            <summary>
            The config for this manager.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.PodStorage.TurnoverPodStorageManager._classManager">
            <summary>
            The class manager in use.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.PodStorage.TurnoverPodStorageManager.ChooseStorageLocation(RAWSimO.Core.Elements.Pod)">
            <summary>
            Chooses the storage location to use for the given pod.
            </summary>
            <param name="pod">The pod to store.</param>
            <returns>The storage location to use for the pod.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.PodStorage.TurnoverPodStorageManager.GetStorageLocationForPod(RAWSimO.Core.Elements.Pod)">
            <summary>
            Determines the storage location for the given pod.
            </summary>
            <param name="pod">The pod to store.</param>
            <returns>The storage location to use for storing the pod.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.PodStorage.TurnoverPodStorageManager.SignalCurrentTime(System.Double)">
            <summary>
            Signals the current time to the mechanism. The mechanism can decide to block the simulation thread in order consume remaining real-time.
            </summary>
            <param name="currentTime">The current simulation time.</param>
        </member>
        <member name="T:RAWSimO.Core.Control.Defaults.PodStorage.UtilityPodStorageManager">
            <summary>
            Implements a manager that decides about the storage location for a pod by using the pod utility shared component.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.PodStorage.UtilityPodStorageManager.#ctor(RAWSimO.Core.Instance)">
            <summary>
            Creates a new instance of the manager.
            </summary>
            <param name="instance">The instance this manager belongs to.</param>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.PodStorage.UtilityPodStorageManager._config">
            <summary>
            The config for this manager.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.PodStorage.UtilityPodStorageManager._initialized">
            <summary>
            Indicates whether the shared components have been initialized.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.PodStorage.UtilityPodStorageManager.GetStorageLocationForPod(RAWSimO.Core.Elements.Pod)">
            <summary>
            Returns a suitable storage location for the given pod.
            </summary>
            <param name="pod">The pod to fetch a storage location for.</param>
            <returns>The storage location to use.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.PodStorage.UtilityPodStorageManager.SignalCurrentTime(System.Double)">
            <summary>
            Signals the current time to the mechanism. The mechanism can decide to block the simulation thread in order consume remaining real-time.
            </summary>
            <param name="currentTime">The current simulation time.</param>
        </member>
        <member name="T:RAWSimO.Core.Control.Defaults.ReplenishmentBatching.RandomBundleManager">
            <summary>
            Implements a manager randomly assigning bundles to input-stations.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.ReplenishmentBatching.RandomBundleManager.#ctor(RAWSimO.Core.Instance)">
            <summary>
            Creates a new instance of this manager.
            </summary>
            <param name="instance">The instance this manager belongs to.</param>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.ReplenishmentBatching.RandomBundleManager._config">
            <summary>
            The config of this controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.ReplenishmentBatching.RandomBundleManager._lastChosenStation">
            <summary>
            The station that was chosen last time.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.ReplenishmentBatching.RandomBundleManager.DecideAboutPendingBundles">
            <summary>
            This is called to decide about potentially pending bundles.
            This method is being timed for statistical purposes and is also ONLY called when <code>SituationInvestigated</code> is <code>false</code>.
            Hence, set the field accordingly to react on events not tracked by this outer skeleton.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.ReplenishmentBatching.RandomBundleManager.SignalCurrentTime(System.Double)">
            <summary>
            Signals the current time to the mechanism. The mechanism can decide to block the simulation thread in order consume remaining real-time.
            </summary>
            <param name="currentTime">The current simulation time.</param>
        </member>
        <member name="T:RAWSimO.Core.Control.Defaults.ReplenishmentBatching.SamePodFirstStationRule">
            <summary>
            Indicates a rule that is used for selecting the first station for a new bundle.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.ReplenishmentBatching.SamePodFirstStationRule.Emptiest">
            <summary>
            Uses the emptiest station.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.ReplenishmentBatching.SamePodFirstStationRule.Fullest">
            <summary>
            Uses the fullest station.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.ReplenishmentBatching.SamePodFirstStationRule.LeastBusy">
            <summary>
            Uses the one with the fewest number of allocated bundles.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.ReplenishmentBatching.SamePodFirstStationRule.MostBusy">
            <summary>
            Uses the one with the highest number of allocated bundles.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.ReplenishmentBatching.SamePodFirstStationRule.Random">
            <summary>
            Uses a random station.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.ReplenishmentBatching.SamePodFirstStationRule.DistanceEuclid">
            <summary>
            Uses the station with the shortest euclidean distance to the station.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Control.Defaults.ReplenishmentBatching.SamePodBundleManager">
            <summary>
            Implements a manager that aims to use the same station for all bundles that shall go into the same pod.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.ReplenishmentBatching.SamePodBundleManager.#ctor(RAWSimO.Core.Instance)">
            <summary>
            Creates a new instance of this manager.
            </summary>
            <param name="instance">The instance this manager belongs to.</param>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.ReplenishmentBatching.SamePodBundleManager._config">
            <summary>
            The config of this controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.ReplenishmentBatching.SamePodBundleManager._itemBundles">
            <summary>
            The item bundles to assign.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.ReplenishmentBatching.SamePodBundleManager._lastChosenStations">
            <summary>
            The station chosen last time for the pod.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.ReplenishmentBatching.SamePodBundleManager.DecideAboutPendingBundles">
            <summary>
            This is called to decide about potentially pending bundles.
            This method is being timed for statistical purposes and is also ONLY called when <code>SituationInvestigated</code> is <code>false</code>.
            Hence, set the field accordingly to react on events not tracked by this outer skeleton.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.ReplenishmentBatching.SamePodBundleManager.SignalCurrentTime(System.Double)">
            <summary>
            Signals the current time to the mechanism. The mechanism can decide to block the simulation thread in order consume remaining real-time.
            </summary>
            <param name="currentTime">The current simulation time.</param>
        </member>
        <member name="T:RAWSimO.Core.Control.Defaults.Repositioning.CacheDropoffRepositioningManager">
            <summary>
            A repositioning manager aiming to store useful pods in a cache zone while freeing up space in front of the output-stations.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.Repositioning.CacheDropoffRepositioningManager.#ctor(RAWSimO.Core.Instance)">
            <summary>
            Creates a new instance of this manager.
            </summary>
            <param name="instance">The instance this manager belongs to.</param>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.Repositioning.CacheDropoffRepositioningManager._config">
            <summary>
            The configuration.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.Repositioning.CacheDropoffRepositioningManager._storageLocationStations">
            <summary>
            The stations belonging to the respective storage location's cache.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.Repositioning.CacheDropoffRepositioningManager._cacheTargetCounts">
            <summary>
            The number of pods targeted for the caches.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.Repositioning.CacheDropoffRepositioningManager._cachePodCounts">
            <summary>
            The number of pods for the respective cache.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.Repositioning.CacheDropoffRepositioningManager._cacheableInfoPerStation">
            <summary>
            Contains information about whether the current pod is cacheable per output station.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.Repositioning.CacheDropoffRepositioningManager._cacheableAtAll">
            <summary>
            Contains information about whether the current pod is cacheable at all.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.Repositioning.CacheDropoffRepositioningManager._bestCandidateSelector">
            <summary>
            A helper used to determine the best move.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.Repositioning.CacheDropoffRepositioningManager._currentBot">
            <summary>
            A helper variable storing the current bot that asks for the move.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.Repositioning.CacheDropoffRepositioningManager._currentPod">
            <summary>
            A helper variable storing the current pod to assess.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.Repositioning.CacheDropoffRepositioningManager._currentStorageLocation">
            <summary>
            A helper variable storing the current waypoint to assess.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.Repositioning.CacheDropoffRepositioningManager.GetRepositioningMove(RAWSimO.Core.Elements.Bot)">
            <summary>
            Decides the next repositioning move to do for the given robot.
            </summary>
            <param name="robot">The robot that is asking to conduct such a move.</param>
            <returns>A repositioning move or <code>null</code> if no such move was available.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.Repositioning.CacheDropoffRepositioningManager.SignalCurrentTime(System.Double)">
            <summary>
            Signals the current time to the mechanism. The mechanism can decide to block the simulation thread in order consume remaining real-time.
            </summary>
            <param name="currentTime">The current simulation time.</param>
        </member>
        <member name="T:RAWSimO.Core.Control.Defaults.Repositioning.CacheRepositioningManager">
            <summary>
            A repositioning manager aiming to store useful pods in a cache zone while freeing up space in front of the output-stations.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.Repositioning.CacheRepositioningManager.#ctor(RAWSimO.Core.Instance)">
            <summary>
            Creates a new instance of this manager.
            </summary>
            <param name="instance">The instance this manager belongs to.</param>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.Repositioning.CacheRepositioningManager._config">
            <summary>
            The configuration.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.Repositioning.CacheRepositioningManager._chacheStorageLocations">
            <summary>
            The caches per station.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.Repositioning.CacheRepositioningManager._stationsOfStorageLocations">
            <summary>
            The stations belonging to the respective storage location's cache.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.Repositioning.CacheRepositioningManager._regularStorageLocations">
            <summary>
            All storage locations that do not belong to a hot zone.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.Repositioning.CacheRepositioningManager._bestCandidateSelectorClear">
            <summary>
            A helper used to determine the best candidate (clear move).
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.Repositioning.CacheRepositioningManager._bestCandidateSelectorFill">
            <summary>
            A helper used to determine the best candidate (fill move).
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.Repositioning.CacheRepositioningManager._currentStation">
            <summary>
            The current output-station, which cache is being assessed.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.Repositioning.CacheRepositioningManager._currentPod">
            <summary>
            A helper variable storing the current pod to assess.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.Repositioning.CacheRepositioningManager._currentStorageLocation">
            <summary>
            A helper variable storing the current waypoint to assess.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.Repositioning.CacheRepositioningManager.NeedsClearingRepositioning(RAWSimO.Core.Elements.OutputStation)">
            <summary>
            Checks whether a clearing repositioning move is necessary for the given station.
            </summary>
            <param name="station">The station to check.</param>
            <returns><code>true</code> if clearing repositioning should be done for the station, <code>false</code> otherwise. </returns>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.Repositioning.CacheRepositioningManager.NeedsFillingRepositioning(RAWSimO.Core.Elements.OutputStation)">
            <summary>
            Checks whether a filling repositioning move is necessary for the given station.
            </summary>
            <param name="station">The station to check.</param>
            <returns><code>true</code> if filling repositioning should be done for the station, <code>false</code> otherwise. </returns>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.Repositioning.CacheRepositioningManager.GetRepositioningMove(RAWSimO.Core.Elements.Bot)">
            <summary>
            Decides the next repositioning move to do for the given robot.
            </summary>
            <param name="robot">The robot that is asking to conduct such a move.</param>
            <returns>A repositioning move or <code>null</code> if no such move was available.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.Repositioning.CacheRepositioningManager.SignalCurrentTime(System.Double)">
            <summary>
            Signals the current time to the mechanism. The mechanism can decide to block the simulation thread in order consume remaining real-time.
            </summary>
            <param name="currentTime">The current simulation time.</param>
        </member>
        <member name="T:RAWSimO.Core.Control.Defaults.Repositioning.ConceptRepositioningManager">
            <summary>
            A conceptual repositioning manager.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.Repositioning.ConceptRepositioningManager.#ctor(RAWSimO.Core.Instance)">
            <summary>
            Creates a new instance of this manager.
            </summary>
            <param name="instance">The instance this manager belongs to.</param>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.Repositioning.ConceptRepositioningManager._config">
            <summary>
            The configuration.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.Repositioning.ConceptRepositioningManager.GetRepositioningMove(RAWSimO.Core.Elements.Bot)">
            <summary>
            Decides the next repositioning move to do for the given robot.
            </summary>
            <param name="robot">The robot that is asking to conduct such a move.</param>
            <returns>A repositioning move or <code>null</code> if no such move was available.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.Repositioning.ConceptRepositioningManager.Update(System.Double,System.Double)">
            <summary>
            Updates the element to the specified time.
            </summary>
            <param name="lastTime">The time before the update.</param>
            <param name="currentTime">The time to update to.</param>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.Repositioning.ConceptRepositioningManager.SignalCurrentTime(System.Double)">
            <summary>
            Signals the current time to the mechanism. The mechanism can decide to block the simulation thread in order consume remaining real-time.
            </summary>
            <param name="currentTime">The current simulation time.</param>
        </member>
        <member name="T:RAWSimO.Core.Control.Defaults.Repositioning.DummyRepositioningManager">
            <summary>
            A repositioning manager that does not generate any repositioning moves.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.Repositioning.DummyRepositioningManager.#ctor(RAWSimO.Core.Instance)">
            <summary>
            Creates a new instance of this manager.
            </summary>
            <param name="instance">The instance this manager belongs to.</param>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.Repositioning.DummyRepositioningManager.GetRepositioningMove(RAWSimO.Core.Elements.Bot)">
            <summary>
            Decides the next repositioning move to do for the given robot.
            </summary>
            <param name="robot">The robot that is asking to conduct such a move.</param>
            <returns>A repositioning move or <code>null</code> if no such move was available.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.Repositioning.DummyRepositioningManager.SignalCurrentTime(System.Double)">
            <summary>
            Signals the current time to the mechanism. The mechanism can decide to block the simulation thread in order consume remaining real-time.
            </summary>
            <param name="currentTime">The current simulation time.</param>
        </member>
        <member name="T:RAWSimO.Core.Control.Defaults.Repositioning.UtilityRepositioningManager">
            <summary>
            Implements a repositioning manager that aims to move pods to more suitable storage locations as indicated by a pod utility manager component.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.Repositioning.UtilityRepositioningManager.#ctor(RAWSimO.Core.Instance)">
            <summary>
            Creates a new instance of this manager.
            </summary>
            <param name="instance">The instance this manager belongs to.</param>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.Repositioning.UtilityRepositioningManager._config">
            <summary>
            The configuration.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.Repositioning.UtilityRepositioningManager._initialized">
            <summary>
            Indicates whether the shared components have been initialized.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.Repositioning.UtilityRepositioningManager.GetRepositioningMove(RAWSimO.Core.Elements.Bot)">
            <summary>
            Decides the next repositioning move to do for the given robot.
            </summary>
            <param name="robot">The robot that is asking to conduct such a move.</param>
            <returns>A repositioning move or <code>null</code> if no such move was available.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.Repositioning.UtilityRepositioningManager.SignalCurrentTime(System.Double)">
            <summary>
            Signals the current time to the mechanism. The mechanism can decide to block the simulation thread in order consume remaining real-time.
            </summary>
            <param name="currentTime">The current simulation time.</param>
        </member>
        <member name="T:RAWSimO.Core.Control.Defaults.StationActivation.ActivateAllStationManager">
            <summary>
            A station activation controller that simply keeps all stations active over time.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.StationActivation.ActivateAllStationManager.#ctor(RAWSimO.Core.Instance)">
            <summary>
            Creates a new instance of this controller.
            </summary>
            <param name="instance">The instance this controller belongs to.</param>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.StationActivation.ActivateAllStationManager.GetNextEventTime(System.Double)">
            <summary>
            The next event when this element has to be updated.
            </summary>
            <param name="currentTime">The current time of the simulation.</param>
            <returns>The next time this element has to be updated.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.StationActivation.ActivateAllStationManager.Update(System.Double,System.Double)">
            <summary>
            Updates the element to the specified time.
            </summary>
            <param name="lastTime">The time before the update.</param>
            <param name="currentTime">The time to update to.</param>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.StationActivation.ActivateAllStationManager.SignalCurrentTime(System.Double)">
            <summary>
            Signals the current time to the mechanism. The mechanism can decide to block the simulation thread in order consume remaining real-time.
            </summary>
            <param name="currentTime">The current simulation time.</param>
        </member>
        <member name="T:RAWSimO.Core.Control.Defaults.StationActivation.BacklogThresholdStationManager">
            <summary>
            A station activation controller that reactively activates / deactivates the stations depending on the backlog size.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.StationActivation.BacklogThresholdStationManager.#ctor(RAWSimO.Core.Instance)">
            <summary>
            Creates a new instance of this controller.
            </summary>
            <param name="instance">The instance this controller belongs to.</param>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.StationActivation.BacklogThresholdStationManager._config">
            <summary>
            The config of this controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.StationActivation.BacklogThresholdStationManager._lastOStationTrigger">
            <summary>
            The last time an output-station got deactivated / activated.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.StationActivation.BacklogThresholdStationManager._lastIStationTrigger">
            <summary>
            The last time an input-station got deactivated / activated.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.StationActivation.BacklogThresholdStationManager._oStations">
            <summary>
            All output-stations in the order in which they shall get (de-)activated.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.StationActivation.BacklogThresholdStationManager._iStations">
            <summary>
            All input-stations in the order in which they shall get (de-)activated.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.StationActivation.BacklogThresholdStationManager.GetNextEventTime(System.Double)">
            <summary>
            The next event when this element has to be updated.
            </summary>
            <param name="currentTime">The current time of the simulation.</param>
            <returns>The next time this element has to be updated.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.StationActivation.BacklogThresholdStationManager.Update(System.Double,System.Double)">
            <summary>
            Updates the element to the specified time.
            </summary>
            <param name="lastTime">The time before the update.</param>
            <param name="currentTime">The time to update to.</param>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.StationActivation.BacklogThresholdStationManager.SignalCurrentTime(System.Double)">
            <summary>
            Signals the current time to the mechanism. The mechanism can decide to block the simulation thread in order consume remaining real-time.
            </summary>
            <param name="currentTime">The current simulation time.</param>
        </member>
        <member name="T:RAWSimO.Core.Control.Defaults.StationActivation.ConstantRatioStationManager">
            <summary>
            A station activation controller that simply keeps all stations active over time.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.StationActivation.ConstantRatioStationManager.#ctor(RAWSimO.Core.Instance)">
            <summary>
            Creates a new instance of this controller.
            </summary>
            <param name="instance">The instance this controller belongs to.</param>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.StationActivation.ConstantRatioStationManager._config">
            <summary>
            The config of this controller.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.StationActivation.ConstantRatioStationManager.GetNextEventTime(System.Double)">
            <summary>
            The next event when this element has to be updated.
            </summary>
            <param name="currentTime">The current time of the simulation.</param>
            <returns>The next time this element has to be updated.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.StationActivation.ConstantRatioStationManager.Update(System.Double,System.Double)">
            <summary>
            Updates the element to the specified time.
            </summary>
            <param name="lastTime">The time before the update.</param>
            <param name="currentTime">The time to update to.</param>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.StationActivation.ConstantRatioStationManager.SignalCurrentTime(System.Double)">
            <summary>
            Signals the current time to the mechanism. The mechanism can decide to block the simulation thread in order consume remaining real-time.
            </summary>
            <param name="currentTime">The current simulation time.</param>
        </member>
        <member name="T:RAWSimO.Core.Control.Defaults.StationActivation.WorkShiftStationActivationManager">
            <summary>
            A station activation controller that simply keeps all stations active over time.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.StationActivation.WorkShiftStationActivationManager.#ctor(RAWSimO.Core.Instance)">
            <summary>
            Creates a new instance of this controller.
            </summary>
            <param name="instance">The instance this controller belongs to.</param>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.StationActivation.WorkShiftStationActivationManager._config">
            <summary>
            The config of this controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.StationActivation.WorkShiftStationActivationManager._shifts">
            <summary>
            All given shifts.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.StationActivation.WorkShiftStationActivationManager._currentShiftIndex">
            <summary>
            The current shift index.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.StationActivation.WorkShiftStationActivationManager._nextSwitch">
            <summary>
            The time of the next switch.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.StationActivation.WorkShiftStationActivationManager.GetNextSwitch(System.Double)">
            <summary>
            Returns the time of the next switch.
            </summary>
            <param name="currentTime">The current time.</param>
            <returns>The time of the next switch.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.StationActivation.WorkShiftStationActivationManager.PerformSwitch">
            <summary>
            Performs the switch to the current shift
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.StationActivation.WorkShiftStationActivationManager.ActivateAll">
            <summary>
            Simply activates all of the stations.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.StationActivation.WorkShiftStationActivationManager.DeactivateAll">
            <summary>
            Simply deactivates all of the stations.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.StationActivation.WorkShiftStationActivationManager.GetNextEventTime(System.Double)">
            <summary>
            The next event when this element has to be updated.
            </summary>
            <param name="currentTime">The current time of the simulation.</param>
            <returns>The next time this element has to be updated.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.StationActivation.WorkShiftStationActivationManager.Update(System.Double,System.Double)">
            <summary>
            Updates the element to the specified time.
            </summary>
            <param name="lastTime">The time before the update.</param>
            <param name="currentTime">The time to update to.</param>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.StationActivation.WorkShiftStationActivationManager.SignalCurrentTime(System.Double)">
            <summary>
            Signals the current time to the mechanism. The mechanism can decide to block the simulation thread in order consume remaining real-time.
            </summary>
            <param name="currentTime">The current simulation time.</param>
        </member>
        <member name="T:RAWSimO.Core.Control.Defaults.TaskAllocation.BalancedBotManager">
            <summary>
            A task allocation controller that aims to simply balance the robots across the stations.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.TaskAllocation.BalancedBotManager.#ctor(RAWSimO.Core.Instance)">
            <summary>
            Creates a new instance of this controller.
            </summary>
            <param name="instance">The instance this controller belongs to.</param>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.TaskAllocation.BalancedBotManager._config">
            <summary>
            The configuration.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.TaskAllocation.BalancedBotManager._stations">
            <summary>
            All stations.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.TaskAllocation.BalancedBotManager._bots">
            <summary>
            All bots that are available to be allocated to stations.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.TaskAllocation.BalancedBotManager._allStationsList">
            <summary>
            Contains all stations in a list ordered by the distance to the key station.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.TaskAllocation.BalancedBotManager._singleStationLists">
            <summary>
            Contains a list per station with the station in it as the only element.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.TaskAllocation.BalancedBotManager._botStations">
            <summary>
            The stations the bots are assigned to.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.TaskAllocation.BalancedBotManager._stationBots">
            <summary>
            The bots per station.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.TaskAllocation.BalancedBotManager._stationWorkerCount">
            <summary>
            The number of bots working for the respective station at the current moment (including bots not assigned but extending to that station).
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.TaskAllocation.BalancedBotManager._workerStations">
            <summary>
            The stations the bots are currently working for (respects the real work - not only the assignment).
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.TaskAllocation.BalancedBotManager._repositioningBots">
            <summary>
            Bots currently assigned to do repositioning jobs exclusively.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.TaskAllocation.BalancedBotManager._unassignedBots">
            <summary>
            All currently unemployed bots
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.TaskAllocation.BalancedBotManager._lastActiveStations">
            <summary>
            Stores the stations that were active during the last update (to avoid unnecessary updates).
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.TaskAllocation.BalancedBotManager._nextReallocation">
            <summary>
            Keeps track of the next reallocation event.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.TaskAllocation.BalancedBotManager.ReallocateBots(System.Boolean)">
            <summary>
            Reallocates the bots between the stations.
            </summary>
            <param name="overrideActivity">Indicates whether the stations activity  will be ignored.</param>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.TaskAllocation.BalancedBotManager.GetNextTask(RAWSimO.Core.Elements.Bot)">
            <summary>
            Gets the next task for the specified bot.
            </summary>
            <param name="bot">The bot to get a task for.</param>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.TaskAllocation.BalancedBotManager.GetAssignedBotCount(RAWSimO.Core.Geometrics.Circle)">
            <summary>
            Gets the number of bots currently assigned to the given station.
            </summary>
            <param name="station">The station.</param>
            <returns>The number of robots assigned to the station.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.TaskAllocation.BalancedBotManager.GetNextEventTime(System.Double)">
            <summary>
            The next event when this element has to be updated.
            </summary>
            <param name="currentTime">The current time of the simulation.</param>
            <returns>The next time this element has to be updated.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.TaskAllocation.BalancedBotManager.Update(System.Double,System.Double)">
            <summary>
            Updates the element to the specified time.
            </summary>
            <param name="lastTime">The time before the update.</param>
            <param name="currentTime">The time to update to.</param>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.TaskAllocation.BalancedBotManager.SignalCurrentTime(System.Double)">
            <summary>
            Signals the current time to the mechanism. The mechanism can decide to block the simulation thread in order consume remaining real-time.
            </summary>
            <param name="currentTime">The current simulation time.</param>
        </member>
        <member name="T:RAWSimO.Core.Control.Defaults.TaskAllocation.BruteForceBotManager">
            <summary>
            A brute-force manager deciding the next task for each bot by checking all possible tasks
            for the one with the minimal time for storing the current pod, picking up the next one
            and bringing it to the task's destination station.
            
            <remarks>This manager overrides any storage assignment or pod storage assignment manager.</remarks>
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.TaskAllocation.BruteForceBotManager.#ctor(RAWSimO.Core.Instance)">
            <summary>
            Creates a new instance of this manager.
            </summary>
            <param name="instance">The instance this manager belongs to.</param>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.TaskAllocation.BruteForceBotManager.GetNextTask(RAWSimO.Core.Elements.Bot)">
            <summary>
            Determines the next task for the bot.
            </summary>
            <param name="bot">The bot to get a task for.</param>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.TaskAllocation.BruteForceBotManager.DoExtractTask(RAWSimO.Core.Elements.Bot)">
            <summary>
            Finds the best item delivery task and then executes it.
            </summary>
            <returns><code>false</code> if no task available, <code>true</code> otherwise.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.TaskAllocation.BruteForceBotManager.GetBestDeliveryTask(RAWSimO.Core.Elements.Bot,RAWSimO.Core.Management.ExtractRequest@,RAWSimO.Core.Elements.Pod@,RAWSimO.Core.Items.ItemDescription@,RAWSimO.Core.Elements.OutputStation@,RAWSimO.Core.Waypoints.Waypoint@)">
            <summary>
            Determines the best delivery task for the given bot, and allocates the required resources.
            </summary>
            <param name="bot">The bot to consider.</param>
            <param name="bestPod">The pod to use for the best delivery task.</param>
            <param name="bestItemDescription">The type of the item to use for the best delivery task.</param>
            <param name="bestRequest">The request to use for the best delivery task.</param>
            <param name="bestStation">The station to use for the best delivery task.</param>
            <param name="bestStorageLocationOldPod">The storage location for the current pod to use for the best delivery task.</param>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.TaskAllocation.BruteForceBotManager.GetBestTaskForPod(RAWSimO.Core.Elements.Bot,RAWSimO.Core.Elements.Pod,RAWSimO.Core.Waypoints.Waypoint,RAWSimO.Core.Management.ExtractRequest@,System.Double@)">
            <summary>
            Finds the best delivery task for the specified pod.
            Sets <code>bestDeliveryRequest</code> to null if none found, otherwise <code>bestDeliveryRequest</code> and <code>bestTimeForDeliveryRequest</code> are initialized.
            </summary>
            <param name="bot">The bot to consider.</param>
            <param name="pod">Pod to take.</param>
            <param name="podLocation">Current location of the pod.</param>
            <param name="bestExtractTask">The best extract task set by this method.</param>
            <param name="bestTimeForExtract">The time of the best extract set by this method.</param>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.TaskAllocation.BruteForceBotManager.DoStoreTask(RAWSimO.Core.Elements.Bot)">
            <summary>
            Finds the best item-bundle pickup task and then executes it.
            </summary>
            <returns><code>false</code> if no task available, <code>true</code> otherwise.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.TaskAllocation.BruteForceBotManager.ReserveBestItemToPickUp(RAWSimO.Core.Elements.Bot,RAWSimO.Core.Management.InsertRequest@,RAWSimO.Core.Elements.Pod@,RAWSimO.Core.Elements.InputStation@)">
            <summary>
            Based on the current situation, the bot needs to get an item, but doesn't have it.
            This function reserves the item the pod should pick up. Returns the pod that should be used, null if it's carying a pod and the current pod won't work (too full).
            </summary>
            <param name="bot">The bot to consider.</param>
            <param name="bestRequest">The best request to use for the best pickup task.</param>
            <param name="bestStation">The station to use for the best pickup task.</param>
            <param name="bestPod">The pod to use for the best pickup task.</param>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.TaskAllocation.BruteForceBotManager.StorePodAtClosestStorageLocation(RAWSimO.Core.Elements.Bot)">
            <summary>
            Tells the bot to store its current pod at the closest waypoint.
            </summary>
            <param name="bot">The bot to consider.</param>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.TaskAllocation.BruteForceBotManager.GetOutOfTheWay(RAWSimO.Core.Elements.Bot)">
            <summary>
            Tells the bot to store its current pod at the closest location (if it has one), and then go resting to stay out of the way of other bots.
            </summary>
            <param name="bot">The bot to consider.</param>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.TaskAllocation.BruteForceBotManager.GetNextEventTime(System.Double)">
            <summary>
            The next event when this element has to be updated.
            </summary>
            <param name="currentTime">The current time of the simulation.</param>
            <returns>The next time this element has to be updated.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.TaskAllocation.BruteForceBotManager.Update(System.Double,System.Double)">
            <summary>
            Updates the element to the specified time.
            </summary>
            <param name="lastTime">The time before the update.</param>
            <param name="currentTime">The time to update to.</param>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.TaskAllocation.BruteForceBotManager.SignalCurrentTime(System.Double)">
            <summary>
            Signals the current time to the mechanism. The mechanism can decide to block the simulation thread in order consume remaining real-time.
            </summary>
            <param name="currentTime">The current simulation time.</param>
        </member>
        <member name="T:RAWSimO.Core.Control.Defaults.TaskAllocation.ConceptBotManager">
            <summary>
            Implements a manager randomly assigning tasks to the robots.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.TaskAllocation.ConceptBotManager.#ctor(RAWSimO.Core.Instance)">
            <summary>
            Creates a new instance of this manager.
            </summary>
            <param name="instance">The instance this manager belongs to.</param>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.TaskAllocation.ConceptBotManager.GetNextTask(RAWSimO.Core.Elements.Bot)">
            <summary>
            Main decision routine that determines the next task the bot will do.
            </summary>
            <param name="bot">The bot to assign a task to.</param>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.TaskAllocation.ConceptBotManager.GetNextEventTime(System.Double)">
            <summary>
            The next event when this element has to be updated.
            </summary>
            <param name="currentTime">The current time of the simulation.</param>
            <returns>The next time this element has to be updated.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.TaskAllocation.ConceptBotManager.Update(System.Double,System.Double)">
            <summary>
            Updates the element to the specified time.
            </summary>
            <param name="lastTime">The time before the update.</param>
            <param name="currentTime">The time to update to.</param>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.TaskAllocation.ConceptBotManager.SignalCurrentTime(System.Double)">
            <summary>
            Signals the current time to the mechanism. The mechanism can decide to block the simulation thread in order consume remaining real-time.
            </summary>
            <param name="currentTime">The current simulation time.</param>
        </member>
        <member name="T:RAWSimO.Core.Control.Defaults.TaskAllocation.ConstantRatioBotManager">
            <summary>
            A task allocation controller that aims to simply balance the robots across the stations.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.TaskAllocation.ConstantRatioBotManager.#ctor(RAWSimO.Core.Instance)">
            <summary>
            Creates a new instance of this controller.
            </summary>
            <param name="instance">The instance this controller belongs to.</param>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.TaskAllocation.ConstantRatioBotManager._config">
            <summary>
            The configuration.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.TaskAllocation.ConstantRatioBotManager._lastAllocationUpdate">
            <summary>
            The last update of the robot allocation.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.TaskAllocation.ConstantRatioBotManager._botStations">
            <summary>
            Contains all bot to station allocations.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.TaskAllocation.ConstantRatioBotManager._stationBots">
            <summary>
            The bots per station.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.TaskAllocation.ConstantRatioBotManager._stations">
            <summary>
            All stations.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.TaskAllocation.ConstantRatioBotManager._lastActiveStations">
            <summary>
            Stores the stations that were active during the last update (to avoid unnecessary updates).
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.TaskAllocation.ConstantRatioBotManager._unassignedBots">
            <summary>
            All currently unemployed bots. Should only contain bots at start.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.TaskAllocation.ConstantRatioBotManager.GetAssignedBotCount(RAWSimO.Core.Geometrics.Circle)">
            <summary>
            Gets the number of bots currently assigned to the given station.
            </summary>
            <param name="station">The station.</param>
            <returns>The number of robots assigned to the station.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.TaskAllocation.ConstantRatioBotManager.UpdateRobotAllocation(System.Boolean)">
            <summary>
            Updates the allocation of robots to station, if stations became active or inactive in the meantime.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.TaskAllocation.ConstantRatioBotManager.GetNextTask(RAWSimO.Core.Elements.Bot)">
            <summary>
            Gets the next task for the specified bot.
            </summary>
            <param name="bot">The bot to get a task for.</param>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.TaskAllocation.ConstantRatioBotManager.GetNextEventTime(System.Double)">
            <summary>
            The next event when this element has to be updated.
            </summary>
            <param name="currentTime">The current time of the simulation.</param>
            <returns>The next time this element has to be updated.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.TaskAllocation.ConstantRatioBotManager.Update(System.Double,System.Double)">
            <summary>
            Updates the element to the specified time.
            </summary>
            <param name="lastTime">The time before the update.</param>
            <param name="currentTime">The time to update to.</param>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.TaskAllocation.ConstantRatioBotManager.SignalCurrentTime(System.Double)">
            <summary>
            Signals the current time to the mechanism. The mechanism can decide to block the simulation thread in order consume remaining real-time.
            </summary>
            <param name="currentTime">The current simulation time.</param>
        </member>
        <member name="T:RAWSimO.Core.Control.Defaults.TaskAllocation.RandomBotManager">
            <summary>
            Implements a manager randomly assigning tasks to the robots.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.TaskAllocation.RandomBotManager.#ctor(RAWSimO.Core.Instance)">
            <summary>
            Creates a new instance of this manager.
            </summary>
            <param name="instance">The instance this manager belongs to.</param>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.TaskAllocation.RandomBotManager.GetNextTask(RAWSimO.Core.Elements.Bot)">
            <summary>
            Main decision routine that determines the next task the bot will do.
            </summary>
            <param name="bot">The bot to assign a task to.</param>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.TaskAllocation.RandomBotManager.GetNextEventTime(System.Double)">
            <summary>
            The next event when this element has to be updated.
            </summary>
            <param name="currentTime">The current time of the simulation.</param>
            <returns>The next time this element has to be updated.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.TaskAllocation.RandomBotManager.Update(System.Double,System.Double)">
            <summary>
            Updates the element to the specified time.
            </summary>
            <param name="lastTime">The time before the update.</param>
            <param name="currentTime">The time to update to.</param>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.TaskAllocation.RandomBotManager.SignalCurrentTime(System.Double)">
            <summary>
            Signals the current time to the mechanism. The mechanism can decide to block the simulation thread in order consume remaining real-time.
            </summary>
            <param name="currentTime">The current simulation time.</param>
        </member>
        <member name="T:RAWSimO.Core.Control.Defaults.TaskAllocation.SwarmBotManager">
            <summary>
            Implements a manager that uses swarm intelligence based devision of labor techniques to assign jobs to the robots.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.TaskAllocation.SwarmBotManager._threshold">
            Threshold for Threshold formula
        </member>
        <member name="F:RAWSimO.Core.Control.Defaults.TaskAllocation.SwarmBotManager.numberOfFullStations">
            <summary>
            Number of Stations where are enough Robots
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.TaskAllocation.SwarmBotManager.#ctor(RAWSimO.Core.Instance)">
            <summary>
            Creates a new instance of this manager.
            </summary>
            <param name="instance">The instance this manager belongs to.</param>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.TaskAllocation.SwarmBotManager.#ctor(RAWSimO.Core.Instance,System.Int32)">
            <summary>
            Creates a new instance of this manager.
            </summary>
            <param name="instance">The instance this manager belongs to.</param>
            <param name="seed">The seed to use.</param>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.TaskAllocation.SwarmBotManager.GetNextTask(RAWSimO.Core.Elements.Bot)">
            <summary>
            Main decision routine that determines the next task the bot will do.
            </summary>
            <param name="bot">The bot to assign a task to.</param>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.TaskAllocation.SwarmBotManager.GetProbabiltyPerStation(RAWSimO.Core.Elements.Bot)">
            <summary>
            gets each Probabilty per Station for the spezific bot
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.TaskAllocation.SwarmBotManager.CalculateStation(System.Collections.Generic.Dictionary{System.Object,System.Double})">
            <summary>
            chooses a Station by the probability in the dictionary
            </summary>
            <param name="probabilityPerStation">Dictionary with probabilityvalue(not in percentage) for each Station</param>
            <returns>the chosen station</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.TaskAllocation.SwarmBotManager.RefreshStimuliPerStation">
            <summary>
            calculates the probability for each Station by the use of Threshold Model
            </summary>
            <returns>Dictionary for the Values for each Station</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.TaskAllocation.SwarmBotManager.GetDistance(RAWSimO.Core.Elements.Bot,System.Object)">
            <summary>
            return the Distance between the bot and the station
            </summary>
            TODO Change the way to calculate Distance by different Tiers
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.TaskAllocation.SwarmBotManager.GetNextEventTime(System.Double)">
            <summary>
            The next event when this element has to be updated.
            </summary>
            <param name="currentTime">The current time of the simulation.</param>
            <returns>The next time this element has to be updated.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.TaskAllocation.SwarmBotManager.Update(System.Double,System.Double)">
            <summary>
            Updates the element to the specified time.
            </summary>
            <param name="lastTime">The time before the update.</param>
            <param name="currentTime">The time to update to.</param>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.TaskAllocation.SwarmBotManager.SignalCurrentTime(System.Double)">
            <summary>
            Signals the current time to the mechanism. The mechanism can decide to block the simulation thread in order consume remaining real-time.
            </summary>
            <param name="currentTime">The current simulation time.</param>
        </member>
        <member name="T:RAWSimO.Core.Control.Defaults.TaskAllocation.BotToStationMatch">
            <summary>
            Helper class to store Matched Bots
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.TaskAllocation.BotToStationMatch.TryGetStationFromBot(RAWSimO.Core.Elements.Bot,System.Object@)">
            <summary>
            Returns the station of the given Bot
            </summary>
            <param name="bot">The Bot for which the station should be returned</param>
            <param name="station"></param>
            <returns>True if a Station was found, false if not</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.TaskAllocation.BotToStationMatch.BotHasMatchedStation(RAWSimO.Core.Elements.Bot)">
            <summary>
            Returns whether the Bot has a Station or not
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.TaskAllocation.BotToStationMatch.RemoveMatch(RAWSimO.Core.Elements.Bot)">
            <summary>
            Removes a Match from a Bot to a Station
            </summary>
            <param name="bot"></param>
        </member>
        <member name="M:RAWSimO.Core.Control.Defaults.TaskAllocation.BotToStationMatch.AddMatch(RAWSimO.Core.Elements.Bot,System.Object)">
            <summary>
             Adds a Match from a Bot to a Station
            </summary>
            <param name="bot"></param>
            <param name="station"></param>
        </member>
        <member name="T:RAWSimO.Core.Control.ItemStorageManager">
            <summary>
            The base class of all mechanisms deciding the pod when storing a bundle.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.ItemStorageManager.#ctor(RAWSimO.Core.Instance)">
            <summary>
            Creates a new instance of the manager.
            </summary>
            <param name="instance">The instance this manager belongs to.</param>
        </member>
        <member name="P:RAWSimO.Core.Control.ItemStorageManager.Instance">
            <summary>
            The instance this manager is assigned to.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.ItemStorageManager._pendingBundles">
            <summary>
            All not yet assigned bundles.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.ItemStorageManager._bufferedBundles">
            <summary>
            All decided but not yet allocated bundles.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.ItemStorageManager._bufferedBundlesTimes">
            <summary>
            The last times at which bundles were buffered for the specific pods.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Control.ItemStorageManager.SituationInvestigated">
            <summary>
            Indicates that new storage, that wasn't investigated previously, is available.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.ItemStorageManager.DecideAboutPendingBundles">
            <summary>
            This is called to decide about potentially pending bundles.
            This method is being timed for statistical purposes and is also ONLY called when <code>SituationInvestigated</code> is <code>false</code>.
            Hence, set the field accordingly to react on events not tracked by this outer skeleton.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.ItemStorageManager.GetStorageBufferThreshold(RAWSimO.Core.Elements.Pod)">
            <summary>
            Retrieves the threshold value above which buffered decisions for that respective pod are submitted to the system.
            </summary>
            <param name="pod">The pod to get the threshold value for.</param>
            <returns>The threshold value above which buffered decisions are submitted. Use 0 to immediately submit decisions.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.ItemStorageManager.GetStorageBufferTimeout(RAWSimO.Core.Elements.Pod)">
            <summary>
            Retrieves the time after which buffered bundles will be allocated even if they do not meet the threshold criterion.
            </summary>
            <param name="pod">The pod to get the timeout value for.</param>
            <returns>The buffer timeout.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.ItemStorageManager.SelectPodForInititalInventory(RAWSimO.Core.Instance,RAWSimO.Core.Items.ItemBundle)">
            <summary>
            Selects a pod for a bundle generated during initialization.
            </summary>
            <param name="instance">The active instance.</param>
            <param name="bundle">The bundle to assign to a pod.</param>
            <returns>The selected pod.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.ItemStorageManager.AddToReadyList(RAWSimO.Core.Items.ItemBundle,RAWSimO.Core.Elements.Pod)">
            <summary>
            Adds the transaction to the ready list.
            </summary>
            <param name="bundle">The bundle that is going to be transferred.</param>
            <param name="pod">The pod the bundle is transferred to.</param>
        </member>
        <member name="M:RAWSimO.Core.Control.ItemStorageManager.GetLastBufferingTime(RAWSimO.Core.Elements.Pod)">
            <summary>
            Returns the last time a bundle was buffered for the given pod.
            </summary>
            <param name="pod">The pod to check.</param>
            <returns>The last time a bundle was buffered for the pod or max-value, if no buffering happened lately for the pod.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.ItemStorageManager.IsAboveRefillThreshold(RAWSimO.Core.Elements.Pod)">
            <summary>
            Checks whether the given pod is ready for refill or has to be buffered some more.
            </summary>
            <param name="pod">The pod to check.</param>
            <returns><code>true</code> if the pod is ready to be refilled, <code>false</code> otherwise.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.ItemStorageManager.IsAboveRefillThreshold(RAWSimO.Core.Elements.Pod,RAWSimO.Core.Items.ItemBundle)">
            <summary>
            Checks whether the given pod is ready for refill or has to be buffered some more.
            </summary>
            <param name="pod">The pod to check.</param>
            <param name="newBundle">The additional bundle to take into account.</param>
            <returns><code>true</code> if the pod is ready to be refilled, <code>false</code> otherwise.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.ItemStorageManager.SubmitBufferedBundles">
            <summary>
            Submits all decisions about buffered pods above their buffer threshold to the system.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.ItemStorageManager.SignalBundleStored(RAWSimO.Core.Elements.InputStation,RAWSimO.Core.Elements.Bot,RAWSimO.Core.Elements.Pod,RAWSimO.Core.Items.ItemBundle)">
            <summary>
            A callback for a newly stored bundle.
            </summary>
            <param name="station">The station at which the bundle was handled.</param>
            <param name="bot">The robot that conducted the task.</param>
            <param name="pod">The pod.</param>
            <param name="bundle">The bundle.</param>
        </member>
        <member name="M:RAWSimO.Core.Control.ItemStorageManager.SignalNewBundle(RAWSimO.Core.Items.ItemBundle)">
            <summary>
            Signals the manager that a new bundle is available.
            </summary>
            <param name="bundle">The new bundle.</param>
        </member>
        <member name="M:RAWSimO.Core.Control.ItemStorageManager.SignalItemExtracted(RAWSimO.Core.Elements.Pod,RAWSimO.Core.Items.ItemDescription)">
            <summary>
            Signals the manager that an item was removed from the pod.
            </summary>
            <param name="item">The item that was extracted.</param>
            <param name="pod">The pod the item was stored in.</param>
        </member>
        <member name="M:RAWSimO.Core.Control.ItemStorageManager.GetNextEventTime(System.Double)">
            <summary>
            The next event when this element has to be updated.
            </summary>
            <param name="currentTime">The current time of the simulation.</param>
            <returns>The next time this element has to be updated.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.ItemStorageManager.Update(System.Double,System.Double)">
            <summary>
            Updates the element to the specified time.
            </summary>
            <param name="lastTime">The time before the update.</param>
            <param name="currentTime">The time to update to.</param>
        </member>
        <member name="M:RAWSimO.Core.Control.ItemStorageManager.SignalCurrentTime(System.Double)">
            <summary>
            Signals the current time to the mechanism. The mechanism can decide to block the simulation thread in order consume remaining real-time.
            </summary>
            <param name="currentTime">The current simulation time.</param>
        </member>
        <member name="M:RAWSimO.Core.Control.ItemStorageManager.StatFinish">
            <summary>
            The callback that indicates that the simulation is finished and statistics have to submitted to the instance.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.ItemStorageManager.StatReset">
            <summary>
            The callback indicates a reset of the statistics.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Control.MethodManager">
            <summary>
            Defines the basic functionality of a method manager.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.MethodManager.#ctor(RAWSimO.Core.Instance)">
            <summary>
            Creates a new instance of this manager.
            </summary>
            <param name="instance">The instance this manager belongs to.</param>
        </member>
        <member name="P:RAWSimO.Core.Control.MethodManager.Instance">
            <summary>
            The instance this manager is assigned to.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.MethodManager.GetNextEventTime(System.Double)">
            <summary>
            The next event when this element has to be updated.
            </summary>
            <param name="currentTime">The current time of the simulation.</param>
            <returns>The next time this element has to be updated.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.MethodManager.Update(System.Double,System.Double)">
            <summary>
            Updates the element to the specified time.
            </summary>
            <param name="lastTime">The time before the update.</param>
            <param name="currentTime">The time to update to.</param>
        </member>
        <member name="M:RAWSimO.Core.Control.MethodManager.StatFinish">
            <summary>
            The callback that indicates that the simulation is finished and statistics have to submitted to the instance.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.MethodManager.StatReset">
            <summary>
            The callback indicates a reset of the statistics.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Control.OrderManager">
            <summary>
            Implements the core order manager functionality.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.OrderManager.#ctor(RAWSimO.Core.Instance)">
            <summary>
            Creates a new order manager.
            </summary>
            <param name="instance">The instance this order manager belongs to.</param>
        </member>
        <member name="P:RAWSimO.Core.Control.OrderManager.Instance">
            <summary>
            The instance this manager is assigned to.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.OrderManager._pendingOrders">
            <summary>
            All not yet decided orders.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Control.OrderManager.SituationInvestigated">
            <summary>
            Indicates that the current situation has already been investigated. So that it will be ignored.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.OrderManager.AllocateOrder(RAWSimO.Core.Items.Order,RAWSimO.Core.Elements.OutputStation)">
            <summary>
            Immediately submits the order to the station.
            </summary>
            <param name="order">The order that is going to be allocated.</param>
            <param name="station">The station the order is assigned to.</param>
        </member>
        <member name="M:RAWSimO.Core.Control.OrderManager.GetPendingAvailableStockOrders">
            <summary>
            Gets all pending orders that are fulfillable by their actually available stock.
            </summary>
            <returns>An array of pending orders.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.OrderManager.GetPendingAvailableStockOrders(System.Int32)">
            <summary>
            Gets all pending orders that are fulfillable by their actually available stock.
            </summary>
            <param name="maxValue">The max amount of orders to take</param>
            <returns>A hash-set of pending orders.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.OrderManager.SignalOrderAllocated(RAWSimO.Core.Items.Order,RAWSimO.Core.Elements.OutputStation)">
            <summary>
            Signals the manager that the order was submitted to the system.
            </summary>
            <param name="order">The order that was allocated.</param>
            <param name="station">The station this order was allocated to.</param>
        </member>
        <member name="M:RAWSimO.Core.Control.OrderManager.SignalOrderFinished(RAWSimO.Core.Items.Order,RAWSimO.Core.Elements.OutputStation)">
            <summary>
            Signals the manager that the given order was completed.
            </summary>
            <param name="order">The order that was completed.</param>
            <param name="station">The station at which the order was completed.</param>
        </member>
        <member name="M:RAWSimO.Core.Control.OrderManager.SignalNewOrderAvailable(RAWSimO.Core.Items.Order)">
            <summary>
            Signals the manager that the order was submitted to the system.
            </summary>
            <param name="order">The order that was allocated.</param>
        </member>
        <member name="M:RAWSimO.Core.Control.OrderManager.SignalBundleStored(RAWSimO.Core.Elements.InputStation,RAWSimO.Core.Elements.Bot,RAWSimO.Core.Elements.Pod,RAWSimO.Core.Items.ItemBundle)">
            <summary>
            Signals the manager that the bundle was placed on the pod.
            </summary>
            <param name="bundle">The bundle that was stored.</param>
            <param name="station">The station the bundle was assigned to.</param>
            <param name="pod">The pod the bundle is stored in.</param>
            <param name="bot">The bot that fetched the bundle.</param>
        </member>
        <member name="M:RAWSimO.Core.Control.OrderManager.SignalStationActivated(RAWSimO.Core.Elements.OutputStation)">
            <summary>
            Signals the manager that a station that was previously not in use can now be assigned orders.
            </summary>
            <param name="station">The newly activated station.</param>
        </member>
        <member name="M:RAWSimO.Core.Control.OrderManager.DecideAboutPendingOrders">
            <summary>
            This is called to decide about potentially pending orders.
            This method is being timed for statistical purposes and is also ONLY called when <code>SituationInvestigated</code> is <code>false</code>.
            Hence, set the field accordingly to react on events not tracked by this outer skeleton.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.OrderManager.GetNextEventTime(System.Double)">
            <summary>
            The next event when this element has to be updated.
            </summary>
            <param name="currentTime">The current time of the simulation.</param>
            <returns>The next time this element has to be updated.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.OrderManager.Update(System.Double,System.Double)">
            <summary>
            Updates the element to the specified time.
            </summary>
            <param name="lastTime">The time before the update.</param>
            <param name="currentTime">The time to update to.</param>
        </member>
        <member name="M:RAWSimO.Core.Control.OrderManager.SignalCurrentTime(System.Double)">
            <summary>
            Signals the current time to the mechanism. The mechanism can decide to block the simulation thread in order consume remaining real-time.
            </summary>
            <param name="currentTime">The current simulation time.</param>
        </member>
        <member name="M:RAWSimO.Core.Control.OrderManager.StatFinish">
            <summary>
            The callback that indicates that the simulation is finished and statistics have to submitted to the instance.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.OrderManager.StatReset">
            <summary>
            The callback indicates a reset of the statistics.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Control.PathManager">
            <summary>
            The path manager implementation.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.PathManager.Log">
            <summary>
            path finding optimizer
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Control.PathManager.StatDataPoints">
            <summary>
            Gets or sets the data points.
            </summary>
            <value>
            The data points.
            </value>
        </member>
        <member name="F:RAWSimO.Core.Control.PathManager.PathFinder">
            <summary>
            path finding optimizer
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.PathManager.Instance">
            <summary>
            current instance
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.PathManager._waypointIds">
            <summary>
            ids of the way points
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.PathManager._elevatorIds">
            <summary>
            ids of the elevators
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.PathManager._nodeMetaInfo">
            <summary>
            Contains meta information about the nodes that is passed to the path planning engine.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.PathManager._queueManagers">
            <summary>
            The queue managers
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.PathManager._reservationTable">
            <summary>
            The reservation table
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.PathManager._reservations">
            <summary>
            The reservations
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.PathManager._stopWatch">
            <summary>
            The stop watch
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.PathManager._lastCallTimeStamp">
            <summary>
            The time stamp of the last optimization call
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.PathManager.#ctor(RAWSimO.Core.Instance)">
            <summary>
            Initializes a new instance of the <see cref="T:RAWSimO.Core.Control.PathManager"/> class.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.PathManager.GenerateGraph">
            <summary>
            convert way point graph -> graph for multi agent path finding
            </summary>
            <returns>The generated graph.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.PathManager.UpdateLocksAndObstacles">
            <summary>
            Updates all lock and obstacle information for all connections.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.PathManager._reoptimize(System.Double)">
            <summary>
            optimize path
            </summary>
            <param name="currentTime">The current time.</param>
        </member>
        <member name="M:RAWSimO.Core.Control.PathManager._statStart(System.Double)">
            <summary>
            start the statistical output.
            </summary>
            <param name="currentTime">The current time.</param>
        </member>
        <member name="M:RAWSimO.Core.Control.PathManager._statEnd(System.Double)">
            <summary>
            end the statistical output.
            </summary>
            <param name="currentTime">The current time.</param>
        </member>
        <member name="M:RAWSimO.Core.Control.PathManager.getBotAgentDictionary(System.Collections.Generic.Dictionary{RAWSimO.Core.Bots.BotNormal,RAWSimO.MultiAgentPathFinding.Elements.Agent}@,System.Double)">
            <summary>
            create Agents from bot positions and destinations
            </summary>
            <returns>agents</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.PathManager.GetWaypointByNodeId(System.Int32)">
            <summary>
            Gets the way point by node identifier.
            </summary>
            <param name="node">The node.</param>
            <returns></returns>
        </member>
        <member name="M:RAWSimO.Core.Control.PathManager.GetNodeIdByWaypoint(RAWSimO.Core.Waypoints.Waypoint)">
            <summary>
            Gets the way point by node identifier.
            </summary>
            <param name="waypoint">The node.</param>
            <returns>The id of the node.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.PathManager.GetNextEventTime(System.Double)">
            <summary>
            The next event when this element has to be updated.
            </summary>
            <param name="currentTime">The current time of the simulation.</param>
            <returns>The next time this element has to be updated.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.PathManager.Update(System.Double,System.Double)">
            <summary>
            Updates the specified last time.
            </summary>
            <param name="lastTime">The last time.</param>
            <param name="currentTime">The current time.</param>
        </member>
        <member name="M:RAWSimO.Core.Control.PathManager.notifyBotNewDestination(RAWSimO.Core.Bots.BotNormal)">
            <summary>
            Notifies the path manager when the bot has a new destination.
            </summary>
            <param name="bot">The bot.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:RAWSimO.Core.Control.PathManager.RegisterNextWaypoint(RAWSimO.Core.Bots.BotNormal,System.Double,System.Double,System.Double,RAWSimO.Core.Waypoints.Waypoint,RAWSimO.Core.Waypoints.Waypoint)">
            <summary>
            Checks weather the bot can go to the next way point without collisions.
            </summary>
            <param name="botNormal">The bot.</param>
            <param name="currentTime">The current time.</param>
            <param name="waypointStart">The way point start.</param>
            <param name="waypointEnd">The way point end.</param>
            <param name="blockCurrentWaypointUntil">Block duration.</param>
            <param name="rotationDuration">Rotation duration.</param>
            <returns></returns>
        </member>
        <member name="M:RAWSimO.Core.Control.PathManager._initReservationTable">
            <summary>
            Initializes the reservation table.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.PathManager.StatFinish">
            <summary>
            The callback that indicates that the simulation is finished and statistics have to submitted to the instance.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.PathManager.StatReset">
            <summary>
            The callback indicates a reset of the statistics.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.PathManager.FindElevatorSequence(RAWSimO.Core.Bots.BotNormal,RAWSimO.Core.Waypoints.Waypoint,RAWSimO.Core.Waypoints.Waypoint,System.Double@)">
            <summary>
            Finds a sequence of elevators with must be visit to reach the end node.
            </summary>
            <param name="start">The start node.</param>
            <param name="end">The end node.</param>
            <param name="bot">The bot.</param>
            <param name="distance">The distance.</param>
            <returns>
            elevator sequence
            </returns>
        </member>
        <member name="T:RAWSimO.Core.Control.PathManager.QueueManager">
            <summary>
            Manages the path finding for bots in the queue
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.PathManager.QueueManager.QueueWaypoint">
            <summary>
            The queue way point
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.PathManager.QueueManager.Queue">
            <summary>
            The queue
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.PathManager.QueueManager.LockedWaypoints">
            <summary>
            The locked way points
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.PathManager.QueueManager._queueWaypointIndices">
            <summary>
            The indices regarding this queue of the managed waypoints.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.PathManager.QueueManager._managedBots">
            <summary>
            The bots that are want to reach the way point at the beginning of the queue.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.PathManager.QueueManager._botsInQueue">
            <summary>
            The bots that are want to reach the queue way point and already reached the queue.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.PathManager.QueueManager._placeInQueue">
            <summary>
            The assigned place in queue
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.PathManager.QueueManager._queueCruisePaths">
            <summary>
            Contains the destination of robots that are cruising along the queue (no new paths will be planned for them until they arrive).
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.PathManager.QueueManager._queueNodeTree">
            <summary>
            Contains all queue nodes acessible in a fast way.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.PathManager.QueueManager._queueAreaXMin">
            <summary>
            A loosely defined left border of the managed area.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.PathManager.QueueManager._queueAreaXMax">
            <summary>
            A loosely defined right border of the managed area.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.PathManager.QueueManager._queueAreaYMin">
            <summary>
            A loosely defined lower border of the managed area.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.PathManager.QueueManager._queueAreaYMax">
            <summary>
            A loosely defined upper border of the managed area.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.PathManager.QueueManager._maxEdgeLength">
            <summary>
            The maximum length of alle edges that have to be respected by the queue manager for identifying locking bots.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.PathManager.QueueManager._pathManager">
            <summary>
            The path manager
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.PathManager.QueueManager.#ctor(RAWSimO.Core.Waypoints.Waypoint,System.Collections.Generic.List{RAWSimO.Core.Waypoints.Waypoint},RAWSimO.Core.Control.PathManager)">
            <summary>
            Initializes a new instance of the <see cref="T:RAWSimO.Core.Control.PathManager.QueueManager"/> class.
            </summary>
            <param name="queueWaypoint">The queue way point.</param>
            <param name="queue">The queue.</param>
            <param name="pathManager">The path manager.</param>
        </member>
        <member name="M:RAWSimO.Core.Control.PathManager.QueueManager.GetNearestQueueWaypoint(System.Double,System.Double)">
            <summary>
            Returns the waypoint nearest to the given coordinate.
            </summary>
            <param name="x">The x-value of the coordinate.</param>
            <param name="y">The y-value of the coordinate.</param>
            <returns>The nearest waypoint of the queue.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.PathManager.QueueManager.Update">
            <summary>
            Updates this instance.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.PathManager.QueueManager.getPlaceInQueue(RAWSimO.Core.Bots.BotNormal)">
            <summary>
            Gets the place in queue.
            </summary>
            <param name="bot">The bot.</param>
            <returns></returns>
        </member>
        <member name="M:RAWSimO.Core.Control.PathManager.QueueManager.onBotJoinQueue(RAWSimO.Core.Bots.BotNormal)">
            <summary>
            Ons the bot join queue.
            </summary>
            <param name="bot">The bot.</param>
        </member>
        <member name="T:RAWSimO.Core.Control.PodStorageManager">
            <summary>
            The base class of all mechanisms deciding the position when storing a pod.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.PodStorageManager.#ctor(RAWSimO.Core.Instance)">
            <summary>
            Creates a new instance of this manager.
            </summary>
            <param name="instance">The instance this manager belongs to.</param>
        </member>
        <member name="P:RAWSimO.Core.Control.PodStorageManager.Instance">
            <summary>
            The instance this manager is assigned to.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.PodStorageManager.GetStorageLocationForPod(RAWSimO.Core.Elements.Pod)">
            <summary>
            Decides the waypoint to use when storing a pod. This call is measured by the timing done.
            </summary>
            <param name="pod">The pod to store.</param>
            <returns>The waypoint to use.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.PodStorageManager.GetStorageLocation(RAWSimO.Core.Elements.Pod)">
            <summary>
            Determines the storage location for the given pod.
            </summary>
            <param name="pod">The pod.</param>
            <returns>The storage location to use.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.PodStorageManager.GetNextEventTime(System.Double)">
            <summary>
            The next event when this element has to be updated.
            </summary>
            <param name="currentTime">The current time of the simulation.</param>
            <returns>The next time this element has to be updated.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.PodStorageManager.Update(System.Double,System.Double)">
            <summary>
            Updates the element to the specified time.
            </summary>
            <param name="lastTime">The time before the update.</param>
            <param name="currentTime">The time to update to.</param>
        </member>
        <member name="M:RAWSimO.Core.Control.PodStorageManager.SignalCurrentTime(System.Double)">
            <summary>
            Signals the current time to the mechanism. The mechanism can decide to block the simulation thread in order consume remaining real-time.
            </summary>
            <param name="currentTime">The current simulation time.</param>
        </member>
        <member name="M:RAWSimO.Core.Control.PodStorageManager.StatFinish">
            <summary>
            The callback that indicates that the simulation is finished and statistics have to submitted to the instance.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.PodStorageManager.StatReset">
            <summary>
            The callback indicates a reset of the statistics.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Control.RepositioningManager">
            <summary>
            The base manager for creating all repositioning moves.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.RepositioningManager.#ctor(RAWSimO.Core.Instance)">
            <summary>
            Creates a new instance of this manager.
            </summary>
            <param name="instance">The instance this manager belongs to.</param>
        </member>
        <member name="P:RAWSimO.Core.Control.RepositioningManager.Instance">
            <summary>
            The instance this manager is assigned to.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.RepositioningManager.InitTimeouts">
            <summary>
            Inits this controller.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Control.RepositioningManager.GlobalTimeout">
            <summary>
            A global timeout for the repositioning manager.
            This can be set to an arbitrary time in the (simulation time) future until which calls to the repositioning manager are blocked to safe computational ressources.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.RepositioningManager.REQUEST_TIMEOUT">
            <summary>
            The minimal simulation time between two requests for a bot.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.RepositioningManager._botTimeouts">
            <summary>
            Manages timeouts for the bots. If a bot is affected by a timeout all requests for a repositioning move for this bot will be ignored.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.RepositioningManager.SetTimeout(RAWSimO.Core.Elements.Bot,System.Double)">
            <summary>
            Sets a timeout for a bot. No requests will be handled for the bot until the simulation time passed the timeout timestamp.
            </summary>
            <param name="bot">The bot to timeout.</param>
            <param name="timeout">The time until the bot will be timed out.</param>
        </member>
        <member name="M:RAWSimO.Core.Control.RepositioningManager.GetRepositioningMove(RAWSimO.Core.Elements.Bot)">
            <summary>
            Decides the next repositioning move to do for the given robot.
            </summary>
            <param name="robot">The robot that is asking to conduct such a move.</param>
            <returns>A repositioning move or <code>null</code> if no such move was available.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.RepositioningManager.GetNextMove(RAWSimO.Core.Elements.Bot)">
            <summary>
            Gets the next repositioning move to do, if available.
            </summary>
            <param name="robot">The robot that is asking for a repositioning move to do.</param>
            <returns>The repositioning move to do or <code>null</code> if no such move was available.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.RepositioningManager.GetNextEventTime(System.Double)">
            <summary>
            The next event when this element has to be updated.
            </summary>
            <param name="currentTime">The current time of the simulation.</param>
            <returns>The next time this element has to be updated.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.RepositioningManager.Update(System.Double,System.Double)">
            <summary>
            Updates the element to the specified time.
            </summary>
            <param name="lastTime">The time before the update.</param>
            <param name="currentTime">The time to update to.</param>
        </member>
        <member name="M:RAWSimO.Core.Control.RepositioningManager.SignalCurrentTime(System.Double)">
            <summary>
            Signals the current time to the mechanism. The mechanism can decide to block the simulation thread in order consume remaining real-time.
            </summary>
            <param name="currentTime">The current simulation time.</param>
        </member>
        <member name="M:RAWSimO.Core.Control.RepositioningManager.StatFinish">
            <summary>
            The callback that indicates that the simulation is finished and statistics have to submitted to the instance.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.RepositioningManager.StatReset">
            <summary>
            The callback indicates a reset of the statistics.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Control.RepositioningManager.RepositioningMove">
            <summary>
            Declares a single repositioning operation.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.RepositioningManager.RepositioningMove.Pod">
            <summary>
            The pod to move to a new storage location.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.RepositioningManager.RepositioningMove.StorageLocation">
            <summary>
            The storage location to move the pod to.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Control.Shared.FixedPodStorageLocationClassRule">
            <summary>
            Indicates the rule to use to divide storage locations into classes for Fixed based mechanisms.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Shared.FixedPodStorageLocationClassRule.OutputStationDistanceEuclidean">
            <summary>
            Storage locations are assigned to classes by their euclidean distance to the next output station.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Shared.FixedPodStorageLocationClassRule.OutputStationDistanceManhattan">
            <summary>
            Storage locations are assigned to classes by their manhattan distance to the next output station.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Shared.FixedPodStorageLocationClassRule.OutputStationDistanceShortestPath">
            <summary>
            Storage locations are assigned to classes by the distance of the shortest path to the next output station.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Shared.FixedPodStorageLocationClassRule.OutputStationDistanceShortestTime">
            <summary>
            Storage locations are assigned to classes by the time of the most time-efficient path to the next output station.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Control.Shared.FixedPodStorageLocationDisposeRule">
            <summary>
            Decides which storage location of the given class will be used when there are more than one options.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Shared.FixedPodStorageLocationDisposeRule.NearestEuclid">
            <summary>
            Uses the nearest (euclidean distance) free storage location of the class.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Shared.FixedPodStorageLocationDisposeRule.NearestManhattan">
            <summary>
            Uses the nearest (manhattan distance) free storage location of the class.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Shared.FixedPodStorageLocationDisposeRule.NearestShortestPath">
            <summary>
            Uses the nearest (shortest path by A*) free storage location of the class.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Shared.FixedPodStorageLocationDisposeRule.NearestShortestTime">
            <summary>
            Uses the nearest (most time-efficient path by A*) free storage location of the class.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Shared.FixedPodStorageLocationDisposeRule.OStationNearestEuclid">
            <summary>
            Uses the free storage location of the class nearest (euclidean distance) to an output station.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Shared.FixedPodStorageLocationDisposeRule.OStationNearestManhattan">
            <summary>
            Uses the free storage location of the class nearest (manhattan distance) to an output station.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Shared.FixedPodStorageLocationDisposeRule.OStationNearestShortestPath">
            <summary>
            Uses the free storage location of the class nearest (shortest path) to an output station.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Shared.FixedPodStorageLocationDisposeRule.OStationNearestShortestTime">
            <summary>
            Uses the free storage location of the class nearest (most time-efficient path) to an output station.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Shared.FixedPodStorageLocationDisposeRule.Random">
            <summary>
            Uses a random free storage location of the class.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Control.Shared.FixedClassBuilder">
            <summary>
            This class enables management of pods and storage locations in a class based way.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Shared.FixedClassBuilder.#ctor(RAWSimO.Core.Instance)">
            <summary>
            Initializes this class manager.
            </summary>
            <param name="instance">The active instance.</param>
        </member>
        <member name="M:RAWSimO.Core.Control.Shared.FixedClassBuilder.ParseConfigAndEnsureCompatibility(System.Double[],System.Double,System.Int32)">
            <summary>
            Sets the given class borders or checks their compatibility if there are already class borders present.
            </summary>
            <param name="classBorders">The class borders to use.</param>
            <param name="reallocationDelay">The delay in simulation time after which a reallocation is done according to the currently measured situation.</param>
            <param name="reallocationOrderCount">The number of orders after which a reallocation is done according to the currently measured situation.</param>
        </member>
        <member name="P:RAWSimO.Core.Control.Shared.FixedClassBuilder.Instance">
            <summary>
            The instance this manager belongs to.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Control.Shared.FixedClassBuilder.BundleStorageManager">
            <summary>
            The bundle storage manager associated with this class manager.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Control.Shared.FixedClassBuilder.PodStorageManager">
            <summary>
            The pod storage manager associated with this class manager.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Shared.FixedClassBuilder._initialized">
            <summary>
            Indicates whether this manager was initialized.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Shared.FixedClassBuilder._classCount">
            <summary>
            The number of classes this class-based storage manager works with.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Shared.FixedClassBuilder._classBorders">
            <summary>
            The bounds of the classes in terms of relative item frequencies.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Shared.FixedClassBuilder._storageLocationClassRule">
            <summary>
            The rule used to assign the storage locations to the different classes.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Shared.FixedClassBuilder._reallocationDelay">
            <summary>
            The delay in simulation time after which a reallocation takes place.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Shared.FixedClassBuilder._reallocationOrderCount">
            <summary>
            The number of orders after which a reallocation takes place.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Shared.FixedClassBuilder._classStoragePods">
            <summary>
            The actual pods serving for the different classes.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Shared.FixedClassBuilder._classStorageLocations">
            <summary>
            The actual storage locations serving for the different classes.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Shared.FixedClassBuilder._podClasses">
            <summary>
            The classes of all pods.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Shared.FixedClassBuilder._itemClasses">
            <summary>
            The classes of all item-descriptions.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Shared.FixedClassBuilder._podsOrdered">
            <summary>
            The pods in a frequency sorted manner.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Shared.FixedClassBuilder._storageLocationsOrdered">
            <summary>
            The storage locations in a distance sorted manner.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Shared.FixedClassBuilder._itemDescriptionsOrdered">
            <summary>
            The item-descriptions in a frequency sorted manner.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Shared.FixedClassBuilder._itemDescriptionsFixed">
            <summary>
            The item-descriptions in a frequency sorted manner.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Shared.FixedClassBuilder._lastReallocation">
            <summary>
            The last time the storage classes were restructured to fit the current demand.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Shared.FixedClassBuilder._orderCountOfPeriod">
            <summary>
            The number of orders since the last reallocation.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Control.Shared.FixedClassBuilder.ClassCount">
            <summary>
            Returns the number of classes.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Shared.FixedClassBuilder.DetermineStorageClass(RAWSimO.Core.Items.ItemBundle)">
            <summary>
            Returns the class to use for the given bundle.
            </summary>
            <param name="bundle">The bundle to find the fitting class for.</param>
            <returns>The class of the given bundle.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.Shared.FixedClassBuilder.DetermineStorageClass(RAWSimO.Core.Elements.Pod)">
            <summary>
            Returns the class to use for the given pod.
            </summary>
            <param name="pod">The pod.</param>
            <returns>The class to use for storing the pod.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.Shared.FixedClassBuilder.GetClassPods(System.Int32)">
            <summary>
            Returns all storage pods belonging to the specified class.
            </summary>
            <param name="storageClass">The storage class.</param>
            <returns>All pods belonging to the specified class.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.Shared.FixedClassBuilder.GetClassStorageLocations(System.Int32)">
            <summary>
            Returns all storage locations belonging to the specified class.
            </summary>
            <param name="storageClass">The storage class.</param>
            <returns>All storage locations belonging to the specififed class.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.Shared.FixedClassBuilder.NewOrderCallback(RAWSimO.Core.Items.Order)">
            <summary>
            This is called every time an order is placed.
            </summary>
            <param name="order">The new order that was placed.</param>
        </member>
        <member name="M:RAWSimO.Core.Control.Shared.FixedClassBuilder.ReallocateCallback(System.Double)">
            <summary>
            The callback for checking whether a reallocation is necessary and conducting it if so.
            </summary>
            <param name="currentTime">The current time of the simulation.</param>
        </member>
        <member name="M:RAWSimO.Core.Control.Shared.FixedClassBuilder.EnsureInit">
            <summary>
            Enables late initialization.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Shared.FixedClassBuilder.Init">
            <summary>
            Initializes this manager.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Shared.FixedClassBuilder.ReallocatePods">
            <summary>
            Reallocates the pods to different classes.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Shared.FixedClassBuilder.ReallocateItems">
            <summary>
            Reallocates the items to different classes
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Shared.FixedClassBuilder.GetNextEventTime(System.Double)">
            <summary>
            The next event when this element has to be updated.
            </summary>
            <param name="currentTime">The current time of the simulation.</param>
            <returns>The next time this element has to be updated.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.Shared.FixedClassBuilder.Update(System.Double,System.Double)">
            <summary>
            Updates the element to the specified time.
            </summary>
            <param name="lastTime">The time before the update.</param>
            <param name="currentTime">The time to update to.</param>
        </member>
        <member name="T:RAWSimO.Core.Control.Shared.PodUtilityManager">
            <summary>
            Exposes methods for managing pods and the storage locations they should be placed on by determining their utility.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Shared.PodUtilityManager.#ctor(RAWSimO.Core.Instance)">
            <summary>
            Creates a new instance of this manager.
            </summary>
            <param name="instance">The instance to manage.</param>
        </member>
        <member name="F:RAWSimO.Core.Control.Shared.PodUtilityManager._instance">
            <summary>
            The instance this manager manages.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Shared.PodUtilityManager._config">
            <summary>
            The config to use.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Shared.PodUtilityManager._storageLocationsToUse">
            <summary>
            The number of storage locations that actually shall be used.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Shared.PodUtilityManager._temporaryValuesOutdated">
            <summary>
            Indicates that the temporary values that have been calculated are outdated.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Shared.PodUtilityManager._temporaryPodScores">
            <summary>
            Storage for pod score values.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Shared.PodUtilityManager._temporaryPodScoreIndeces">
            <summary>
            Storage for pod ranks.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Shared.PodUtilityManager.InitOrEnsureInit(RAWSimO.Core.Configurations.PodUtilityConfiguration)">
            <summary>
            Initializes this manager.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Shared.PodUtilityManager.DetermineRank(RAWSimO.Core.Elements.Pod)">
            <summary>
            Determines the prominence rank suitable for the given pod.
            </summary>
            <param name="pod">The pod to get the storage rank for.</param>
            <returns>The storage rank for the given pod.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.Shared.PodUtilityManager.PrepareAllPodRanks">
            <summary>
            Precalculates the rank information for all pods for faster access.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Shared.PodUtilityManager.GetStorageLocation(RAWSimO.Core.Elements.Pod,RAWSimO.Core.Waypoints.Waypoint)">
            <summary>
            Gets the storage location most suitable for the given pod.
            </summary>
            <param name="pod">The pod to get a storage location for.</param>
            <param name="tripStart">The current location of the pod / where the trip starts (to improve the distance traveled).</param>
            <returns>The storage location to use for the given pod.</returns>
        </member>
        <member name="T:RAWSimO.Core.Control.Shared.SharedControlElementsContainer">
            <summary>
            Contains control elements that are shared by multiple control mechanisms.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Shared.SharedControlElementsContainer.#ctor(RAWSimO.Core.Instance)">
            <summary>
            Creates a new shared control elements container.
            </summary>
            <param name="instance">The instance this container belongs to.</param>
        </member>
        <member name="F:RAWSimO.Core.Control.Shared.SharedControlElementsContainer._instance">
            <summary>
            The instance this container belongs to.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Shared.SharedControlElementsContainer._turnoverClassBuilder">
            <summary>
            Class builder for turnover based mechanisms.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Control.Shared.SharedControlElementsContainer.TurnoverClassBuilder">
            <summary>
            Class builder for turnover based mechanisms.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Shared.SharedControlElementsContainer._FixedClassBuilder">
            <summary>
            Class builder for Fixed based mechanisms.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Control.Shared.SharedControlElementsContainer.FixedClassBuilder">
            <summary>
            Class builder for Fixed based mechanisms.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Shared.SharedControlElementsContainer._storagePartitioner">
            <summary>
            Partitions storage locations by different characteristics.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Control.Shared.SharedControlElementsContainer.StoragePartitioner">
            <summary>
            Partitions storage locations by different characteristics.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Shared.SharedControlElementsContainer._podUtilityManager">
            <summary>
            Partitions storage locations by different characteristics.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Control.Shared.SharedControlElementsContainer.PodUtilityManager">
            <summary>
            Partitions storage locations by different characteristics.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Shared.SharedControlElementsContainer.GetNextEventTime(System.Double)">
            <summary>
            The next event when this element has to be updated.
            </summary>
            <param name="currentTime">The current time of the simulation.</param>
            <returns>The next time this element has to be updated.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.Shared.SharedControlElementsContainer.Update(System.Double,System.Double)">
            <summary>
            Updates the element to the specified time.
            </summary>
            <param name="lastTime">The time before the update.</param>
            <param name="currentTime">The time to update to.</param>
        </member>
        <member name="T:RAWSimO.Core.Control.Shared.FastLaneTieBreaker">
            <summary>
            Types for the tie-breakers of fast lane assignment decisions.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Shared.FastLaneTieBreaker.Random">
            <summary>
            Breaks the tie randomly.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Shared.FastLaneTieBreaker.EarliestDueTime">
            <summary>
            Selects the order with the earliest due time.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Shared.FastLaneTieBreaker.FCFS">
            <summary>
            Selects the oldest order.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Control.Shared.OrderSelectionTieBreaker">
            <summary>
            Types of default order selection tie-breakers.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Shared.OrderSelectionTieBreaker.Random">
            <summary>
            Breaks ties randomly.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Shared.OrderSelectionTieBreaker.EarliestDueTime">
            <summary>
            Selects the order with the earliest due time.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Shared.OrderSelectionTieBreaker.FCFS">
            <summary>
            Selects the oldest order.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Control.Shared.ZoneType">
            <summary>
            Distinguishes between different zone types.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Shared.ZoneType.None">
            <summary>
            Does not belong to any particular zone.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Shared.ZoneType.Cache">
            <summary>
            Belongs to an output-stations cache.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Shared.ZoneType.Dropoff">
            <summary>
            Belongs to an output-stations drop-off zone.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Control.Shared.ZonePriority">
            <summary>
            The priority of the different zones-
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Shared.ZonePriority.CacheFirst">
            <summary>
            Cache is created first, hence, best storage locations belong to cache.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Shared.ZonePriority.DropoffFirst">
            <summary>
            Drop-off zone is created first, hence, best storage locations belong to the drop-off zone.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Shared.ZonePriority.CacheDropoffEqual">
            <summary>
            Cache and drop-off are created with equal priority.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Control.Shared.CacheStorageLocationSelectionRule">
            <summary>
            Defines by which distance measure the free storage location is selected. This is superimposed by the decision whether a pod should be stored in cache or not.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Shared.CacheStorageLocationSelectionRule.Euclid">
            <summary>
            Uses the euclidean distance measure to find the next free storage location.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Shared.CacheStorageLocationSelectionRule.Manhattan">
            <summary>
            Uses the manhattan distance measure to find the next free storage location.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Shared.CacheStorageLocationSelectionRule.ShortestPath">
            <summary>
            Uses the shortest path (calculated by A*) to find the next free storage location.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Shared.CacheStorageLocationSelectionRule.ShortestTime">
            <summary>
            Uses the most time-efficient path (calculated by A* with turn costs) to find the next free storage location.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Control.Shared.StoragePartitioner">
            <summary>
            Exposes functionality to partition storage locations into hot zones / caches per station.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Shared.StoragePartitioner.#ctor(RAWSimO.Core.Instance)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="instance">The instance this partitioner belongs to.</param>
        </member>
        <member name="P:RAWSimO.Core.Control.Shared.StoragePartitioner.Instance">
            <summary>
            The instance this manager belongs to.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Shared.StoragePartitioner._config">
            <summary>
            The config to use.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Shared.StoragePartitioner.UnzonedStorageLocations">
            <summary>
            All storage locations not belonging to any zone.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Shared.StoragePartitioner.CachePartitions">
            <summary>
            The cache partitions per station.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Shared.StoragePartitioner.DropoffPartitions">
            <summary>
            The drop-off zones per station.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Shared.StoragePartitioner._currentStorageLocation">
            <summary>
            Current storage location to assess.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Shared.StoragePartitioner._currentStation">
            <summary>
            Current station to assess.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Shared.StoragePartitioner._currentZoneType">
            <summary>
            Current zone type to assess.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Shared.StoragePartitioner.GetCacheValue(RAWSimO.Core.Elements.Pod,RAWSimO.Core.Elements.OutputStation,System.Double,System.Double)">
            <summary>
            Determines the value of the pod for the cache of the station, i.e. the fraction of pods currently stored in the cache that are inferior to the given one.
            </summary>
            <param name="pod">The pod.</param>
            <param name="station">The station the pod is coming from.</param>
            <param name="weightSpeed">The weight for the pod's speed.</param>
            <param name="weightUtility">The weight for the pod's utility.</param>
            <returns>Value of the pod for the cache of the given station.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.Shared.StoragePartitioner.CreateOrEnsureZones(RAWSimO.Core.Configurations.CacheConfiguration)">
            <summary>
            Creates all zones or ensures their consistency between different managers using those.
            </summary>
            <param name="config">The configuration to use for creating the zones.</param>
        </member>
        <member name="T:RAWSimO.Core.Control.Shared.TurnoverPodStorageLocationClassRule">
            <summary>
            Indicates the rule to use to divide storage locations into classes for turnover based mechanisms.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Shared.TurnoverPodStorageLocationClassRule.OutputStationDistanceEuclidean">
            <summary>
            Storage locations are assigned to classes by their euclidean distance to the next output station.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Shared.TurnoverPodStorageLocationClassRule.OutputStationDistanceManhattan">
            <summary>
            Storage locations are assigned to classes by their manhattan distance to the next output station.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Shared.TurnoverPodStorageLocationClassRule.OutputStationDistanceShortestPath">
            <summary>
            Storage locations are assigned to classes by the distance of the shortest path to the next output station.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Shared.TurnoverPodStorageLocationClassRule.OutputStationDistanceShortestTime">
            <summary>
            Storage locations are assigned to classes by the time of the most time-efficient path to the next output station.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Control.Shared.TurnoverPodStorageLocationDisposeRule">
            <summary>
            Decides which storage location of the given class will be used when there are more than one options.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Shared.TurnoverPodStorageLocationDisposeRule.NearestEuclid">
            <summary>
            Uses the nearest (euclidean distance) free storage location of the class.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Shared.TurnoverPodStorageLocationDisposeRule.NearestManhattan">
            <summary>
            Uses the nearest (manhattan distance) free storage location of the class.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Shared.TurnoverPodStorageLocationDisposeRule.NearestShortestPath">
            <summary>
            Uses the nearest (shortest path by A*) free storage location of the class.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Shared.TurnoverPodStorageLocationDisposeRule.NearestShortestTime">
            <summary>
            Uses the nearest (most time-efficient path by A*) free storage location of the class.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Shared.TurnoverPodStorageLocationDisposeRule.OStationNearestEuclid">
            <summary>
            Uses the free storage location of the class nearest (euclidean distance) to an output station.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Shared.TurnoverPodStorageLocationDisposeRule.OStationNearestManhattan">
            <summary>
            Uses the free storage location of the class nearest (manhattan distance) to an output station.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Shared.TurnoverPodStorageLocationDisposeRule.OStationNearestShortestPath">
            <summary>
            Uses the free storage location of the class nearest (shortest path) to an output station.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Shared.TurnoverPodStorageLocationDisposeRule.OStationNearestShortestTime">
            <summary>
            Uses the free storage location of the class nearest (most time-efficient path) to an output station.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Shared.TurnoverPodStorageLocationDisposeRule.Random">
            <summary>
            Uses a random free storage location of the class.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Control.Shared.TurnoverClassBuilder">
            <summary>
            This class enables management of pods and storage locations in a class based way.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Shared.TurnoverClassBuilder.#ctor(RAWSimO.Core.Instance)">
            <summary>
            Initializes this class manager.
            </summary>
            <param name="instance">The active instance.</param>
        </member>
        <member name="M:RAWSimO.Core.Control.Shared.TurnoverClassBuilder.ParseConfigAndEnsureCompatibility(System.Double[],System.Double,System.Int32)">
            <summary>
            Sets the given class borders or checks their compatibility if there are already class borders present.
            </summary>
            <param name="classBorders">The class borders to use.</param>
            <param name="reallocationDelay">The delay in simulation time after which a reallocation is done according to the currently measured situation.</param>
            <param name="reallocationOrderCount">The number of orders after which a reallocation is done according to the currently measured situation.</param>
        </member>
        <member name="P:RAWSimO.Core.Control.Shared.TurnoverClassBuilder.Instance">
            <summary>
            The instance this manager belongs to.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Control.Shared.TurnoverClassBuilder.BundleStorageManager">
            <summary>
            The bundle storage manager associated with this class manager.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Control.Shared.TurnoverClassBuilder.PodStorageManager">
            <summary>
            The pod storage manager associated with this class manager.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Shared.TurnoverClassBuilder._initialized">
            <summary>
            Indicates whether this manager was initialized.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Shared.TurnoverClassBuilder._classCount">
            <summary>
            The number of classes this class-based storage manager works with.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Shared.TurnoverClassBuilder._classBorders">
            <summary>
            The bounds of the classes in terms of relative item frequencies.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Shared.TurnoverClassBuilder._storageLocationClassRule">
            <summary>
            The rule used to assign the storage locations to the different classes.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Shared.TurnoverClassBuilder._reallocationDelay">
            <summary>
            The delay in simulation time after which a reallocation takes place.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Shared.TurnoverClassBuilder._reallocationOrderCount">
            <summary>
            The number of orders after which a reallocation takes place.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Shared.TurnoverClassBuilder._classStoragePods">
            <summary>
            The actual pods serving for the different classes.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Shared.TurnoverClassBuilder._classStorageLocations">
            <summary>
            The actual storage locations serving for the different classes.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Shared.TurnoverClassBuilder._podClasses">
            <summary>
            The classes of all pods.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Shared.TurnoverClassBuilder._itemClasses">
            <summary>
            The classes of all item-descriptions.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Shared.TurnoverClassBuilder._podsOrdered">
            <summary>
            The pods in a frequency sorted manner.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Shared.TurnoverClassBuilder._storageLocationsOrdered">
            <summary>
            The storage locations in a distance sorted manner.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Shared.TurnoverClassBuilder._itemDescriptionsOrdered">
            <summary>
            The item-descriptions in a frequency sorted manner.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Shared.TurnoverClassBuilder._lastReallocation">
            <summary>
            The last time the storage classes were restructured to fit the current demand.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Control.Shared.TurnoverClassBuilder._orderCountOfPeriod">
            <summary>
            The number of orders since the last reallocation.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Control.Shared.TurnoverClassBuilder.ClassCount">
            <summary>
            Returns the number of classes.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Shared.TurnoverClassBuilder.DetermineStorageClass(RAWSimO.Core.Items.ItemBundle)">
            <summary>
            Returns the class to use for the given bundle.
            </summary>
            <param name="bundle">The bundle to find the fitting class for.</param>
            <returns>The class of the given bundle.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.Shared.TurnoverClassBuilder.DetermineStorageClass(RAWSimO.Core.Elements.Pod)">
            <summary>
            Returns the class to use for the given pod.
            </summary>
            <param name="pod">The pod.</param>
            <returns>The class to use for storing the pod.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.Shared.TurnoverClassBuilder.GetClassPods(System.Int32)">
            <summary>
            Returns all storage pods belonging to the specified class.
            </summary>
            <param name="storageClass">The storage class.</param>
            <returns>All pods belonging to the specified class.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.Shared.TurnoverClassBuilder.GetClassStorageLocations(System.Int32)">
            <summary>
            Returns all storage locations belonging to the specified class.
            </summary>
            <param name="storageClass">The storage class.</param>
            <returns>All storage locations belonging to the specififed class.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.Shared.TurnoverClassBuilder.NewOrderCallback(RAWSimO.Core.Items.Order)">
            <summary>
            This is called every time an order is placed.
            </summary>
            <param name="order">The new order that was placed.</param>
        </member>
        <member name="M:RAWSimO.Core.Control.Shared.TurnoverClassBuilder.ReallocateCallback(System.Double)">
            <summary>
            The callback for checking whether a reallocation is necessary and conducting it if so.
            </summary>
            <param name="currentTime">The current time of the simulation.</param>
        </member>
        <member name="M:RAWSimO.Core.Control.Shared.TurnoverClassBuilder.EnsureInit">
            <summary>
            Enables late initialization.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Shared.TurnoverClassBuilder.Init">
            <summary>
            Initializes this manager.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Shared.TurnoverClassBuilder.ReallocatePods">
            <summary>
            Reallocates the pods to different classes.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Shared.TurnoverClassBuilder.ReallocateItems">
            <summary>
            Reallocates the items to different classes
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.Shared.TurnoverClassBuilder.GetNextEventTime(System.Double)">
            <summary>
            The next event when this element has to be updated.
            </summary>
            <param name="currentTime">The current time of the simulation.</param>
            <returns>The next time this element has to be updated.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.Shared.TurnoverClassBuilder.Update(System.Double,System.Double)">
            <summary>
            Updates the element to the specified time.
            </summary>
            <param name="lastTime">The time before the update.</param>
            <param name="currentTime">The time to update to.</param>
        </member>
        <member name="T:RAWSimO.Core.Control.SimulationExecutor">
            <summary>
            Used to execute simulation instances.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.SimulationExecutor.Execute(RAWSimO.Core.Instance)">
            <summary>
            Executes the given simulation.
            </summary>
            <param name="instance">The instance to execute including the configuration to use.</param>
        </member>
        <member name="T:RAWSimO.Core.Control.StationManager">
            <summary>
            Implements the basic functionality of the station managers.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.StationManager.#ctor(RAWSimO.Core.Instance)">
            <summary>
            Creates a new instance of the manager.
            </summary>
            <param name="instance">The instance this manager belongs to.</param>
        </member>
        <member name="P:RAWSimO.Core.Control.StationManager.Instance">
            <summary>
            The instance this manager is assigned to.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.StationManager.GetNextEventTime(System.Double)">
            <summary>
            The next event when this element has to be updated.
            </summary>
            <param name="currentTime">The current time of the simulation.</param>
            <returns>The next time this element has to be updated.</returns>
        </member>
        <member name="M:RAWSimO.Core.Control.StationManager.Update(System.Double,System.Double)">
            <summary>
            Updates the element to the specified time.
            </summary>
            <param name="lastTime">The time before the update.</param>
            <param name="currentTime">The time to update to.</param>
        </member>
        <member name="M:RAWSimO.Core.Control.StationManager.SignalCurrentTime(System.Double)">
            <summary>
            Signals the current time to the mechanism. The mechanism can decide to block the simulation thread in order consume remaining real-time.
            </summary>
            <param name="currentTime">The current simulation time.</param>
        </member>
        <member name="M:RAWSimO.Core.Control.StationManager.StatFinish">
            <summary>
            The callback that indicates that the simulation is finished and statistics have to submitted to the instance.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Control.StationManager.StatReset">
            <summary>
            The callback indicates a reset of the statistics.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Elements.Bot">
            <summary>
            The base class for a robot.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Elements.Bot.#ctor(RAWSimO.Core.Instance)">
            <summary>
            Creates a new instance of the robot.
            </summary>
            <param name="instance">The instance this bot belongs to.</param>
        </member>
        <member name="P:RAWSimO.Core.Elements.Bot.PodTransferTime">
            <summary>
            Time necessary to pickup or set down a pod in seconds.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Elements.Bot.MaxAcceleration">
            <summary>
            The maximal possible acceleration in m/s^2.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Elements.Bot.MaxDeceleration">
            <summary>
            The maximal possible deceleration in m/s^2.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Elements.Bot.MaxVelocity">
            <summary>
            The maximal possible velocity in m/s.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Elements.Bot.TurnSpeed">
            <summary>
            The speed of the robot for turning on the spot.
            <remarks>The unit of measure is the simulation time it takes for a full 360° turn.</remarks>
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Elements.Bot.CollisionPenaltyTime">
            <summary>
            Penalty time applied after a collision.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Elements.Bot.Pod">
            <summary>
            The pod (if this bot is carrying one, otherwise <code>null</code>)
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Elements.Bot.CurrentTask">
            <summary>
            The current task this bot is occupied by.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Elements.Bot.CurrentWaypoint">
            <summary>
            Last way point the bot passed.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Elements.Bot.TargetWaypoint">
            <summary>
            The current destination of the bot as useful information for other mechanisms.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Elements.Bot.XVelocity">
            <summary>
            The bot's current velocity regarding the x-dimension.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Elements.Bot.YVelocity">
            <summary>
            The bot's current velocity regarding the y-dimension.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Elements.Bot.BlockedUntil">
            <summary>
            Moment when the bot finishes being blocked by a performing task.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Elements.Bot.IsQueueing">
            <summary>
            A flag that indicates that the robot is currently queueing.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Elements.Bot.GetSpeed">
            <summary>
            Returns this bot's current velocity.
            </summary>
            <returns>The speed at which this bot is currently traveling.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.Bot.WaitUntil(System.Double)">
            <summary>
            Blocks the robot for the specified time.
            </summary>
            <param name="time">The time to be blocked for.</param>
        </member>
        <member name="M:RAWSimO.Core.Elements.Bot.AssignTask(RAWSimO.Core.Control.BotTask)">
            <summary>
            Assigns a new task to the bot.
            </summary>
            <param name="t">The task to execute.</param>
        </member>
        <member name="M:RAWSimO.Core.Elements.Bot.PickupPod(RAWSimO.Core.Elements.Pod,System.Double)">
            <summary>
            Picks up the specified pod.
            </summary>
            <param name="pod">The pod to pick up.</param>
            <param name="currentTime">The current simulation time.</param>
            <returns><code>true</code> if the pickup-operation was successful, <code>false</code> otherwise.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.Bot.SetdownPod(System.Double)">
            <summary>
            Sets down the current pod.
            </summary>
            <param name="currentTime">The current time of the simulation.</param>
            <returns><code>true</code> if the set down-operation was successful, <code>false</code> otherwise.</returns>
        </member>
        <member name="F:RAWSimO.Core.Elements.Bot.StatNumberOfPickups">
            <summary>
            The number of pickups done so far.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Elements.Bot.StatNumberOfSetdowns">
            <summary>
            The number of set downs done so far.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Elements.Bot.StatNumCollisions">
            <summary>
            The number of collisions that happened so far.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Elements.Bot.StatDistanceTraveled">
            <summary>
            The distance traveled by this bot so far.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Elements.Bot.StatAssignedTasks">
            <summary>
            The assigned task for this bot so far.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Elements.Bot.StatDistanceEstimated">
            <summary>
            The distance of the direct path.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Elements.Bot.StatDistanceRequestedOptimal">
            <summary>
            The optimal overall distance for completion of all requested trips.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Elements.Bot.StatTotalTimeMoving">
            <summary>
            The time the robot was moving.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Elements.Bot.StatTotalTimeQueueing">
            <summary>
            The time the robot was queueing.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Elements.Bot.StatLastTask">
            <summary>
            The last task the bot was executing.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Elements.Bot.StatLastWaypoint">
            <summary>
            The last waypoint this bot was located at.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Elements.Bot.StatLastTripStartTime">
            <summary>
            The last time the robot went on a new trip.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Elements.Bot.StatTotalTaskTimes">
            <summary>
            The time spent in each task.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Elements.Bot.StatTotalTaskCounts">
            <summary>
            The number of tasks done per type.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Elements.Bot.StatLastState">
            <summary>
            The last state the bot was in.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Elements.Bot.StatTotalStateTimes">
            <summary>
            The time spent in each state.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Elements.Bot.StatTotalStateCounts">
            <summary>
            The number of times the bot was in each state type.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Elements.Bot.LogIncompleteTrip">
            <summary>
            Logs the data of an unfinished trip.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Elements.Bot.ResetStatistics">
            <summary>
            Resets all statistics.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Elements.Bot.GetIdentfierString">
            <summary>
            Returns a string that can be used to identify the object.
            </summary>
            <returns>A string representing the object.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.Bot.ToString">
            <summary>
            Returns a string that can be used to identify the object.
            </summary>
            <returns>A string representing the object.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.Bot.GetNextEventTime(System.Double)">
            <summary>
            The next event when this element has to be updated.
            </summary>
            <param name="currentTime">The current time of the simulation.</param>
            <returns>The next time this element has to be updated.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.Bot.Update(System.Double,System.Double)">
            <summary>
            Do update.
            </summary>
            <param name="lastTime">last time update call</param>
            <param name="currentTime">current time</param>
        </member>
        <member name="M:RAWSimO.Core.Elements.Bot.GetInfoCurrentTier">
            <summary>
            Gets the current tier this object is placed on. Can't change in case of an immovable object.
            </summary>
            <returns>The current tier.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.Bot.GetInfoChanged">
            <summary>
            Indicates whether the underlying object changed since the last call of <code>GetChanged()</code>.
            </summary>
            <returns><code>true</code> if the object changed since the last call of this method, <code>false</code> otherwise.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.Bot.GetInfoInstance">
            <summary>
            Returns the active instance belonging to this element.
            </summary>
            <returns>The active instance.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.Bot.GetInfoTask">
            <summary>
            Returns the current task the bot is executing.
            </summary>
            <returns>The active task.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.Bot.GetInfoSpeed">
            <summary>
            Gets the current speed of the bot.
            </summary>
            <returns>The speed in m/s.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.Bot.GetInfoState">
            <summary>
            Returns the current state the bot is in.
            </summary>
            <returns>The active state.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.Bot.GetInfoCurrentWaypoint">
            <summary>
            Gets the current waypoint that is considered by planning.
            </summary>
            <returns>The current waypoint.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.Bot.GetInfoDestinationWaypoint">
            <summary>
            Gets the destination of the bot.
            </summary>
            <returns>The destination.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.Bot.GetInfoGoalWaypoint">
            <summary>
            Gets the goal of the bot.
            </summary>
            <returns>The goal.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.Bot.GetInfoPath">
            <summary>
            Gets the current path of the bot.
            </summary>
            <returns>The current path.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.Bot.GetInfoGoalX">
            <summary>
            Gets the x-position of the goal of the bot.
            </summary>
            <returns>The x-position.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.Bot.GetInfoGoalY">
            <summary>
            Gets the y-position of the goal of the bot.
            </summary>
            <returns>The y-position.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.Bot.GetInfoTargetOrientation">
            <summary>
            Gets the target orientation in radians. (An element facing east is defined with orientation 0 or equally 2*pi.)
            </summary>
            <returns>The orientation.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.Bot.GetInfoBlocked">
            <summary>
            Indicates whether the robot is currently blocked.
            </summary>
            <returns><code>true</code> if the robot is blocked, <code>false</code> otherwise.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.Bot.GetInfoBlockedLeft">
            <summary>
            The time until the bot is blocked.
            </summary>
            <returns>The time until the bot is blocked.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.Bot.GetInfoIsQueueing">
            <summary>
            Indicates whether the bot is currently queueing in a managed area.
            </summary>
            <returns><code>true</code> if the robot is within a queue area, <code>false</code> otherwise.</returns>
        </member>
        <member name="P:RAWSimO.Core.Elements.Bot.RAWSimO#Toolbox#IExposeVolatileID#VolatileID">
            <summary>
            An ID that is useful as an index for listing this item.
            This ID is unique among all <code>ItemDescription</code>s while being as low as possible.
            Note: For now the volatile ID matches the actual ID.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Elements.Bot.OnReachedWaypoint(RAWSimO.Core.Waypoints.Waypoint)">
            <summary>
            Called when [bot reached way point].
            </summary>
            <param name="waypoint">The way point.</param>
        </member>
        <member name="M:RAWSimO.Core.Elements.Bot.OnPickedUpPod">
            <summary>
            Called when [bot picked up the pod].
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Elements.Bot.OnSetDownPod">
            <summary>
            Called when [bot set down pod].
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Elements.Compound">
            <summary>
            The class serving as the root element for all information about the physical structure of the instance.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Elements.Compound.#ctor(RAWSimO.Core.Instance)">
            <summary>
            Creates a new compound.
            </summary>
            <param name="instance">The instance this compound belongs to.</param>
        </member>
        <member name="F:RAWSimO.Core.Elements.Compound.Tiers">
            <summary>
            All tiers defining this compound.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Elements.Compound.GetShortestTimeWithoutCollision">
            <summary>
            Returns the shortest time without a collision respecting the current situation and speeds.
            </summary>
            <returns>The shortest time without a collision.</returns>
        </member>
        <member name="F:RAWSimO.Core.Elements.Compound.BotCurrentTier">
            <summary>
            Saves the current tier of every bot for fast access.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Elements.Compound.PodCurrentTier">
            <summary>
            Saves the current tier of every pod for fast access.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Elements.Compound.GetIdentfierString">
            <summary>
            Returns a simple string identifying this object in its instance.
            </summary>
            <returns>A simple name identifying the instance element.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.Compound.ToString">
            <summary>
            Returns a simple string giving information about the object.
            </summary>
            <returns>A simple string.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.Compound.GetNextEventTime(System.Double)">
            <summary>
            The next event when this element has to be updated.
            </summary>
            <param name="currentTime">The current time of the simulation.</param>
            <returns>The next time this element has to be updated.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.Compound.Update(System.Double,System.Double)">
            <summary>
            Updates the element to the specified time.
            </summary>
            <param name="lastTime">The time before the update.</param>
            <param name="currentTime">The time to update to.</param>
        </member>
        <member name="T:RAWSimO.Core.Elements.Elevator">
            <summary>
            An elevator implementation that is able to transport robots from one tier to another.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Elements.Elevator.#ctor(RAWSimO.Core.Instance)">
            <summary>
            Creates a new elevator.
            </summary>
            <param name="instance">The instance this elevator belongs to.</param>
        </member>
        <member name="F:RAWSimO.Core.Elements.Elevator._connectedPoints">
            <summary>
            All waypoints connected by the elevator.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Elements.Elevator.ConnectedPoints">
            <summary>
            Exposes all waypoints connected by the elevator.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Elements.Elevator._timings">
            <summary>
            Contains the time necessary to move the elevator from the source waypoint to the destination waypoint.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Elements.Elevator.InUse">
            <summary>
            Indicates whether the elevator is currently in use.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Elements.Elevator.usedBy">
            <summary>
            Indicates which bot is currently using the elevator.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Elements.Elevator.RegisterPoints(System.Double,System.Collections.Generic.IEnumerable{RAWSimO.Core.Waypoints.Waypoint})">
            <summary>
            Registers the given waypoints with the elevator.
            </summary>
            <param name="time">The default time to use for transportation.</param>
            <param name="connectedPoints">The points connected by the elevator.</param>
        </member>
        <member name="M:RAWSimO.Core.Elements.Elevator.UnregisterPoint(RAWSimO.Core.Waypoints.Waypoint)">
            <summary>
            Unregisters the given waypoint with this elevator.
            </summary>
            <param name="waypoint">The waypoint to remove from the elevator.</param>
        </member>
        <member name="M:RAWSimO.Core.Elements.Elevator.SetTiming(RAWSimO.Core.Waypoints.Waypoint,RAWSimO.Core.Waypoints.Waypoint,System.Double)">
            <summary>
            Sets the time for transporation between the two given waypoints.
            </summary>
            <param name="from">The from waypoint.</param>
            <param name="to">The to waypoint.</param>
            <param name="time">The transportation time.</param>
        </member>
        <member name="M:RAWSimO.Core.Elements.Elevator.GetTiming(RAWSimO.Core.Waypoints.Waypoint,RAWSimO.Core.Waypoints.Waypoint)">
            <summary>
            Gets the transporation time for the connection.
            </summary>
            <param name="from">The from part of the connection.</param>
            <param name="to">The to part of the connection.</param>
            <returns>The transportation time.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.Elevator.Transport(RAWSimO.Core.Elements.Bot,RAWSimO.Core.Waypoints.Waypoint,RAWSimO.Core.Waypoints.Waypoint)">
            <summary>
            Transports the bot along the given connection.
            </summary>
            <param name="bot">The bot to transport.</param>
            <param name="from">The from part of the connection.</param>
            <param name="to">The to part of the connection.</param>
            <returns>The transportation time.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.Elevator.GetIdentfierString">
            <summary>
            Returns a simple string identifying this object in its instance.
            </summary>
            <returns>A simple name identifying the instance element.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.Elevator.ToString">
            <summary>
            Returns a simple string giving information about the object.
            </summary>
            <returns>A simple string.</returns>
        </member>
        <member name="P:RAWSimO.Core.Elements.Elevator.Queues">
            <summary>
            The Queue starting with the nearest way point ending with the most far away one.
            </summary>
            <value>
            The queue.
            </value>
        </member>
        <member name="M:RAWSimO.Core.Elements.Elevator.GetInfoWaypoints">
            <summary>
            Returns all waypoints of this elevator.
            </summary>
            <returns>The waypoints of this elevator.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.Elevator.GetInfoCenterX">
            <summary>
            Gets the x-position of the center of the object.
            </summary>
            <returns>The x-position.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.Elevator.GetInfoCenterY">
            <summary>
            Gets the y-position of the center of the object.
            </summary>
            <returns>The y-position.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.Elevator.GetInfoTLX">
            <summary>
            Gets the x-position of the bottom left corner of the objects' area.
            </summary>
            <returns>The x-position.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.Elevator.GetInfoTLY">
            <summary>
            Gets the y-position of the bottom left corner of the objects' area.
            </summary>
            <returns>The y-position.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.Elevator.GetInfoCurrentTier">
            <summary>
            Gets the current tier this object is placed on. Can't change in case of an immovable object.
            </summary>
            <returns>The current tier.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.Elevator.GetInfoInstance">
            <summary>
            Returns the active instance belonging to this element.
            </summary>
            <returns>The active instance.</returns>
        </member>
        <member name="T:RAWSimO.Core.Elements.InputStation">
            <summary>
            Implements the input-station, i.e. the replenishment station.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Elements.InputStation.#ctor(RAWSimO.Core.Instance)">
            <summary>
            Creates a new input-station.
            </summary>
            <param name="instance">The instance this station belongs to.</param>
        </member>
        <member name="P:RAWSimO.Core.Elements.InputStation.Active">
            <summary>
            Indicates whether this station is active
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Elements.InputStation.Activate">
            <summary>
            Activates this station.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Elements.InputStation.Deactivate">
            <summary>
            Deactivates this station.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Elements.InputStation.ItemBundleTransferTime">
            <summary>
            The time it takes to transfer one bundle of items onto a pod.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Elements.InputStation.Waypoint">
            <summary>
            The waypoint this input-station is located at.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Elements.InputStation.ActivationOrderID">
            <summary>
            The order ID of this station that defines the sequence in which the stations have to be activated.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Elements.InputStation.Capacity">
            <summary>
            The capacity of this station.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Elements.InputStation.CapacityInUse">
            <summary>
            The capacity currently in use at this station.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Elements.InputStation.CapacityReserved">
            <summary>
            The amount of capacity reserved by a controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Elements.InputStation._itemBundles">
            <summary>
            Contains information about the items currently contained in this station.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Elements.InputStation.RegisteredBundles">
            <summary>
            The set of bundles not yet allocated but already registered with this station.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Elements.InputStation._registeredBundles">
            <summary>
            The set of bundles not yet allocated but already registered with this station.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Elements.InputStation.ItemBundles">
            <summary>
            Contains information about the items currently contained in this station.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Elements.InputStation.FitsForReservation(RAWSimO.Core.Items.ItemBundle)">
            <summary>
            Checks whether the specified bundle of items can be added for reservation to this station.
            </summary>
            <param name="bundle">The bundle that has to be checked.</param>
            <returns><code>true</code> if the bundle fits, <code>false</code> otherwise.</returns>
        </member>
        <member name="P:RAWSimO.Core.Elements.InputStation.RemainingCapacity">
            <summary>
            Gets the remaining (unused and not reserved) capacity at this station.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Elements.InputStation.RegisterBundle(RAWSimO.Core.Items.ItemBundle)">
            <summary>
            Reserves capacity of this station for the given bundle. The reserved capacity will be maintained when the bundle is allocated.
            </summary>
            <param name="bundle">The bundle for which capacity shall be reserved.</param>
        </member>
        <member name="M:RAWSimO.Core.Elements.InputStation.Add(RAWSimO.Core.Items.ItemBundle)">
            <summary>
            Adds the specified item to the station.
            </summary>
            <param name="item">The item to add.</param>
            <returns><code>true</code> if the item was added successfully, <code>false</code> otherwise.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.InputStation.GiveBundleToPod(System.Double)">
            <summary>
            Puts the next possible bundle in the queue on the pod.
            </summary>
            <param name="currentTime">The current time.</param>
        </member>
        <member name="F:RAWSimO.Core.Elements.InputStation._requestsInsert">
            <summary>
            The queue of insertion requests to handle.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Elements.InputStation._requestsBot">
            <summary>
            The queue of robots that requested a transfer.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Elements.InputStation.RequestBundle(RAWSimO.Core.Elements.Bot,RAWSimO.Core.Management.InsertRequest)">
            <summary>
            Requests the station to put the given bundle on the pod.
            </summary>
            <param name="bot">The robot that issues the request.</param>
            <param name="request">The request to handle.</param>
        </member>
        <member name="M:RAWSimO.Core.Elements.InputStation.RegisterBot(RAWSimO.Core.Elements.Bot)">
            <summary>
            Register a newly approached bot before putting begins for statistical purposes.
            </summary>
            <param name="bot">The bot that just approached the station.</param>
        </member>
        <member name="P:RAWSimO.Core.Elements.InputStation.StatNumBundlesStored">
            <summary>
            The number of bundles stored.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Elements.InputStation.StatNumInjectedBundlesStored">
            <summary>
            The number of bundles stored that were injected to the task of the robot.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Elements.InputStation.StatCurrentlyOpenRequests">
            <summary>
            The number of requests currently open (not assigned to a bot) for this station.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Elements.InputStation.StatCurrentlyOpenBundles">
            <summary>
            The number of bundles currently open (not stored yet) for this station.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Elements.InputStation._statPodHandling">
            <summary>
            Contains statistics about the pods handled at this station.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Elements.InputStation.StatPodsHandled">
            <summary>
            The (sequential) number of pods handled at this station.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Elements.InputStation.StatPodHandlingTimeAvg">
            <summary>
            The time it took to handle one pod in average.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Elements.InputStation.StatPodHandlingTimeVar">
            <summary>
            The variance in the handling times of the pods.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Elements.InputStation.StatPodHandlingTimeMin">
            <summary>
            The minimal handling time of a pod.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Elements.InputStation.StatPodHandlingTimeMax">
            <summary>
            The maximal handling time of a pod.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Elements.InputStation._newPodTransaction">
            <summary>
            Indicates that the next item put belongs to a new transaction serving one pod.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Elements.InputStation.StatBundlePileOn">
            <summary>
            The bundle pile-on of this station, i.e. the relative number of bundles put on the same pod in one 'transaction'.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Elements.InputStation.StatInjectedBundlePileOn">
            <summary>
            The injected bundle pile-on of this station, i.e. the relative number of injected bundles put on the same pod in one 'transaction'.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Elements.InputStation.StatIdleTime">
            <summary>
            The time this station was idling.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Elements.InputStation.StatActiveTime">
            <summary>
            The time this station was active.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Elements.InputStation._lastActiveMeasurement">
            <summary>
            The last time the activity of the station was logged.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Elements.InputStation.StatDownTime">
            <summary>
            The time this station was shutdown.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Elements.InputStation._statDepletionTime">
            <summary>
            The timepoint at which the station completed its last order and may have moved to a rest state.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Elements.InputStation._statLastTimeNewPod">
            <summary>
            Stores the last time when the handling of a pod started.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Elements.InputStation._statLastTimeTransactionFinished">
            <summary>
            Stores the last time when a transaction was finished.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Elements.InputStation.StatInitPodHandlingDataPoint(System.Double)">
            <summary>
            Inits the first datapoint for pod handling.
            </summary>
            <param name="handlingTime">The time it took to serve the pod.</param>
            <returns>The new datapoint.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.InputStation.ResetStatistics">
            <summary>
            Resets the statistics.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Elements.InputStation.GetIdentfierString">
            <summary>
            Returns a simple string identifying this object in its instance.
            </summary>
            <returns>A simple name identifying the instance element.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.InputStation.ToString">
            <summary>
            Returns a simple string giving information about the object.
            </summary>
            <returns>A simple string.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.InputStation.GetNextEventTime(System.Double)">
            <summary>
            The next event when this element has to be updated.
            </summary>
            <param name="currentTime">The current time of the simulation.</param>
            <returns>The next time this element has to be updated.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.InputStation.Update(System.Double,System.Double)">
            <summary>
            Updates the element to the specified time.
            </summary>
            <param name="lastTime">The time before the update.</param>
            <param name="currentTime">The time to update to.</param>
        </member>
        <member name="M:RAWSimO.Core.Elements.InputStation.GetInfoInstance">
            <summary>
            Returns the active instance belonging to this element.
            </summary>
            <returns>The active instance.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.InputStation.GetInfoCurrentTier">
            <summary>
            Gets the current tier this object is placed on. Can't change in case of an immovable object.
            </summary>
            <returns>The current tier.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.InputStation.GetInfoAssignedBundles">
            <summary>
            Gets the number of assigned bundles.
            </summary>
            <returns>The number of assigned bundles.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.InputStation.GetInfoCapacity">
            <summary>
            Gets the capacity this station offers.
            </summary>
            <returns>The capacity of the station.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.InputStation.GetInfoCapacityUsed">
            <summary>
            Gets the absolute capacity currently in use.
            </summary>
            <returns>The capacity in use.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.InputStation.GetInfoCapacityReserved">
            <summary>
            Gets the absolute capacity currently reserved.
            </summary>
            <returns>The reserved capacity.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.InputStation.GetInfoBundles">
            <summary>
            Gets all bundles currently contained in this station.
            </summary>
            <returns>The bundles of this station.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.InputStation.GetInfoContentChanged">
            <summary>
            Indicates whether the content of the station changed.
            </summary>
            <returns>Indicates whether the content of the station changed.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.InputStation.GetInfoActivationOrderID">
            <summary>
            Indicates the number that determines the overall sequence in which stations get activated.
            </summary>
            <returns>The order ID of the station.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.InputStation.GetInfoQueue">
            <summary>
            Gets the information queue.
            </summary>
            <returns>Queue</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.InputStation.GetInfoActive">
            <summary>
            Indicates whether the station is currently activated (available for new assignments).
            </summary>
            <returns><code>true</code> if the station is active, <code>false</code> otherwise.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.InputStation.GetInfoBlocked">
            <summary>
            Indicates whether the station is currently blocked due to activity.
            </summary>
            <returns><code>true</code> if it is blocked, <code>false</code> otherwise.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.InputStation.GetInfoBlockedLeft">
            <summary>
            Gets the remaining time this station is blocked.
            </summary>
            <returns>The remaining time this station is blocked.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.InputStation.GetInfoOpenRequests">
            <summary>
            Gets the of requests currently open (not assigned to a bot) for this station.
            </summary>
            <returns>The number of active requests.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.InputStation.GetInfoOpenBundles">
            <summary>
            Gets the number of currently open bundles (not yet stored) for this station.
            </summary>
            <returns>The number of open bundles.</returns>
        </member>
        <member name="P:RAWSimO.Core.Elements.InputStation.Queues">
            <summary>
            The Queue starting with the nearest way point ending with the most far away one.
            </summary>
            <value>
            The queue.
            </value>
        </member>
        <member name="P:RAWSimO.Core.Elements.InputStation.RAWSimO#Toolbox#IExposeVolatileID#VolatileID">
            <summary>
            An ID that is useful as an index for listing this item.
            This ID is unique among all <code>ItemDescription</code>s while being as low as possible.
            Note: For now the volatile ID matches the actual ID.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Elements.OutputStation">
            <summary>
            Implements the output-station, i.e. the picking station.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Elements.OutputStation.#ctor(RAWSimO.Core.Instance)">
            <summary>
            Creates a new output-station.
            </summary>
            <param name="instance">The instance this station belongs to.</param>
        </member>
        <member name="P:RAWSimO.Core.Elements.OutputStation.Active">
            <summary>
            Indicates whether this station is active
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Elements.OutputStation.Activate">
            <summary>
            Activates this station.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Elements.OutputStation.Deactivate">
            <summary>
            Deactivates this station.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Elements.OutputStation.ItemTransferTime">
            <summary>
            The time it takes to pick one item from a pod and put it into the order tote.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Elements.OutputStation.ItemPickTime">
            <summary>
            The time it takes to pick one item from a pod (excluding the time it takes to put it into a tote - after this the robot is free to leave, if it does not have other items to be picked).
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Elements.OutputStation.OrderCompletionTime">
            <summary>
            The time it takes to complete an order.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Elements.OutputStation.Waypoint">
            <summary>
            The waypoint this output-station is located at.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Elements.OutputStation.ActivationOrderID">
            <summary>
            The order ID of this station that defines the sequence in which the stations have to be activated.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Elements.OutputStation.Capacity">
            <summary>
            The capacity of this station.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Elements.OutputStation.CapacityInUse">
            <summary>
            The capacity currently in use at this station.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Elements.OutputStation.CapacityReserved">
            <summary>
            The amount of capacity reserved by a controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Elements.OutputStation._assignedOrders">
            <summary>
            The orders currently assigned to this station.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Elements.OutputStation._registeredOrders">
            <summary>
            The set of orders not yet allocated but already registered with this station.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Elements.OutputStation._queuedOrders">
            <summary>
            The set of orders queued for this station.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Elements.OutputStation.AssignedOrders">
            <summary>
            The orders currently assigned to this station.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Elements.OutputStation.QueuedOrders">
            <summary>
            The orders currently queued to this station.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Elements.OutputStation.FitsForReservation(RAWSimO.Core.Items.Order)">
            <summary>
            Checks whether the specified order can be added for reservation to this station.
            </summary>
            <param name="order">The order that has to be checked.</param>
            <returns><code>true</code> if the bundle fits, <code>false</code> otherwise.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.OutputStation.RegisterOrder(RAWSimO.Core.Items.Order)">
            <summary>
            Reserves capacity of this station for the given order. The reserved capacity will be maintained when the order is allocated.
            </summary>
            <param name="order">The order for which capacity shall be reserved.</param>
        </member>
        <member name="M:RAWSimO.Core.Elements.OutputStation.QueueOrder(RAWSimO.Core.Items.Order)">
            <summary>
            The order to queue in for this station.
            </summary>
            <param name="order">The order to queue in.</param>
        </member>
        <member name="M:RAWSimO.Core.Elements.OutputStation.AssignOrder(RAWSimO.Core.Items.Order)">
            <summary>
            Assigns a new order to this station.
            </summary>
            <param name="order">The order to assign to this station.</param>
            <returns><code>true</code> if the order was successfully assigned, <code>false</code> otherwise.</returns>
        </member>
        <member name="F:RAWSimO.Core.Elements.OutputStation._requestsExtract">
            <summary>
            The queue of items to extract from the pods.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Elements.OutputStation._requestsBot">
            <summary>
            The queue of bots per item extraction request.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Elements.OutputStation.TakeItemFromPod(System.Double)">
            <summary>
            Picks the next enqueued item.
            </summary>
            <param name="currentTime">The current simulation time.</param>
            <returns><code>true</code> if there was an item to pick and the operation was successful, <code>false</code> otherwise.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.OutputStation.RemoveAnyCompletedOrder(System.Double)">
            <summary>
            Completes an order that is ready, if there is one.
            </summary>
            <param name="currentTime">The current simulation time.</param>
            <returns>The completed order if there was one, <code>null</code> otherwise.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.OutputStation.RequestItemTake(RAWSimO.Core.Elements.Bot,RAWSimO.Core.Management.ExtractRequest)">
            <summary>
            Requests the station to pick the given item for the given order.
            </summary>
            <param name="bot">The bot that requests the pick.</param>
            <param name="request">The request to handle.</param>
        </member>
        <member name="F:RAWSimO.Core.Elements.OutputStation._inboundPods">
            <summary>
            Contains all pods currently inbound for this station.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Elements.OutputStation.RegisterInboundPod(RAWSimO.Core.Elements.Pod)">
            <summary>
            Marks a pod as inbound for a station.
            </summary>
            <param name="pod">The pod that being brought to the station.</param>
        </member>
        <member name="M:RAWSimO.Core.Elements.OutputStation.UnregisterInboundPod(RAWSimO.Core.Elements.Pod)">
            <summary>
            Removes a pod from the list of inbound pods.
            </summary>
            <param name="pod">The pod that is not inbound anymore.</param>
        </member>
        <member name="P:RAWSimO.Core.Elements.OutputStation.InboundPods">
            <summary>
            All pods currently approaching the station.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Elements.OutputStation._activeExtractTasks">
            <summary>
            All extract tasks that are currently carried out by robots for this station.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Elements.OutputStation.RegisterExtractTask(RAWSimO.Core.Control.ExtractTask)">
            <summary>
            Register an extract task with this station.
            </summary>
            <param name="task">The task that shall be done at this station.</param>
        </member>
        <member name="M:RAWSimO.Core.Elements.OutputStation.UnregisterExtractTask(RAWSimO.Core.Control.ExtractTask)">
            <summary>
            Unregister an extract task with this station.
            </summary>
            <param name="task">The task that was done or cancelled for this station.</param>
        </member>
        <member name="P:RAWSimO.Core.Elements.OutputStation.ActiveTasks">
            <summary>
            All extract tasks that are registered for being done at this station.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Elements.OutputStation.RegisterBot(RAWSimO.Core.Elements.Bot)">
            <summary>
            Register a newly approached bot before picking begins for statistical purposes.
            </summary>
            <param name="bot">The bot that just approached the station.</param>
        </member>
        <member name="F:RAWSimO.Core.Elements.OutputStation.StatNumItemsPicked">
            <summary>
            The number of items handled by this station.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Elements.OutputStation.StatNumInjectedItemsPicked">
            <summary>
            The number of items picked by this station that were injected to the task of the robot.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Elements.OutputStation.StatNumOrdersFinished">
            <summary>
            The number of orders completed at this station.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Elements.OutputStation.StatCurrentlyOpenRequests">
            <summary>
            The number of requests currently open (not assigned to a bot) for this station.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Elements.OutputStation.StatCurrentlyOpenQueuedRequests">
            <summary>
            The number of requests currently open (not assigned to a bot) for this station.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Elements.OutputStation.StatCurrentlyOpenItems">
            <summary>
            The number of items currently open (not picked yet) for this station.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Elements.OutputStation.StatCurrentlyOpenQueuedItems">
            <summary>
            The number of items currently open (not picked yet) and queued for this station.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Elements.OutputStation._statPodHandling">
            <summary>
            Contains statistics about the pods handled at this station.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Elements.OutputStation.StatPodsHandled">
            <summary>
            The (sequential) number of pods handled at this station.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Elements.OutputStation.StatPodHandlingTimeAvg">
            <summary>
            The time it took to handle one pod in average.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Elements.OutputStation.StatPodHandlingTimeVar">
            <summary>
            The variance in the handling times of the pods.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Elements.OutputStation.StatPodHandlingTimeMin">
            <summary>
            The minimal handling time of a pod.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Elements.OutputStation.StatPodHandlingTimeMax">
            <summary>
            The maximal handling time of a pod.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Elements.OutputStation._newPodTransaction">
            <summary>
            Indicates that the next item picked belongs to a new transaction serving one pod.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Elements.OutputStation.StatItemPileOn">
            <summary>
            The item pile-on of this station, i.e. the relative number of items picked from the same pod in one 'transaction'.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Elements.OutputStation.StatInjectedItemPileOn">
            <summary>
            The injected item pile-on of this station, i.e. the relative number of injected items picked from the same pod in one 'transaction'.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Elements.OutputStation.StatOrderPileOn">
            <summary>
            The order pile-on of this station, i.e. the relative number of orders finished from the same pod in one 'transaction'.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Elements.OutputStation.StatIdleTime">
            <summary>
            The time this station was idling.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Elements.OutputStation.StatActiveTime">
            <summary>
            The time this station was active.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Elements.OutputStation._lastActiveMeasurement">
            <summary>
            The last time the activity of the station was logged.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Elements.OutputStation.StatDownTime">
            <summary>
            The time this station was shutdown.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Elements.OutputStation._statDepletionTime">
            <summary>
            The timepoint at which the station completed its last order and may have moved to a rest state.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Elements.OutputStation._statLastTimeNewPod">
            <summary>
            Stores the last time when the handling of a pod started.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Elements.OutputStation._statLastTimeTransactionFinished">
            <summary>
            Stores the last time when a transaction was finished.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Elements.OutputStation.StatInitPodHandlingDataPoint(System.Double)">
            <summary>
            Inits the first datapoint for pod handling.
            </summary>
            <param name="handlingTime">The time it took to serve the pod.</param>
            <returns>The new datapoint.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.OutputStation.ResetStatistics">
            <summary>
            Resets the statistics.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Elements.OutputStation.GetIdentfierString">
            <summary>
            Returns a simple string identifying this object in its instance.
            </summary>
            <returns>A simple name identifying the instance element.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.OutputStation.ToString">
            <summary>
            Returns a simple string giving information about the object.
            </summary>
            <returns>A simple string.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.OutputStation.GetNextEventTime(System.Double)">
            <summary>
            The next event when this element has to be updated.
            </summary>
            <param name="currentTime">The current time of the simulation.</param>
            <returns>The next time this element has to be updated.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.OutputStation.Update(System.Double,System.Double)">
            <summary>
            Updates the element to the specified time.
            </summary>
            <param name="lastTime">The time before the update.</param>
            <param name="currentTime">The time to update to.</param>
        </member>
        <member name="M:RAWSimO.Core.Elements.OutputStation.GetInfoInstance">
            <summary>
            Returns the active instance belonging to this element.
            </summary>
            <returns>The active instance.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.OutputStation.GetInfoCurrentTier">
            <summary>
            Gets the current tier this object is placed on. Can't change in case of an immovable object.
            </summary>
            <returns>The current tier.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.OutputStation.GetInfoAssignedOrders">
            <summary>
            Gets the number of assigned orders.
            </summary>
            <returns>The number of assigned orders.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.OutputStation.GetInfoOpenOrders">
            <summary>
            Gets all order currently open.
            </summary>
            <returns>The enumeration of open orders.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.OutputStation.GetInfoCompletedOrders">
            <summary>
            Gets all orders already completed.
            </summary>
            <returns>The enumeration of completed orders.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.OutputStation.GetInfoCapacity">
            <summary>
            Gets the capacity this station offers.
            </summary>
            <returns>The capacity of the station.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.OutputStation.GetInfoCapacityUsed">
            <summary>
            Gets the absolute capacity currently in use.
            </summary>
            <returns>The capacity in use.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.OutputStation.GetInfoActivationOrderID">
            <summary>
            Indicates the number that determines the overall sequence in which stations get activated.
            </summary>
            <returns>The order ID of the station.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.OutputStation.GetInfoQueue">
            <summary>
            Gets the information queue.
            </summary>
            <returns>Queue</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.OutputStation.GetInfoActive">
            <summary>
            Indicates whether the station is currently activated (available for new assignments).
            </summary>
            <returns><code>true</code> if the station is active, <code>false</code> otherwise.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.OutputStation.GetInfoBlocked">
            <summary>
            Indicates whether the station is currently blocked due to activity.
            </summary>
            <returns><code>true</code> if it is blocked, <code>false</code> otherwise.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.OutputStation.GetInfoBlockedLeft">
            <summary>
            Gets the remaining time this station is blocked.
            </summary>
            <returns>The remaining time this station is blocked.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.OutputStation.GetInfoOpenRequests">
            <summary>
            Gets the of requests currently open (not assigned to a bot) for this station.
            </summary>
            <returns>The number of active requests.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.OutputStation.GetInfoOpenQueuedRequests">
            <summary>
            Gets the number of queued requests currently open (not assigned to a bot) for this station.
            </summary>
            <returns>The number of active queued requests.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.OutputStation.GetInfoOpenItems">
            <summary>
            Gets the number of currently open items (not yet picked) for this station.
            </summary>
            <returns>The number of open items.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.OutputStation.GetInfoOpenQueuedItems">
            <summary>
            Gets the number of currently queued and open items (not yet picked) for this station.
            </summary>
            <returns>The number of queued open items.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.OutputStation.GetInfoInboundPods">
            <summary>
            Gets the number of pods currently incoming to this station.
            </summary>
            <returns>The number of pods currently incoming to this station.</returns>
        </member>
        <member name="P:RAWSimO.Core.Elements.OutputStation.Queues">
            <summary>
            The Queue starting with the nearest way point ending with the most far away one.
            </summary>
            <value>
            The queue.
            </value>
        </member>
        <member name="P:RAWSimO.Core.Elements.OutputStation.RAWSimO#Toolbox#IExposeVolatileID#VolatileID">
            <summary>
            An ID that is useful as an index for listing this item.
            This ID is unique among all <code>ItemDescription</code>s while being as low as possible.
            Note: For now the volatile ID matches the actual ID.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Elements.Pod">
            <summary>
            Implements a pod that offers storage space.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Elements.Pod.#ctor(RAWSimO.Core.Instance)">
            <summary>
            Creates a new pod.
            </summary>
            <param name="instance">The instance this pod belongs to.</param>
        </member>
        <member name="F:RAWSimO.Core.Elements.Pod.DEFAULT_BUCKET_ORIENTATION">
            <summary>
            The default pod orientation to use when setting down a pod.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Elements.Pod.MAX_ITEMDESCRIPTION_COUNT_FOR_FAST_ACCESS">
            <summary>
            The maximal number of SKUs that will be stored using fast access implementations.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Elements.Pod.Capacity">
            <summary>
            The capacity of this pod.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Elements.Pod.CapacityInUse">
            <summary>
            The amount of capacity currently in use.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Elements.Pod.CapacityReserved">
            <summary>
            The amount of capacity that is currently reserved by a controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Elements.Pod.InUse">
            <summary>
            Indicates whether the pod is currently carried by a bot.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Elements.Pod.Waypoint">
            <summary>
            The waypoint this pod is currently stored at. If the pod is currently being used or not properly setdown at a waypoint, this field will be <code>null</code>.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Elements.Pod.Bot">
            <summary>
            The bot this waypoint is currently carried by. <code>null</code>, if currently not carried.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Elements.Pod._registeredBundles">
            <summary>
            The set of bundles not yet allocated but already registered with this pod.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Elements.Pod.RegisteredBundles">
            <summary>
            The set of bundles registered for this pod.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Elements.Pod._itemDescriptionsContained">
            <summary>
            All items that are physically contained in this pod.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Elements.Pod.ItemDescriptionsContained">
            <summary>
            All items that are physically contained in this pod.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Elements.Pod._itemDescriptionCountContained">
            <summary>
            Contains the number of items still left of the different kinds (including already reserved ones).
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Elements.Pod._itemDescriptionCountAvailable">
            <summary>
            Contains the number of items still left of the different kinds (exluding already reserved ones).
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Elements.Pod._extractRequestsRegistered">
            <summary>
            All extract requests that shall be completed with this pod.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Elements.Pod.InitPodContentInfo">
            <summary>
            Initializes the content info of this pod. Call this only once before something is added to the pod.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Elements.Pod.RegisterBundle(RAWSimO.Core.Items.ItemBundle)">
            <summary>
            Reserves capacity of this pod for the given bundle. The reserved capacity will be maintained when the bundle is allocated.
            </summary>
            <param name="bundle">The bundle for which capacity shall be reserved.</param>
        </member>
        <member name="M:RAWSimO.Core.Elements.Pod.RegisterItem(RAWSimO.Core.Items.ItemDescription,RAWSimO.Core.Management.ExtractRequest)">
            <summary>
            Reserves an item that is going to be picked at a station.
            </summary>
            <param name="item">The item that is going to be reserved for picking.</param>
            <param name="extractRequest">The request for which the item shall be reserved.</param>
        </member>
        <member name="M:RAWSimO.Core.Elements.Pod.UnregisterItem(RAWSimO.Core.Items.ItemDescription,RAWSimO.Core.Management.ExtractRequest)">
            <summary>
            Revokes a reservation of an item.
            </summary>
            <param name="item">The type of the item.</param>
            <param name="extractRequest">The request which should have been done with the item.</param>
        </member>
        <member name="M:RAWSimO.Core.Elements.Pod.Add(RAWSimO.Core.Items.ItemBundle,RAWSimO.Core.Management.InsertRequest)">
            <summary>
            Adds the specified bundle of item to the pod.
            </summary>
            <param name="itemBundle">The item-bundle to add.</param>
            <param name="insertRequest">The corresponding insertion request, if available.</param>
            <returns><code>true</code> if the item was added successfully, <code>false</code> otherwise.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.Pod.Remove(RAWSimO.Core.Items.ItemDescription,RAWSimO.Core.Management.ExtractRequest)">
            <summary>
            Removes the item from the pod.
            </summary>
            <param name="item">The item to remove.</param>
            <param name="extractRequest">The corresponding extract request.</param>
        </member>
        <member name="M:RAWSimO.Core.Elements.Pod.DistanceToOutputStation">
            <summary>
            Checks the distance from a pod to an output station.
            </summary>
            <param></param>
            <returns><code>true</code> if such an item is present, <code>false</code> otherwise.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.Pod.IsEmpty">
            <summary>
            Checks whether the pod is empty or not.
            </summary>
            <returns><code>true</code> if such an item is present, <code>false</code> otherwise.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.Pod.IsContained(RAWSimO.Core.Items.ItemDescription)">
            <summary>
            Checks whether an item matching the description is contained in this pod.
            </summary>
            <param name="itemDescription">The description to check.</param>
            <returns><code>true</code> if such an item is present, <code>false</code> otherwise.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.Pod.IsAvailable(RAWSimO.Core.Items.ItemDescription)">
            <summary>
            Checks whether an item matching the description is available in this pod.
            </summary>
            <param name="itemDescription">The description to check.</param>
            <returns><code>true</code> if such an item is available, <code>false</code> otherwise.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.Pod.CountContained(RAWSimO.Core.Items.ItemDescription)">
            <summary>
            Returns how many items of the specified type are contained in this pod.
            </summary>
            <param name="itemDescription">The item to check for.</param>
            <returns>The count of items of the specified type that are contained in this pod.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.Pod.CountAvailable(RAWSimO.Core.Items.ItemDescription)">
            <summary>
            Returns how many items of the specified type are still available in this pod (not already reserved for picking).
            </summary>
            <param name="itemDescription">The item to check for.</param>
            <returns>The count of items of the specified type that are still available in this pod.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.Pod.Fits(RAWSimO.Core.Items.ItemBundle)">
            <summary>
            Checks whether the specified bundle of items fits into this pod.
            </summary>
            <param name="bundle">The item-bundle to check.</param>
            <returns><code>true</code> if the items fit this pod, <code>false</code> otherwise.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.Pod.FitsForReservation(RAWSimO.Core.Items.ItemBundle)">
            <summary>
            Checks whether the specified bundle of items can be added for reservation to this pod.
            </summary>
            <param name="bundle">The bundle that has to be checked.</param>
            <returns><code>true</code> if the bundle fits, <code>false</code> otherwise.</returns>
        </member>
        <member name="F:RAWSimO.Core.Elements.Pod.StatItemsHandled">
            <summary>
            The number of items given to output-stations.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Elements.Pod.StatBundlesHandled">
            <summary>
            The number of bundles received from input-stations.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Elements.Pod.ResetStatistics">
            <summary>
            Resets the statistics.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Elements.Pod.GetIdentfierString">
            <summary>
            Returns a simple string identifying this object in its instance.
            </summary>
            <returns>A simple name identifying the instance element.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.Pod.ToString">
            <summary>
            Returns a simple string giving information about the object.
            </summary>
            <returns>A simple string.</returns>
        </member>
        <member name="P:RAWSimO.Core.Elements.Pod.InfoTagPodStorageType">
            <summary>
            A number distinguishing the type of the pod.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Elements.Pod.InfoTagPodStorageInfo">
            <summary>
            Some additional information about the pod.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Elements.Pod.InfoTagPodSpeed">
            <summary>
            If a pod utility manager is active, this field contains the calculated speed of the pod.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Elements.Pod.InfoTagPodUtility">
            <summary>
            If a pod utility manager is active, this field contains the calculated utility of the pod.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Elements.Pod.InfoTagPodCombined">
            <summary>
            If a pod utility manager is active, this field contains the calculated combined speed and utility of the pod.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Elements.Pod.GetInfoHeatValue">
            <summary>
            Gets the current heat associated with this pod as a value between 0 (low heat) and 100 (high heat).
            </summary>
            <returns>The heat of this pod.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.Pod.GetInfoCapacity">
            <summary>
            Gets the capacity this pod offers.
            </summary>
            <returns>The capacity of the pod.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.Pod.GetInfoCapacityUsed">
            <summary>
            Gets the absolute capacity currently in use.
            </summary>
            <returns>The capacity in use.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.Pod.GetInfoCapacityReserved">
            <summary>
            Gets the absolute capacity currently reserved.
            </summary>
            <returns>The capacity reserved.</returns>
        </member>
        <member name="F:RAWSimO.Core.Elements.Pod._contentChanged">
            <summary>
            Indicates whether something changed 
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Elements.Pod.GetInfoContent(RAWSimO.Core.Info.IItemDescriptionInfo)">
            <summary>
            Gets information about number of items of the given kind in this pod.
            </summary>
            <returns>The number of units contained in the pod of the specified item.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.Pod.GetInfoContentChanged">
            <summary>
            Indicates whether the content of the pod changed.
            </summary>
            <returns>Indicates whether the content of the pod changed.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.Pod.GetInfoReadyForRefill">
            <summary>
            Indicates whether the pod is ready for refill.
            </summary>
            <returns>Indicates whether the pod is ready for refill.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.Pod.GetInfoCurrentTier">
            <summary>
            Gets the current tier this object is placed on. Can't change in case of an immovable object.
            </summary>
            <returns>The current tier.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.Pod.GetInfoInstance">
            <summary>
            Returns the active instance belonging to this element.
            </summary>
            <returns>The active instance.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.Pod.GetInfoChanged">
            <summary>
            Indicates whether the underlying object changed since the last call of <code>GetChanged()</code>.
            </summary>
            <returns><code>true</code> if the object changed since the last call of this method, <code>false</code> otherwise.</returns>
        </member>
        <member name="P:RAWSimO.Core.Elements.Pod.RAWSimO#Toolbox#IExposeVolatileID#VolatileID">
            <summary>
            An ID that is useful as an index for listing this item.
            This ID is unique among all <code>ItemDescription</code>s while being as low as possible.
            Note: For now the volatile ID matches the actual ID.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Elements.Tier">
            <summary>
            Describes one floor or level of an environment
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Elements.Tier.#ctor(RAWSimO.Core.Instance,System.Double,System.Double)">
            <summary>
            Creates a new tier.
            </summary>
            <param name="instance">The instance this tier belongs to.</param>
            <param name="length">The length of the tier (corresponds to the x-axis).</param>
            <param name="width">The width of the tier (corresponds to the y-axis).</param>
        </member>
        <member name="F:RAWSimO.Core.Elements.Tier.Length">
            <summary>
            The length of the tier. (Corresponds to the x-axis)
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Elements.Tier.Width">
            <summary>
            The width of the tier. (Corresponds to the y-axis)
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Elements.Tier.RelativePositionX">
            <summary>
            The relative position of the tier (just as information used for drawing).
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Elements.Tier.RelativePositionY">
            <summary>
            The relative position of the tier (just as information used for drawing).
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Elements.Tier.RelativePositionZ">
            <summary>
            The relative position of the tier (just as information used for drawing).
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Elements.Tier.BotQuadTree">
            <summary>
            The quad-tree observing positions and collisions of the bots on this tier.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Elements.Tier.PodQuadTree">
            <summary>
            The quad-tree observing positions and collisions of the pods on this tier.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Elements.Tier.InputStations">
            <summary>
            All input-stations on this tier.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Elements.Tier.OutputStations">
            <summary>
            All output-stations on this tier.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Elements.Tier.Bots">
            <summary>
            Set of all bots currently located on this tier.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Elements.Tier.Pods">
            <summary>
            Set of all pods currently located on this tier.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Elements.Tier.Waypoints">
            <summary>
            Set of waypoints on this tier.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Elements.Tier.CurrentBots">
            <summary>
            Exposes all bots currently located on this tier.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Elements.Tier.CurrentPods">
            <summary>
            Exposes all pods currently located on this tier.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Elements.Tier.GetBotsWithinDistance(System.Double,System.Double,System.Double)">
            <summary>
            Returns all bots within the given distance around the given spot.
            </summary>
            <param name="x">The x-value of the spot.</param>
            <param name="y">The y-value of the spot.</param>
            <param name="distance">The distance.</param>
            <returns>All bots within distance.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.Tier.GetPodsWithinDistance(System.Double,System.Double,System.Double)">
            <summary>
            Returns all pods within the given distance around the given spot.
            </summary>
            <param name="x">The x-value of the spot.</param>
            <param name="y">The y-value of the spot.</param>
            <param name="distance">The distance.</param>
            <returns>All pods within distance.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.Tier.IsBotMoveValid(RAWSimO.Core.Elements.Bot,System.Double,System.Double)">
            <summary>
            Checks whether the bot can go to the given coordinates.
            </summary>
            <param name="bot">The bot.</param>
            <param name="x">The x-coordinate.</param>
            <param name="y">The y-coordinate.</param>
            <returns><code>true</code> if the bot can move to the given coordinates, <code>false</code> otherwise.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.Tier.MoveBot(RAWSimO.Core.Elements.Bot,System.Double,System.Double)">
            <summary>
            Moves the bot to the given coordinates.
            </summary>
            <param name="bot">The bot to move.</param>
            <param name="x">The x-coordinate.</param>
            <param name="y">The y-coordinate.</param>
            <returns><code>true</code> if the move was possible and was conducted, <code>false</code> otherwise.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.Tier.MoveBotOverride(RAWSimO.Core.Elements.Bot,System.Double,System.Double)">
            <summary>
            Moves the bot to the given coordinates. Checks for collisions, but will move the bot anyway.
            </summary>
            <param name="bot">The bot to move.</param>
            <param name="x">The x-coordinate.</param>
            <param name="y">The y-coordinate.</param>
            <returns><code>true</code> if there was no collision detected while moving, <code>false</code> otherwise.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.Tier.GetShortestTimeWithoutCollision">
            <summary>
            Returns the shortest time without a collision considering the current orientations of the bots and their maximal speed.
            </summary>
            <returns>The shortest time without a collision.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.Tier.GetIdentfierString">
            <summary>
            Returns a simple string identifying this object in its instance.
            </summary>
            <returns>A simple name identifying the instance element.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.Tier.ToString">
            <summary>
            Returns a simple string giving information about the object.
            </summary>
            <returns>A simple string.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.Tier.GetNextEventTime(System.Double)">
            <summary>
            The next event when this element has to be updated.
            </summary>
            <param name="currentTime">The current time of the simulation.</param>
            <returns>The next time this element has to be updated.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.Tier.Update(System.Double,System.Double)">
            <summary>
            Updates the element to the specified time.
            </summary>
            <param name="lastTime">The time before the update.</param>
            <param name="currentTime">The time to update to.</param>
        </member>
        <member name="M:RAWSimO.Core.Elements.Tier.GetInfoBots">
            <summary>
            Returns the bots currently moving on this tier.
            </summary>
            <returns>All bots of the tier.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.Tier.GetInfoPods">
            <summary>
            Returns the pods currently placed on this tier.
            </summary>
            <returns>All pods of this tier.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.Tier.GetInfoInputStations">
            <summary>
            Returns the input stations placed on this tier.
            </summary>
            <returns>All input stations located on this tier.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.Tier.GetInfoOutputStations">
            <summary>
            Returns the output stations placed on this tier.
            </summary>
            <returns>All output stations located on this tier.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.Tier.GetInfoWaypoints">
            <summary>
            Returns all waypoints on this tier.
            </summary>
            <returns>The waypoints on this tier.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.Tier.GetInfoGuards">
            <summary>
            Returns all guards on this tier.
            </summary>
            <returns>The guards working on this tier.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.Tier.GetInfoZ">
            <summary>
            Returns the vertical position of the tier.
            </summary>
            <returns>The z-position.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.Tier.GetInfoTLX">
            <summary>
            Gets the x-position of the bottom left corner of the objects' area.
            </summary>
            <returns>The x-position.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.Tier.GetInfoTLY">
            <summary>
            Gets the y-position of the bottom left corner of the objects' area.
            </summary>
            <returns>The y-position.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.Tier.GetInfoCenterX">
            <summary>
            Gets the x-position of the center of the object.
            </summary>
            <returns>The x-position.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.Tier.GetInfoCenterY">
            <summary>
            Gets the y-position of the center of the object.
            </summary>
            <returns>The y-position.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.Tier.GetInfoLength">
            <summary>
            The length of the objects' area. (Corresponds to the x-axis)
            </summary>
            <returns>The length of the objects' area.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.Tier.GetInfoWidth">
            <summary>
            The width of the objects' area. (Corresponds to the y-axis)
            </summary>
            <returns>The width of the objects' area.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.Tier.GetInfoCurrentTier">
            <summary>
            Gets the current tier this object is placed on. Can't change in case of an immovable object.
            </summary>
            <returns>The current tier.</returns>
        </member>
        <member name="M:RAWSimO.Core.Elements.Tier.GetInfoInstance">
            <summary>
            Returns the active instance belonging to this element.
            </summary>
            <returns>The active instance.</returns>
        </member>
        <member name="T:RAWSimO.Core.Generator.InstanceGenerator">
            <summary>
            Supplies methods to generate new instances according to given parameters.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Generator.InstanceGenerator.GenerateLayout(RAWSimO.Core.Configurations.LayoutConfiguration,RAWSimO.Core.Interfaces.IRandomizer,RAWSimO.Core.Configurations.SettingConfiguration,RAWSimO.Core.Configurations.ControlConfiguration,System.Action{System.String})">
            <summary>
            Generates an instance with the given layout and configuration attached.
            </summary>
            <param name="layoutConfiguration">The layout configuration defining all the instance characteristics.</param>
            <param name="rand">A randomizer that is used during generation.</param>
            <param name="settingConfig">The configuration for the setting to emulate that will be attached for executing the simulation afterwards.</param>
            <param name="controlConfig">The configuration for the controlling mechanisms that will be attached for executing the simulation afterwards.</param>
            <param name="logAction">An optional action for logging.</param>
            <returns>The generated instance.</returns>
        </member>
        <member name="M:RAWSimO.Core.Generator.InstanceGenerator.InitializeInstance(RAWSimO.Core.Instance)">
            <summary>
            Initializes a given instance.
            </summary>
            <param name="instance">The instance to initialize.</param>
        </member>
        <member name="M:RAWSimO.Core.Generator.InstanceGenerator.GenerateMaTiLayoutPico(RAWSimO.Core.Interfaces.IRandomizer,RAWSimO.Core.Configurations.SettingConfiguration,RAWSimO.Core.Configurations.ControlConfiguration)">
            <summary>
            Generates the pico default layout.
            </summary>
            <param name="rand">A randomizer that is used during generation.</param>
            <param name="settingConfig">The configuration for the setting to emulate that will be attached for executing the simulation afterwards.</param>
            <param name="controlConfig">The configuration for the controlling mechanisms that will be attached for executing the simulation afterwards.</param>
            <returns>The generated instance.</returns>
        </member>
        <member name="M:RAWSimO.Core.Generator.InstanceGenerator.GenerateMaTiLayoutNano(RAWSimO.Core.Interfaces.IRandomizer,RAWSimO.Core.Configurations.SettingConfiguration,RAWSimO.Core.Configurations.ControlConfiguration)">
            <summary>
            Generates the nano default layout.
            </summary>
            <param name="rand">A randomizer that is used during generation.</param>
            <param name="settingConfig">The configuration for the setting to emulate that will be attached for executing the simulation afterwards.</param>
            <param name="controlConfig">The configuration for the controlling mechanisms that will be attached for executing the simulation afterwards.</param>
            <returns>The generated instance.</returns>
        </member>
        <member name="M:RAWSimO.Core.Generator.InstanceGenerator.GenerateMaTiLayoutMicro(RAWSimO.Core.Interfaces.IRandomizer,RAWSimO.Core.Configurations.SettingConfiguration,RAWSimO.Core.Configurations.ControlConfiguration)">
            <summary>
            Generates the micro default layout.
            </summary>
            <param name="rand">A randomizer that is used during generation.</param>
            <param name="settingConfig">The configuration for the setting to emulate that will be attached for executing the simulation afterwards.</param>
            <param name="controlConfig">The configuration for the controlling mechanisms that will be attached for executing the simulation afterwards.</param>
            <returns>The generated instance.</returns>
        </member>
        <member name="M:RAWSimO.Core.Generator.InstanceGenerator.GenerateMaTiLayoutMilli(RAWSimO.Core.Interfaces.IRandomizer,RAWSimO.Core.Configurations.SettingConfiguration,RAWSimO.Core.Configurations.ControlConfiguration)">
            <summary>
            Generates the milli default layout.
            </summary>
            <param name="rand">A randomizer that is used during generation.</param>
            <param name="settingConfig">The configuration for the setting to emulate that will be attached for executing the simulation afterwards.</param>
            <param name="controlConfig">The configuration for the controlling mechanisms that will be attached for executing the simulation afterwards.</param>
            <returns>The generated instance.</returns>
        </member>
        <member name="M:RAWSimO.Core.Generator.InstanceGenerator.GenerateMaTiLayoutCenti(RAWSimO.Core.Interfaces.IRandomizer,RAWSimO.Core.Configurations.SettingConfiguration,RAWSimO.Core.Configurations.ControlConfiguration)">
            <summary>
            Generates the centi default layout.
            </summary>
            <param name="rand">A randomizer that is used during generation.</param>
            <param name="settingConfig">The configuration for the setting to emulate that will be attached for executing the simulation afterwards.</param>
            <param name="controlConfig">The configuration for the controlling mechanisms that will be attached for executing the simulation afterwards.</param>
            <returns>The generated instance.</returns>
        </member>
        <member name="M:RAWSimO.Core.Generator.InstanceGenerator.GenerateMaTiLayoutDeca(RAWSimO.Core.Interfaces.IRandomizer,RAWSimO.Core.Configurations.SettingConfiguration,RAWSimO.Core.Configurations.ControlConfiguration)">
            <summary>
            Generates the deca default layout.
            </summary>
            <param name="rand">A randomizer that is used during generation.</param>
            <param name="settingConfig">The configuration for the setting to emulate that will be attached for executing the simulation afterwards.</param>
            <param name="controlConfig">The configuration for the controlling mechanisms that will be attached for executing the simulation afterwards.</param>
            <returns>The generated instance.</returns>
        </member>
        <member name="M:RAWSimO.Core.Generator.InstanceGenerator.GenerateMaTiLayoutHecto(RAWSimO.Core.Interfaces.IRandomizer,RAWSimO.Core.Configurations.SettingConfiguration,RAWSimO.Core.Configurations.ControlConfiguration)">
            <summary>
            Generates the hecto default layout.
            </summary>
            <param name="rand">A randomizer that is used during generation.</param>
            <param name="settingConfig">The configuration for the setting to emulate that will be attached for executing the simulation afterwards.</param>
            <param name="controlConfig">The configuration for the controlling mechanisms that will be attached for executing the simulation afterwards.</param>
            <returns>The generated instance.</returns>
        </member>
        <member name="M:RAWSimO.Core.Generator.InstanceGenerator.GenerateMaTiLayoutKilo(RAWSimO.Core.Interfaces.IRandomizer,RAWSimO.Core.Configurations.SettingConfiguration,RAWSimO.Core.Configurations.ControlConfiguration)">
            <summary>
            Generates the kilo default layout.
            </summary>
            <param name="rand">A randomizer that is used during generation.</param>
            <param name="settingConfig">The configuration for the setting to emulate that will be attached for executing the simulation afterwards.</param>
            <param name="controlConfig">The configuration for the controlling mechanisms that will be attached for executing the simulation afterwards.</param>
            <returns>The generated instance.</returns>
        </member>
        <member name="M:RAWSimO.Core.Generator.InstanceGenerator.GenerateMaTiLayoutMega(RAWSimO.Core.Interfaces.IRandomizer,RAWSimO.Core.Configurations.SettingConfiguration,RAWSimO.Core.Configurations.ControlConfiguration)">
            <summary>
            Generates the mega default layout.
            </summary>
            <param name="rand">A randomizer that is used during generation.</param>
            <param name="settingConfig">The configuration for the setting to emulate that will be attached for executing the simulation afterwards.</param>
            <param name="controlConfig">The configuration for the controlling mechanisms that will be attached for executing the simulation afterwards.</param>
            <returns>The generated instance.</returns>
        </member>
        <member name="M:RAWSimO.Core.Generator.InstanceGenerator.GenerateMaTiLayoutGiga(RAWSimO.Core.Interfaces.IRandomizer,RAWSimO.Core.Configurations.SettingConfiguration,RAWSimO.Core.Configurations.ControlConfiguration)">
            <summary>
            Generates the giga default layout.
            </summary>
            <param name="rand">A randomizer that is used during generation.</param>
            <param name="settingConfig">The configuration for the setting to emulate that will be attached for executing the simulation afterwards.</param>
            <param name="controlConfig">The configuration for the controlling mechanisms that will be attached for executing the simulation afterwards.</param>
            <returns>The generated instance.</returns>
        </member>
        <member name="M:RAWSimO.Core.Generator.InstanceGenerator.GenerateMaTiLayoutTiny(RAWSimO.Core.Interfaces.IRandomizer,RAWSimO.Core.Configurations.SettingConfiguration,RAWSimO.Core.Configurations.ControlConfiguration)">
            <summary>
            Generates the tiny default layout.
            </summary>
            <param name="rand">A randomizer that is used during generation.</param>
            <param name="settingConfig">The configuration for the setting to emulate that will be attached for executing the simulation afterwards.</param>
            <param name="controlConfig">The configuration for the controlling mechanisms that will be attached for executing the simulation afterwards.</param>
            <returns>The generated instance.</returns>
        </member>
        <member name="M:RAWSimO.Core.Generator.InstanceGenerator.GenerateMaTiLayoutSmall(RAWSimO.Core.Interfaces.IRandomizer,RAWSimO.Core.Configurations.SettingConfiguration,RAWSimO.Core.Configurations.ControlConfiguration)">
            <summary>
            Generates the tiny default layout.
            </summary>
            <param name="rand">A randomizer that is used during generation.</param>
            <param name="settingConfig">The configuration for the setting to emulate that will be attached for executing the simulation afterwards.</param>
            <param name="controlConfig">The configuration for the controlling mechanisms that will be attached for executing the simulation afterwards.</param>
            <returns>The generated instance.</returns>
        </member>
        <member name="M:RAWSimO.Core.Generator.InstanceGenerator.GenerateMaTiLayoutMedium(RAWSimO.Core.Interfaces.IRandomizer,RAWSimO.Core.Configurations.SettingConfiguration,RAWSimO.Core.Configurations.ControlConfiguration)">
            <summary>
            Generates the tiny default layout.
            </summary>
            <param name="rand">A randomizer that is used during generation.</param>
            <param name="settingConfig">The configuration for the setting to emulate that will be attached for executing the simulation afterwards.</param>
            <param name="controlConfig">The configuration for the controlling mechanisms that will be attached for executing the simulation afterwards.</param>
            <returns>The generated instance.</returns>
        </member>
        <member name="M:RAWSimO.Core.Generator.InstanceGenerator.GenerateMaTiLayoutLarge(RAWSimO.Core.Interfaces.IRandomizer,RAWSimO.Core.Configurations.SettingConfiguration,RAWSimO.Core.Configurations.ControlConfiguration)">
            <summary>
            Generates the tiny default layout.
            </summary>
            <param name="rand">A randomizer that is used during generation.</param>
            <param name="settingConfig">The configuration for the setting to emulate that will be attached for executing the simulation afterwards.</param>
            <param name="controlConfig">The configuration for the controlling mechanisms that will be attached for executing the simulation afterwards.</param>
            <returns>The generated instance.</returns>
        </member>
        <member name="M:RAWSimO.Core.Generator.InstanceGenerator.GenerateMaTiLayoutHuge(RAWSimO.Core.Interfaces.IRandomizer,RAWSimO.Core.Configurations.SettingConfiguration,RAWSimO.Core.Configurations.ControlConfiguration)">
            <summary>
            Generates the tiny default layout.
            </summary>
            <param name="rand">A randomizer that is used during generation.</param>
            <param name="settingConfig">The configuration for the setting to emulate that will be attached for executing the simulation afterwards.</param>
            <param name="controlConfig">The configuration for the controlling mechanisms that will be attached for executing the simulation afterwards.</param>
            <returns>The generated instance.</returns>
        </member>
        <member name="M:RAWSimO.Core.Generator.InstanceGenerator.GenerateMaTiLayoutConfiguration">
            <summary>
            Generates the default layout configuration.
            </summary>
            <returns>The default layout configuration.</returns>
        </member>
        <member name="M:RAWSimO.Core.Generator.LayoutGenerator.GetDirectionType(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Helper method projecting boolean direction markers into a direction type.
            </summary>
            <param name="east">Indicates whether a east direction is desired.</param>
            <param name="west">Indicates whether a west direction is desired.</param>
            <param name="north">Indicates whether a north direction is desired.</param>
            <param name="south">Indicates whether a south direction is desired.</param>
            <returns>The direction.</returns>
        </member>
        <member name="M:RAWSimO.Core.Generator.LayoutGenerator.DebugPrintLayout(RAWSimO.Core.Generator.Tile[0:,0:],System.Boolean,System.Boolean)">
            <summary>
            Prints the layout given by the 2D array to the console.
            </summary>
            <param name="tiles">The layout to print.</param>
            <param name="showCols">Shows the column indices instead of the type.</param>
            <param name="showRows">Shows the row indices instead of the type.</param>
        </member>
        <member name="T:RAWSimO.Core.Generator.UniDirections">
            <summary>
            A subset of the possible directions that is limited to single directions.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Generator.UniDirections.Invalid">
            <summary>
            An invalid direction.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Generator.UniDirections.East">
            <summary>
            A connection to the east.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Generator.UniDirections.North">
            <summary>
            A connection to the north.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Generator.UniDirections.South">
            <summary>
            A connection to the south.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Generator.UniDirections.West">
            <summary>
            A connection to the west.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Generator.HallwayField">
            <summary>
            Distinguishes the different hallways that can be generated.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Generator.HallwayField.East">
            <summary>
            Indicates the eastern hallway field.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Generator.HallwayField.West">
            <summary>
            Indicates the western hallway field.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Generator.HallwayField.South">
            <summary>
            Indicates the southern hallway field.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Generator.HallwayField.North">
            <summary>
            Indicates the northern hallway field.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Generator.Coordinate">
            <summary>
            Comprises a coordinate.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Generator.Coordinate.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new coordinate.
            </summary>
            <param name="row">The row of the coordinate.</param>
            <param name="column">The column of the coordinate.</param>
        </member>
        <member name="F:RAWSimO.Core.Generator.Coordinate.Row">
            <summary>
            The row.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Generator.Coordinate.Column">
            <summary>
            The column.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Generator.Coordinate.ToString">
            <summary>
            Returns a string representation of the coordinate.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="T:RAWSimO.Core.Generator.OrderGenerator">
            <summary>
            A class exposing methods to generate orders before starting the simulation and for generating configurations for online generation.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Generator.OrderGenerator.GenerateOrders(System.String,RAWSimO.Core.Items.LetterColors[],System.Collections.Generic.IDictionary{RAWSimO.Core.Items.LetterColors,System.Double},System.Int32,System.Double,System.Double,System.Int32,System.Double,System.Double,System.Int32,System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            Generates a list of orders and bundles. TODO this has to be adapted to handle simple items too. While doing so use a configuration for all the settings and feed it to the GUI.
            </summary>
            <param name="wordFile">The word file.</param>
            <param name="baseColors">The colors</param>
            <param name="baseColorProbabilities"></param>
            <param name="seed"></param>
            <param name="minTime"></param>
            <param name="maxTime"></param>
            <param name="orderCount"></param>
            <param name="minItemWeight"></param>
            <param name="maxItemWeight"></param>
            <param name="minPositionCount"></param>
            <param name="maxPositionCount"></param>
            <param name="minBundleSize"></param>
            <param name="maxBundleSize"></param>
            <param name="relativeBundleCount"></param>
            <returns></returns>
        </member>
        <member name="T:RAWSimO.Core.Generator.OrderGenerator.ItemDescriptionProbabilityWeightDistributionType">
            <summary>
            Defines the type of distribution used when generating the probability weights for the item descritptions.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Generator.OrderGenerator.ItemDescriptionProbabilityWeightDistributionType.Constant">
            <summary>
            Uses a constant value for all probability weights.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Generator.OrderGenerator.ItemDescriptionProbabilityWeightDistributionType.Uniform">
            <summary>
            Uses a uniform distribution to generate the probability weights.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Generator.OrderGenerator.ItemDescriptionProbabilityWeightDistributionType.Normal">
            <summary>
            Uses a normal distribution to generate the probability weights.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Generator.OrderGenerator.ItemDescriptionProbabilityWeightDistributionType.Exponential">
            <summary>
            Uses an exponential distribution to generate the probability weights.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Generator.OrderGenerator.ItemDescriptionProbabilityWeightDistributionType.Gamma">
            <summary>
            Uses a gamma distribution to generate the probability weights.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Generator.OrderGenerator.ItemDescriptionWeightDistributionType">
            <summary>
            Defines the type of distribution used when generating the weights for the item descriptions.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Generator.OrderGenerator.ItemDescriptionWeightDistributionType.Normal">
            <summary>
            Uses a normal distribution to generate the weights.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Generator.OrderGenerator.ItemDescriptionWeightDistributionType.Uniform">
            <summary>
            Uses an uniform distribution to generate the weights.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Generator.OrderGenerator.ItemDescriptionBundleSizeDistributionType">
            <summary>
            Defines the type of distribution used when generating the bundle size for the item descriptions.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Generator.OrderGenerator.ItemDescriptionBundleSizeDistributionType.Normal">
            <summary>
            Uses a normal distribution to generate the bundle size.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Generator.OrderGenerator.ItemDescriptionBundleSizeDistributionType.Uniform">
            <summary>
            Uses an uniform distribution to generate the bundle size.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Generator.OrderGenerator.SimpleItemGeneratorPreConfiguration">
            <summary>
            A class supplying basic parameters for online generation of simple items.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Generator.OrderGenerator.SimpleItemGeneratorPreConfiguration.ItemDescriptionCount">
            <summary>
            The number of item types to generate.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Generator.OrderGenerator.SimpleItemGeneratorPreConfiguration.ProbToUseCoWeight">
            <summary>
            The probability for using the combined probability over the simple probability per item type.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Generator.OrderGenerator.SimpleItemGeneratorPreConfiguration.DefaultWeight">
            <summary>
            The default weight per item type.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Generator.OrderGenerator.SimpleItemGeneratorPreConfiguration.DefaultCoWeight">
            <summary>
            The default co-weight for two items.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Generator.OrderGenerator.SimpleItemGeneratorPreConfiguration.ProbWeightDistributionType">
            <summary>
            Defines the type of distribution used when generating the probability weights for the item descritptions.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Generator.OrderGenerator.SimpleItemGeneratorPreConfiguration.ProbabilityWeightConstant">
            <summary>
            The constant probability weight to use when assigning the probability weights. This actually does make no difference, because the probability will be equal anyway.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Generator.OrderGenerator.SimpleItemGeneratorPreConfiguration.ProbabilityWeightUniformMin">
            <summary>
            The minimum value for the probability weight when drawing from a uniform distribution.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Generator.OrderGenerator.SimpleItemGeneratorPreConfiguration.ProbabilityWeightUniformMax">
            <summary>
            The maximum value for the probability weight when drawing from a uniform distribution.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Generator.OrderGenerator.SimpleItemGeneratorPreConfiguration.ProbabilityWeightNormalMu">
            <summary>
            The mean and also minimum value of the probability weight.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Generator.OrderGenerator.SimpleItemGeneratorPreConfiguration.ProbabilityWeightNormalSigma">
            <summary>
            The standard deviation for the probability weight.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Generator.OrderGenerator.SimpleItemGeneratorPreConfiguration.ProbabilityWeightExpLambda">
            <summary>
            The gamma value used for the exponential distribution to generate the probability weights.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Generator.OrderGenerator.SimpleItemGeneratorPreConfiguration.ProbabilityWeightGammaK">
            <summary>
            The k value used for the gamma distribution to generate the probability weights.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Generator.OrderGenerator.SimpleItemGeneratorPreConfiguration.ProbabilityWeightGammaTheta">
            <summary>
            The theta value used for the gamma distribution to generate the probability weights.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Generator.OrderGenerator.SimpleItemGeneratorPreConfiguration.ProbabilityWeightLB">
            <summary>
            A lower bound for generating the probability weight.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Generator.OrderGenerator.SimpleItemGeneratorPreConfiguration.ProbabilityWeightUB">
            <summary>
            An upper bound for generating the probability weight.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Generator.OrderGenerator.SimpleItemGeneratorPreConfiguration.WeightDistributionType">
            <summary>
            Defines the type of distribution used when generating the weights for the item descriptions.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Generator.OrderGenerator.SimpleItemGeneratorPreConfiguration.ItemWeightMu">
            <summary>
            The mean value for the actual item weight.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Generator.OrderGenerator.SimpleItemGeneratorPreConfiguration.ItemWeightSigma">
            <summary>
            The standard deviation for the actual item weight.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Generator.OrderGenerator.SimpleItemGeneratorPreConfiguration.ItemWeightLB">
            <summary>
            The minimal value for the actual item weight.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Generator.OrderGenerator.SimpleItemGeneratorPreConfiguration.ItemWeightUB">
            <summary>
            The maximal value for the actual item weight.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Generator.OrderGenerator.SimpleItemGeneratorPreConfiguration.SupplyBundleSize">
            <summary>
            Indicates whether the bundle size of the items will be supplied in the file or generated during runtime instead.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Generator.OrderGenerator.SimpleItemGeneratorPreConfiguration.BundleSizeDistributionType">
            <summary>
            Defines the type of distribution used when generating the bundle size for the item descriptions.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Generator.OrderGenerator.SimpleItemGeneratorPreConfiguration.BundleSizeMu">
            <summary>
            The mean value for the actual bundle size.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Generator.OrderGenerator.SimpleItemGeneratorPreConfiguration.BundleSizeSigma">
            <summary>
            The standard deviation for the actual bundle size.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Generator.OrderGenerator.SimpleItemGeneratorPreConfiguration.BundleSizeLB">
            <summary>
            The minimal value for the actual bundle size.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Generator.OrderGenerator.SimpleItemGeneratorPreConfiguration.BundleSizeUB">
            <summary>
            The maximal value for the actual bundle size.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Generator.OrderGenerator.SimpleItemGeneratorPreConfiguration.GivenCoWeights">
            <summary>
            The relative amount of given co-weights.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Generator.OrderGenerator.GenerateSimpleItemConfiguration(RAWSimO.Core.Generator.OrderGenerator.SimpleItemGeneratorPreConfiguration)">
            <summary>
            Generates a complete configuration for the simple item generator.
            </summary>
            <param name="preConfig">The pre-configuration defining characteristics of the actual configuration.</param>
            <returns>The complete configuration.</returns>
        </member>
        <member name="T:RAWSimO.Core.Geometrics.Circle">
            <summary>
            The base class for all objects in the simulation that are internally represented as circles.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Geometrics.Circle.#ctor(RAWSimO.Core.Instance)">
            <summary>
            Creates a new circle.
            </summary>
            <param name="instance">The instance this circle belongs to.</param>
        </member>
        <member name="F:RAWSimO.Core.Geometrics.Circle._changed">
            <summary>
            States whether there was a change since the last fetch of the information.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Geometrics.Circle._x">
            <summary>
            The x-position of the object's center in 2-dimensional space.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Geometrics.Circle.X">
            <summary>
            The x-position of the object's center in 2-dimensional space.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Geometrics.Circle._y">
            <summary>
            The y-position of the object's center in 2-dimensional space.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Geometrics.Circle.Y">
            <summary>
            The y-position of the object's center in 2-dimensional space.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Geometrics.Circle.Radius">
            <summary>
            The radius of the circle
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Geometrics.Circle._orientation">
            <summary>
            The orientation in radians. An element facing east is defined with orientation 0 or equally 2*pi.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Geometrics.Circle.Orientation">
            <summary>
            The orientation in radians. An element facing east is defined with orientation 0 or equally 2*pi.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Geometrics.Circle._tier">
            <summary>
            The tier on which the object is (initially) located.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Geometrics.Circle.Tier">
            <summary>
            The tier on which the object is (initially) located.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Geometrics.Circle.Moving">
            <summary>
            Indicates whether the object is moving or not.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Geometrics.Circle.GetDistance(System.Double,System.Double)">
            <summary>
            Returns the distance from the circle's center to the specified position.
            </summary>
            <param name="x">The x-position to measure.</param>
            <param name="y">The y-position to measure.</param>
            <returns>The distance between the center of this circle and the specified position.</returns>
        </member>
        <member name="M:RAWSimO.Core.Geometrics.Circle.GetDistance(RAWSimO.Core.Geometrics.Circle)">
            <summary>
            Returns the distance from this circle's center to the center of the other circle.
            </summary>
            <param name="c">The other circle.</param>
            <returns>The distance between the center of this circle and the center of the other circle.</returns>
        </member>
        <member name="M:RAWSimO.Core.Geometrics.Circle.GetSquaredDistance(System.Double,System.Double)">
            <summary>
            Returns the squared distance from the circles Station center to the specified position.
            </summary>
            <param name="x">The x-position to measure.</param>
            <param name="y">The y-position to measure.</param>
            <returns>The squared distance between the center of this circle and the specified position.</returns>
        </member>
        <member name="M:RAWSimO.Core.Geometrics.Circle.GetSquaredDistance(RAWSimO.Core.Geometrics.Circle)">
            <summary>
            Returns the distance from this circles Station center to the center of the other circle.
            </summary>
            <param name="c">The other circle.</param>
            <returns>The squared distance between the center of this circle and the center of the other circle.</returns>
        </member>
        <member name="M:RAWSimO.Core.Geometrics.Circle.GetOrientationDifference(System.Double)">
            <summary>
            Returns the difference between the given angle and the orientation (angle) of this object.
            </summary>
            <param name="otherAngle">The other orientation (angle).</param>
            <returns>The difference between this orientation and the specified one. Positive if the other is to the left of this one, negative otherwise.</returns>
        </member>
        <member name="M:RAWSimO.Core.Geometrics.Circle.GetOrientationDifference(System.Double,System.Double)">
            <summary>
            Returns the difference of two angles, positive if angle2 is to the left of angle1, negative if angle2 is to the right of angle1.
            </summary>
            <param name="angle1">The first angle.</param>
            <param name="angle2">The second angle.</param>
            <returns>Difference of angle2-angle1, normalized to [0,PI].</returns>
        </member>
        <member name="M:RAWSimO.Core.Geometrics.Circle.GetAbsoluteOrientationDifference(System.Double,System.Double)">
            <summary>
            Returns the absolute difference of two angles.
            </summary>
            <param name="angle1">The first angle.</param>
            <param name="angle2">The second angle.</param>
            <returns>Difference of the angles.</returns>
        </member>
        <member name="M:RAWSimO.Core.Geometrics.Circle.GetOrientation(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the orientation value for a specific object.
            Range [0,2*PI]
            </summary>
            <param name="positionX">object position x</param>
            <param name="positionY">object position y</param>
            <param name="lookAtX">look at position x</param>
            <param name="lookAtY">look at position y</param>
            <returns>orientaion value</returns>
        </member>
        <member name="M:RAWSimO.Core.Geometrics.Circle.GetInfoCenterX">
            <summary>
            Returns the x-coordinate of the object.
            </summary>
            <returns>The x-coordinate.</returns>
        </member>
        <member name="M:RAWSimO.Core.Geometrics.Circle.GetInfoCenterY">
            <summary>
            Returns the y-coordinate of the object.
            </summary>
            <returns>The y-coordinate.</returns>
        </member>
        <member name="M:RAWSimO.Core.Geometrics.Circle.GetInfoTLX">
            <summary>
            Returns the x-coordinate of the object.
            </summary>
            <returns>The x-coordinate.</returns>
        </member>
        <member name="M:RAWSimO.Core.Geometrics.Circle.GetInfoTLY">
            <summary>
            Returns the y-coordinate of the object.
            </summary>
            <returns>The y-coordinate.</returns>
        </member>
        <member name="M:RAWSimO.Core.Geometrics.Circle.GetInfoRadius">
            <summary>
            Returns the radius of the object.
            </summary>
            <returns>The radius.</returns>
        </member>
        <member name="M:RAWSimO.Core.Geometrics.Circle.GetInfoLength">
            <summary>
            Returns the length of the object regarding the x-dimension.
            </summary>
            <returns>The length.</returns>
        </member>
        <member name="M:RAWSimO.Core.Geometrics.Circle.GetInfoWidth">
            <summary>
            Returns the width of the object regarding the y-dimension.
            </summary>
            <returns>The width.</returns>
        </member>
        <member name="M:RAWSimO.Core.Geometrics.Circle.GetInfoOrientation">
            <summary>
            Returns the orientation of the object.
            </summary>
            <returns>The orientation.</returns>
        </member>
        <member name="M:RAWSimO.Core.Geometrics.Circle.IsCollision(RAWSimO.Core.Geometrics.Circle)">
            <summary>
            Checks whether there is a collision given for this element and the other.
            </summary>
            <param name="c">The other element.</param>
            <returns><code>true</code> if the elements collide, <code>false</code> otherwise.</returns>
        </member>
        <member name="M:RAWSimO.Core.Geometrics.Circle.IsCollision(System.Double,System.Double,System.Double)">
            <summary>
            Checks whether there is a collision given for this element and the given characteristics of another element.
            </summary>
            <param name="otherX">The x-value of the position of the other element.</param>
            <param name="otherY">The y-value of the position of the other element.</param>
            <param name="otherRadius">The radius of the other element.</param>
            <returns><code>true</code> if the elements collide, <code>false</code> otherwise.</returns>
        </member>
        <member name="T:RAWSimO.Core.Geometrics.QuadDirections">
            <summary>
            Defines the different sectors of a <code>QuadNode</code>.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Geometrics.QuadDirections.SW">
            <summary>
            South-West sector.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Geometrics.QuadDirections.SE">
            <summary>
            South-East sector.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Geometrics.QuadDirections.NW">
            <summary>
            North-West sector.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Geometrics.QuadDirections.NE">
            <summary>
            North-East sector.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Geometrics.QuadNode`1">
            <summary>
            Represents on node of a quadtree. The node can either contain all elements itself or have four subnodes separating the elements by their position.
            </summary>
            <typeparam name="T">The type of elements contained by the node.</typeparam>
        </member>
        <member name="M:RAWSimO.Core.Geometrics.QuadNode`1.#ctor(System.Int32,System.Int32,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a new quadnode.
            </summary>
            <param name="divisionThreshold"></param>
            <param name="combineThreshold"></param>
            <param name="x1">The lower bound of the x-values belonging to this sector.</param>
            <param name="x2">The upper bound of the x-values belonging to this sector.</param>
            <param name="y1">The lower bound of the y-values belonging to this sector.</param>
            <param name="y2">The upper bound of the y-values belonging to this sector.</param>
        </member>
        <member name="F:RAWSimO.Core.Geometrics.QuadNode`1.Children">
            <summary>
            The sub-nodes having this node as a parent. These nodes subdivide the space of this node into 4 equally sized parts.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Geometrics.QuadNode`1._childrenIDs">
            <summary>
            The IDs of all children as an array.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Geometrics.QuadNode`1.X1">
            <summary>
            The lower bound of the x-values belonging to this sector.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Geometrics.QuadNode`1.X2">
            <summary>
            The upper bound of the x-values belonging to this sector.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Geometrics.QuadNode`1.Y1">
            <summary>
            The lower bound of the y-values belonging to this sector.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Geometrics.QuadNode`1.Y2">
            <summary>
            The upper bound of the y-values belonging to this sector.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Geometrics.QuadNode`1._midX">
            <summary>
            The middle x-value of this node.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Geometrics.QuadNode`1._midY">
            <summary>
            The middle y-value of this node.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Geometrics.QuadNode`1._midXs">
            <summary>
            The middle x-values of the children.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Geometrics.QuadNode`1._midYs">
            <summary>
            The middle y-values of the children.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Geometrics.QuadNode`1.DivisionThreshold">
            <summary>
            One QuadNode is subdivided, if it contains at least this count of objects.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Geometrics.QuadNode`1.CombineThreshold">
            <summary>
            If fewer objects are contained in the four children of a QuadNode, they are recombined.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Geometrics.QuadNode`1.Objects">
            <summary>
            Contains all objects attached to this node.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Geometrics.QuadNode`1._largestObject">
            <summary>
            The largest object of this node.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Geometrics.QuadNode`1.Item(RAWSimO.Core.Geometrics.QuadDirections)">
            <summary>
            Returns the <code>QuadNode</code> belonging to the specified direction.
            </summary>
            <param name="direction">The direction of the child.</param>
            <returns>The desired <code>QuadNode</code> object.</returns>
        </member>
        <member name="M:RAWSimO.Core.Geometrics.QuadNode`1.IsValidMove(`0,System.Double,System.Double)">
            <summary>
            Returns true if Circle c moving to location x, y will not collide with another Circle, false if it will collide.
            </summary>
            <param name="c">Circle to check for collision.</param>
            <param name="x">The new x-coordinate.</param>
            <param name="y">The new y-coordinate.</param>
            <returns><code>true</code> if the move is valid, <code>false</code> otherwise.</returns>
        </member>
        <member name="M:RAWSimO.Core.Geometrics.QuadNode`1.IsCollision(`0)">
            <summary>
            Checks an object for any collisions with other objects.
            </summary>
            <param name="c">The object to check for collisions.</param>
            <returns><code>true</code> if there are any collisions, <code>false</code> otherwise.</returns>
        </member>
        <member name="M:RAWSimO.Core.Geometrics.QuadNode`1.Add(`0)">
            <summary>
            Adds the specified Circle to the tree.
            </summary>
            <param name="c">The Circle to add.</param>
        </member>
        <member name="M:RAWSimO.Core.Geometrics.QuadNode`1.Remove(`0)">
            <summary>
            Removes the specified Circle from the tree.
            </summary>
            <param name="c">The Circle to remove.</param>
        </member>
        <member name="M:RAWSimO.Core.Geometrics.QuadNode`1.GetObjectsWithinDistance(System.Double,System.Double,System.Double)">
            <summary>
            Returns an enumeration of objects within the given distance around the given coordinates.
            </summary>
            <param name="x">The x-value of the coordinate.</param>
            <param name="y">The y-value of the coordinate.</param>
            <param name="distance">The distance for the search.</param>
            <returns>All objects within distance.</returns>
        </member>
        <member name="M:RAWSimO.Core.Geometrics.QuadNode`1.GetNearestObject(System.Double,System.Double,`0@,System.Double@)">
            <summary>
            Gets the object nearest to the given coordinates.
            </summary>
            <param name="x">The x-value.</param>
            <param name="y">The y-value.</param>
            <param name="nearestObject">Is updated with the nearest object of the node, if there is a nearer one.</param>
            <param name="nearestDistance">This field is passed the current best distance which is updated, if a better one is found.</param>
            <returns>The object nearest to the given coordinates.</returns>
        </member>
        <member name="M:RAWSimO.Core.Geometrics.QuadNode`1.CheckChildLookupUnnecessary(System.Int32,System.Double,System.Double,System.Double)">
            <summary>
            Checks whether the given section has to be checked considering the so far best distance.
            </summary>
            <param name="childID">The section to be checked.</param>
            <param name="x">The x-value to search for the nearest neigbor for.</param>
            <param name="y">The y-value to search for the nearest neigbor for.</param>
            <param name="bestDistance">The best distance so far.</param>
            <returns><code>true</code> if the lookup of the given section is unnecessary, <code>false</code> otherwise.</returns>
        </member>
        <member name="M:RAWSimO.Core.Geometrics.QuadNode`1.Count">
            <summary>
            Returns the number of objects beneath this node of the QuadTree.
            </summary>
            <returns>The number of objects at this node or the summed number of objects at the child-nodes of this node.</returns>
        </member>
        <member name="M:RAWSimO.Core.Geometrics.QuadNode`1.Validate">
            <summary>
            Validates this node in terms of checking whether all objects are within the nodes boundaries.
            </summary>
            <returns><code>true</code> if the node is valid, <code>false</code> otherwise.</returns>
        </member>
        <member name="M:RAWSimO.Core.Geometrics.QuadNode`1.Reoptimize">
            <summary>
            Rearranges the tree by expanding and collapsing this node and all of its children, if necessary.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Geometrics.QuadNode`1.GetShortestDistanceWithoutCollision">
            <summary>
            Finds the shortest distance any object can move before a collision could happen.
            </summary>
            <returns>The shortest distance to a collision.</returns>
        </member>
        <member name="T:RAWSimO.Core.Geometrics.QuadTree`1">
            <summary>
            A quadtree implementation used for more efficient collision detection.
            </summary>
            <typeparam name="T">The type of the elements to check collisions for.</typeparam>
        </member>
        <member name="F:RAWSimO.Core.Geometrics.QuadTree`1.DivisionThreshold">
            <summary>
            One QuadNode is subdivided, if it contains at least this count of objects.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Geometrics.QuadTree`1.CombineThreshold">
            <summary>
            If fewer objects are contained in the four children of a QuadNode, they are recombined.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Geometrics.QuadTree`1.#ctor(System.Double,System.Double)">
            <summary>
            Creates a new <code>QuadTree</code> of the given size.
            </summary>
            <param name="length">The width of the area to manage.</param>
            <param name="width">The height of the area to manage.</param>
        </member>
        <member name="M:RAWSimO.Core.Geometrics.QuadTree`1.#ctor(System.Int32,System.Int32,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a new <code>QuadTree</code> with the given parameters.
            </summary>
            <param name="divisionThreshold">One QuadNode is subdivided, if it contains at least this count of objects.</param>
            <param name="combineThreshold">If fewer objects are contained in the four children of a QuadNode, they are recombined.</param>
            <param name="x1">The lower bound of the x-values belonging to this sector.</param>
            <param name="x2">The upper bound of the x-values belonging to this sector.</param>
            <param name="y1">The lower bound of the y-values belonging to this sector.</param>
            <param name="y2">The upper bound of the y-values belonging to this sector.</param>
        </member>
        <member name="F:RAWSimO.Core.Geometrics.QuadTree`1._rootNode">
            <summary>
            The root node of this QuadTree.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Geometrics.QuadTree`1.Add(`0)">
            <summary>
            Adds the specified object to the tree.
            </summary>
            <param name="c">The object to add to this tree.</param>
        </member>
        <member name="M:RAWSimO.Core.Geometrics.QuadTree`1.Remove(`0)">
            <summary>
            Removes the specified object from the tree.
            </summary>
            <param name="c">The object to remove.</param>
        </member>
        <member name="M:RAWSimO.Core.Geometrics.QuadTree`1.Count">
            <summary>
            Returns the number of objects inside this QuadTree.
            </summary>
            <returns>The number of objects in the tree.</returns>
        </member>
        <member name="M:RAWSimO.Core.Geometrics.QuadTree`1.GetShortestDistanceWithoutCollision">
            <summary>
            Finds the shortest distance any object can move before a collision could happen.
            </summary>
            <returns>The shortest distance to a collision.</returns>
        </member>
        <member name="M:RAWSimO.Core.Geometrics.QuadTree`1.IsValidMove(`0,System.Double,System.Double)">
            <summary>
            Returns true if Circle c moving to location x, y will not collide with another Circle, false if it will collide.
            </summary>
            <param name="c">Circle to check for collision.</param>
            <param name="x">The new x-coordinate.</param>
            <param name="y">The new y-coordinate.</param>
            <returns><code>true</code> if the move is valid, <code>false</code> otherwise.</returns>
        </member>
        <member name="M:RAWSimO.Core.Geometrics.QuadTree`1.IsCollision(`0)">
            <summary>
            Checks an object for any collisions with other objects.
            </summary>
            <param name="c">The object to check for collisions.</param>
            <returns><code>true</code> if there are any collisions, <code>false</code> otherwise.</returns>
        </member>
        <member name="M:RAWSimO.Core.Geometrics.QuadTree`1.MoveTo(`0,System.Double,System.Double)">
            <summary>
            Moves Circle c from its current location to the position specified by x, y.
            </summary>
            <param name="c">The Circle to move.</param>
            <param name="x">The new x-coordinate.</param>
            <param name="y">The new y-coordinate.</param>
        </member>
        <member name="M:RAWSimO.Core.Geometrics.QuadTree`1.UpdateTree">
            <summary>
            Updates the tree such that it stays an efficient size.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Geometrics.QuadTree`1.ValidateTree">
            <summary>
            Validates the complete QuadTree by checking whether all objects are within the boundaries of their nodes.
            </summary>
            <returns><code>true</code> if the tree is valid, <code>false</code> otherwise.</returns>
        </member>
        <member name="M:RAWSimO.Core.Geometrics.QuadTree`1.GetObjectsWithinDistance(System.Double,System.Double,System.Double)">
            <summary>
            Returns an enumeration of objects within the given distance around the given coordinates.
            </summary>
            <param name="x">The x-value of the coordinate.</param>
            <param name="y">The y-value of the coordinate.</param>
            <param name="distance">The distance for the search.</param>
            <returns>All objects within distance.</returns>
        </member>
        <member name="M:RAWSimO.Core.Geometrics.QuadTree`1.GetNearestObject(System.Double,System.Double,System.Double@)">
            <summary>
            Returns the object nearest to the given coordinates.
            </summary>
            <param name="x">The x-value of the coordinates.</param>
            <param name="y">The y-value of the coordinates.</param>
            <param name="distance">The distance to the nearest object.</param>
            <returns>The object nearest to the given coordinates.</returns>
        </member>
        <member name="T:RAWSimO.Core.Geometrics.SimpleRectangle">
            <summary>
            A simple class comprising a rectangle for bound checking.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Geometrics.SimpleRectangle.#ctor(RAWSimO.Core.Elements.Tier,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a new simple rectangle.
            </summary>
            <param name="tier">The tier this rectangle is located on.</param>
            <param name="x">The x-value of the lower left corner.</param>
            <param name="y">The y-value of the lower left corner.</param>
            <param name="length">The length of this rectangle (x-direction).</param>
            <param name="width">The width of this rectangle (y-direction).</param>
        </member>
        <member name="P:RAWSimO.Core.Geometrics.SimpleRectangle.Tier">
            <summary>
            The tier this rectangle is located on.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Geometrics.SimpleRectangle.XLower">
            <summary>
            The lower border of this rectangle in x-direction.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Geometrics.SimpleRectangle.XUpper">
            <summary>
            The upper border of this rectangle in x-direction.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Geometrics.SimpleRectangle.YLower">
            <summary>
            The lower border of this rectangle in y-direction.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Geometrics.SimpleRectangle.YUpper">
            <summary>
            The upper border of this rectangle in y-direction.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Geometrics.SimpleRectangle.Length">
            <summary>
            The length of this rectangle in x-dimension.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Geometrics.SimpleRectangle.Width">
            <summary>
            The width of this rectangle in y-dimension.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Geometrics.SimpleRectangle.IsContained(RAWSimO.Core.Elements.Tier,System.Double,System.Double)">
            <summary>
            Checks whether the given coordinates are within this rectangle.
            </summary>
            <param name="tier">The tier coordinate.</param>
            <param name="x">The x-coordinate.</param>
            <param name="y">The y-coordinate.</param>
            <returns><code>true</code> if the coordinates are within the rectangle, <code>false</code> otherwise.</returns>
        </member>
        <member name="T:RAWSimO.Core.Helper.GnuPlotter">
            <summary>
            Exposes functionality to use GNUPlot.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Helper.GnuPlotter.Plot2DPoints(System.String,System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.Collections.Generic.IEnumerable{System.Tuple{System.Double,System.Double}}}},System.String)">
            <summary>
            Plots points on a two dimensional plane.
            </summary>
            <param name="filename">The base filename to use.</param>
            <param name="points">The points that shall be plotted.</param>
            <param name="title">The title of the plot.</param>
        </member>
        <member name="T:RAWSimO.Core.Info.IBotInfo">
            <summary>
            The interface for supplying information about a bot object.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Info.IBotInfo.GetInfoTask">
            <summary>
            Returns the current task the bot is executing.
            </summary>
            <returns>The active task.</returns>
        </member>
        <member name="M:RAWSimO.Core.Info.IBotInfo.GetInfoState">
            <summary>
            Returns the current state the bot is in.
            </summary>
            <returns>The active state.</returns>
        </member>
        <member name="M:RAWSimO.Core.Info.IBotInfo.GetInfoGoalX">
            <summary>
            Gets the x-position of the goal of the bot.
            </summary>
            <returns>The x-position.</returns>
        </member>
        <member name="M:RAWSimO.Core.Info.IBotInfo.GetInfoGoalY">
            <summary>
            Gets the y-position of the goal of the bot.
            </summary>
            <returns>The y-position.</returns>
        </member>
        <member name="M:RAWSimO.Core.Info.IBotInfo.GetInfoCurrentWaypoint">
            <summary>
            Gets the current waypoint that is considered by planning.
            </summary>
            <returns>The current waypoint.</returns>
        </member>
        <member name="M:RAWSimO.Core.Info.IBotInfo.GetInfoDestinationWaypoint">
            <summary>
            Gets the destination of the bot.
            </summary>
            <returns>The destination.</returns>
        </member>
        <member name="M:RAWSimO.Core.Info.IBotInfo.GetInfoGoalWaypoint">
            <summary>
            Gets the goal of the bot.
            </summary>
            <returns>The goal.</returns>
        </member>
        <member name="M:RAWSimO.Core.Info.IBotInfo.GetInfoPath">
            <summary>
            Gets the current path of the bot.
            </summary>
            <returns>The current path.</returns>
        </member>
        <member name="M:RAWSimO.Core.Info.IBotInfo.GetInfoSpeed">
            <summary>
            Gets the current speed of the bot.
            </summary>
            <returns>The speed in m/s.</returns>
        </member>
        <member name="M:RAWSimO.Core.Info.IBotInfo.GetInfoTargetOrientation">
            <summary>
            Gets the target orientation in radians. (An element facing east is defined with orientation 0 or equally 2*pi.)
            </summary>
            <returns>The orientation.</returns>
        </member>
        <member name="M:RAWSimO.Core.Info.IBotInfo.GetInfoBlocked">
            <summary>
            Indicates whether the robot is currently blocked.
            </summary>
            <returns><code>true</code> if the robot is blocked, <code>false</code> otherwise.</returns>
        </member>
        <member name="M:RAWSimO.Core.Info.IBotInfo.GetInfoBlockedLeft">
            <summary>
            The time remaining the bot is blocked.
            </summary>
            <returns>The time remaining the bot is blocked.</returns>
        </member>
        <member name="M:RAWSimO.Core.Info.IBotInfo.GetInfoIsQueueing">
            <summary>
            Indicates whether the bot is currently queueing in a managed area.
            </summary>
            <returns><code>true</code> if the robot is within a queue area, <code>false</code> otherwise.</returns>
        </member>
        <member name="T:RAWSimO.Core.Info.IElevatorInfo">
            <summary>
            The interface for supplying information about an elevator object.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Info.IElevatorInfo.GetInfoWaypoints">
            <summary>
            Returns all waypoints of this elevator.
            </summary>
            <returns>The waypoints of this elevator.</returns>
        </member>
        <member name="T:RAWSimO.Core.Info.IGeneralObjectInfo">
            <summary>
            The base interface for getting information about an general object.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Info.IGeneralObjectInfo.GetInfoCenterX">
            <summary>
            Gets the x-position of the center of the object.
            </summary>
            <returns>The x-position.</returns>
        </member>
        <member name="M:RAWSimO.Core.Info.IGeneralObjectInfo.GetInfoCenterY">
            <summary>
            Gets the y-position of the center of the object.
            </summary>
            <returns>The y-position.</returns>
        </member>
        <member name="M:RAWSimO.Core.Info.IGeneralObjectInfo.GetInfoTLX">
            <summary>
            Gets the x-position of the bottom left corner of the objects' area.
            </summary>
            <returns>The x-position.</returns>
        </member>
        <member name="M:RAWSimO.Core.Info.IGeneralObjectInfo.GetInfoTLY">
            <summary>
            Gets the y-position of the bottom left corner of the objects' area.
            </summary>
            <returns>The y-position.</returns>
        </member>
        <member name="M:RAWSimO.Core.Info.IGeneralObjectInfo.GetInfoCurrentTier">
            <summary>
            Gets the current tier this object is placed on. Can't change in case of an immovable object.
            </summary>
            <returns>The current tier.</returns>
        </member>
        <member name="M:RAWSimO.Core.Info.IGeneralObjectInfo.GetInfoInstance">
            <summary>
            Returns the active instance belonging to this element.
            </summary>
            <returns>The active instance.</returns>
        </member>
        <member name="T:RAWSimO.Core.Info.IGuardInfo">
            <summary>
            The interface for getting information about a guard object.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Info.IGuardInfo.GetInfoIsBarrier">
            <summary>
            Indicates whether this guard is monitoring the entrance or exit of a queue.
            </summary>
            <returns><code>true</code> if the guard monitors an entrance, <code>false</code> otherwise.</returns>
        </member>
        <member name="M:RAWSimO.Core.Info.IGuardInfo.GetInfoIsEntry">
            <summary>
            Indicates whether this guard serves as an entry to the protected area or an exit.
            </summary>
            <returns><code>true</code> if it is an entry, <code>false</code> otherwise.</returns>
        </member>
        <member name="M:RAWSimO.Core.Info.IGuardInfo.GetInfoIsAccessible">
            <summary>
            Indicates whether this guard is currently blocked.
            </summary>
            <returns><code>false</code> if the guard is in block mode, <code>true</code> otherwise.</returns>
        </member>
        <member name="M:RAWSimO.Core.Info.IGuardInfo.GetInfoRequests">
            <summary>
            Returns the current number of requests.
            </summary>
            <returns>The number of requests.</returns>
        </member>
        <member name="M:RAWSimO.Core.Info.IGuardInfo.GetInfoCapacity">
            <summary>
            Returns the maximal capacity.
            </summary>
            <returns>The maximal capacity.</returns>
        </member>
        <member name="M:RAWSimO.Core.Info.IGuardInfo.GetInfoFrom">
            <summary>
            Returns the start waypoint of the guarded path.
            </summary>
            <returns>The start waypoint.</returns>
        </member>
        <member name="M:RAWSimO.Core.Info.IGuardInfo.GetInfoTo">
            <summary>
            Returns the end waypoint of the guarded path.
            </summary>
            <returns>The end waypoint.</returns>
        </member>
        <member name="M:RAWSimO.Core.Info.IGuardInfo.GetInfoSemaphore">
            <summary>
            Returns the corresponding semaphore.
            </summary>
            <returns>The semaphore this guard belongs to.</returns>
        </member>
        <member name="T:RAWSimO.Core.Info.IIdentifiableObjectInfo">
            <summary>
            The interface for getting information about an identifiable object.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Info.IIdentifiableObjectInfo.GetInfoID">
            <summary>
            Gets the ID of the object.
            </summary>
            <returns>The ID.</returns>
        </member>
        <member name="T:RAWSimO.Core.Info.IImmovableObjectInfo">
            <summary>
            The more basic interface for getting information about an immovable object.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Info.IImmovableObjectInfo.GetInfoLength">
            <summary>
            The length of the objects' area. (Corresponds to the x-axis)
            </summary>
            <returns>The length of the objects' area.</returns>
        </member>
        <member name="M:RAWSimO.Core.Info.IImmovableObjectInfo.GetInfoWidth">
            <summary>
            The width of the objects' area. (Corresponds to the y-axis)
            </summary>
            <returns>The width of the objects' area.</returns>
        </member>
        <member name="T:RAWSimO.Core.Info.IInputStationInfo">
            <summary>
            The interface for getting information about an input station object.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Info.IInputStationInfo.GetInfoAssignedBundles">
            <summary>
            Gets the number of assigned bundles.
            </summary>
            <returns>The number of assigned bundles.</returns>
        </member>
        <member name="M:RAWSimO.Core.Info.IInputStationInfo.GetInfoCapacity">
            <summary>
            Gets the capacity this station offers.
            </summary>
            <returns>The capacity of the station.</returns>
        </member>
        <member name="M:RAWSimO.Core.Info.IInputStationInfo.GetInfoCapacityUsed">
            <summary>
            Gets the absolute capacity currently in use.
            </summary>
            <returns>The capacity in use.</returns>
        </member>
        <member name="M:RAWSimO.Core.Info.IInputStationInfo.GetInfoCapacityReserved">
            <summary>
            Gets the absolute capacity currently reserved.
            </summary>
            <returns>The reserved capacity.</returns>
        </member>
        <member name="M:RAWSimO.Core.Info.IInputStationInfo.GetInfoBundles">
            <summary>
            Gets all bundles currently contained in this station.
            </summary>
            <returns>The bundles of this station.</returns>
        </member>
        <member name="M:RAWSimO.Core.Info.IInputStationInfo.GetInfoContentChanged">
            <summary>
            Indicates whether the content of the station changed.
            </summary>
            <returns>Indicates whether the content of the station changed.</returns>
        </member>
        <member name="M:RAWSimO.Core.Info.IInputStationInfo.GetInfoActivationOrderID">
            <summary>
            Indicates the number that determines the overall sequence in which stations get activated.
            </summary>
            <returns>The order ID of the station.</returns>
        </member>
        <member name="M:RAWSimO.Core.Info.IInputStationInfo.GetInfoQueue">
            <summary>
            Gets the information queue.
            </summary>
            <returns>Queue</returns>
        </member>
        <member name="M:RAWSimO.Core.Info.IInputStationInfo.GetInfoActive">
            <summary>
            Indicates whether the station is currently activated (available for new assignments).
            </summary>
            <returns><code>true</code> if the station is active, <code>false</code> otherwise.</returns>
        </member>
        <member name="M:RAWSimO.Core.Info.IInputStationInfo.GetInfoBlocked">
            <summary>
            Indicates whether the station is currently blocked due to activity.
            </summary>
            <returns><code>true</code> if it is blocked, <code>false</code> otherwise.</returns>
        </member>
        <member name="M:RAWSimO.Core.Info.IInputStationInfo.GetInfoBlockedLeft">
            <summary>
            Gets the remaining time this station is blocked.
            </summary>
            <returns>The remaining time this station is blocked.</returns>
        </member>
        <member name="M:RAWSimO.Core.Info.IInputStationInfo.GetInfoOpenRequests">
            <summary>
            Gets the of requests currently open (not assigned to a bot) for this station.
            </summary>
            <returns>The number of active requests.</returns>
        </member>
        <member name="M:RAWSimO.Core.Info.IInputStationInfo.GetInfoOpenBundles">
            <summary>
            Gets the number of currently open bundles (not yet stored) for this station.
            </summary>
            <returns>The number of open bundles.</returns>
        </member>
        <member name="T:RAWSimO.Core.Info.IInstanceInfo">
            <summary>
            The interface for getting information about an instance object.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Info.IInstanceInfo.GetInfoPods">
            <summary>
            Returns an enumeration of all pods of this instance.
            </summary>
            <returns>All pods of this instance.</returns>
        </member>
        <member name="M:RAWSimO.Core.Info.IInstanceInfo.GetInfoBots">
            <summary>
            Returns an enumeration of all bots of this instance.
            </summary>
            <returns>All bots of this instance.</returns>
        </member>
        <member name="M:RAWSimO.Core.Info.IInstanceInfo.GetInfoTiers">
            <summary>
            Returns an enumeration of all tiers of this instance.
            </summary>
            <returns>All tiers of this instance.</returns>
        </member>
        <member name="M:RAWSimO.Core.Info.IInstanceInfo.GetInfoElevators">
            <summary>
            Returns the elevators connected to this tier.
            </summary>
            <returns>All elevators connected to this tier.</returns>
        </member>
        <member name="M:RAWSimO.Core.Info.IInstanceInfo.GetInfoChanged">
            <summary>
            Indicates whether anything has changed in the instance.
            </summary>
            <returns><code>false</code> if nothing changed since the last query, <code>true</code> otherwise.</returns>
        </member>
        <member name="M:RAWSimO.Core.Info.IInstanceInfo.GetInfoItemDescriptions">
            <summary>
            Returns all item descriptions used in the instance.
            </summary>
            <returns>All item descriptions used by the instance.</returns>
        </member>
        <member name="M:RAWSimO.Core.Info.IInstanceInfo.GetInfoItemManager">
            <summary>
            Returns the item manager of this instance.
            </summary>
            <returns>The item manager of this instance.</returns>
        </member>
        <member name="M:RAWSimO.Core.Info.IInstanceInfo.GetInfoStatItemsHandled">
            <summary>
            Returns the count of items handled by the system.
            </summary>
            <returns>The number of items handled.</returns>
        </member>
        <member name="M:RAWSimO.Core.Info.IInstanceInfo.GetInfoStatBundlesHandled">
            <summary>
            Returns the count of bundles handled by the system.
            </summary>
            <returns>The number of bundles handled.</returns>
        </member>
        <member name="M:RAWSimO.Core.Info.IInstanceInfo.GetInfoStatOrdersHandled">
            <summary>
            Returns the count of orders handled by the system.
            </summary>
            <returns>The number of orders handled.</returns>
        </member>
        <member name="M:RAWSimO.Core.Info.IInstanceInfo.GetInfoStatOrdersLate">
            <summary>
            Returns the count of orders handled that were not completed in time.
            </summary>
            <returns>The number of orders not completed in time.</returns>
        </member>
        <member name="M:RAWSimO.Core.Info.IInstanceInfo.GetInfoStatRepositioningMoves">
            <summary>
            Returns the count of repositioning moves started so far.
            </summary>
            <returns>The number of repositioning moves started.</returns>
        </member>
        <member name="M:RAWSimO.Core.Info.IInstanceInfo.GetInfoStatCollisions">
            <summary>
            Returns the count of occurred collisions.
            </summary>
            <returns>The number of occurred collisions.</returns>
        </member>
        <member name="M:RAWSimO.Core.Info.IInstanceInfo.GetInfoStatStorageFillLevel">
            <summary>
            Returns the storage fill level.
            </summary>
            <returns>The storage fill level.</returns>
        </member>
        <member name="M:RAWSimO.Core.Info.IInstanceInfo.GetInfoStatStorageFillAndReservedLevel">
            <summary>
            Returns the storage fill level including the already present reservations.
            </summary>
            <returns>The storage fill level.</returns>
        </member>
        <member name="M:RAWSimO.Core.Info.IInstanceInfo.GetInfoStatStorageFillAndReservedAndBacklogLevel">
            <summary>
            Returns the storage fill level including the already present reservations and the capacity consumed by backlog bundles.
            </summary>
            <returns>The storage fill level.</returns>
        </member>
        <member name="M:RAWSimO.Core.Info.IInstanceInfo.GetInfoName">
            <summary>
            Returns the current name of the instance.
            </summary>
            <returns>The name of the instance.</returns>
        </member>
        <member name="T:RAWSimO.Core.Info.IItemDescriptionInfo">
            <summary>
            The interface for getting information about an item description object.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Info.IItemDescriptionInfo.GetInfoWeight">
            <summary>
            Gets the weight of one item of this type.
            </summary>
            <returns>The weight of the item.</returns>
        </member>
        <member name="M:RAWSimO.Core.Info.IItemDescriptionInfo.GetInfoType">
            <summary>
            The type of the item.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Info.IItemDescriptionInfo.GetInfoDescription">
            <summary>
            Gets a string representation of the item.
            </summary>
            <returns>A string representing the item.</returns>
        </member>
        <member name="T:RAWSimO.Core.Info.IColoredLetterDescriptionInfo">
            <summary>
            The interface for getting information about a colored letter description object.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Info.IColoredLetterDescriptionInfo.GetInfoColor">
            <summary>
            The color of this letter.
            </summary>
            <returns>The color.</returns>
        </member>
        <member name="M:RAWSimO.Core.Info.IColoredLetterDescriptionInfo.GetInfoLetter">
            <summary>
            The letter of this colored letter.
            </summary>
            <returns>The character describing the letter.</returns>
        </member>
        <member name="T:RAWSimO.Core.Info.ISimpleItemDescriptionInfo">
            <summary>
            The interface for getting information about simple item description object.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Info.ISimpleItemDescriptionInfo.GetInfoHue">
            <summary>
            The color of this item (used to better distinguish the items - does not have any additional meaning).
            </summary>
            <returns>The color.</returns>
        </member>
        <member name="T:RAWSimO.Core.Info.IItemBundleInfo">
            <summary>
            The interface for getting information about an item bundle object.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Info.IItemBundleInfo.GetInfoBundleWeight">
            <summary>
            The weight of the complete bundle.
            </summary>
            <returns>The weight of the bundle.</returns>
        </member>
        <member name="M:RAWSimO.Core.Info.IItemBundleInfo.GetInfoItemCount">
            <summary>
            The number of items contained in this bundle.
            </summary>
            <returns>The number of items contained.</returns>
        </member>
        <member name="M:RAWSimO.Core.Info.IItemBundleInfo.GetInfoItemDescription">
            <summary>
            The corresponding item description.
            </summary>
            <returns>The corresponding item description.</returns>
        </member>
        <member name="T:RAWSimO.Core.Info.IItemManagerInfo">
            <summary>
            The interface for supplying information about an item managere object.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Info.IItemManagerInfo.GetInfoPendingOrderCount">
            <summary>
            Gets the number of currently available orders that are not yet allocated.
            </summary>
            <returns>The number of currently available orders that are not yet allocated.</returns>
        </member>
        <member name="M:RAWSimO.Core.Info.IItemManagerInfo.GetInfoPendingBundleCount">
            <summary>
            Gets the number of currently available bundles that are not yet allocated.
            </summary>
            <returns>The number of currently available bundles that are not yet allocated.</returns>
        </member>
        <member name="M:RAWSimO.Core.Info.IItemManagerInfo.GetInfoPendingOrders">
            <summary>
            Gets an enumeration of the currently pending orders. Hence, all orders not yet assigned to any station.
            </summary>
            <returns>The orders currently pending.</returns>
        </member>
        <member name="M:RAWSimO.Core.Info.IItemManagerInfo.GetInfoOpenOrders">
            <summary>
            Gets an enumeration of the currently open orders. This are all orders currently assigned to a station.
            </summary>
            <returns>The orders currently open.</returns>
        </member>
        <member name="M:RAWSimO.Core.Info.IItemManagerInfo.GetInfoCompletedOrders">
            <summary>
            Gets an enumeration of the already completed orders.
            </summary>
            <returns>The orders already completed.</returns>
        </member>
        <member name="T:RAWSimO.Core.Info.IMovableObjectInfo">
            <summary>
            The more basic interface for supplying information about a movable object.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Info.IMovableObjectInfo.GetInfoOrientation">
            <summary>
            Gets the orientation the object is facing in radians. (An element facing east is defined with orientation 0 or equally 2*pi.)
            </summary>
            <returns>The orientation.</returns>
        </member>
        <member name="M:RAWSimO.Core.Info.IMovableObjectInfo.GetInfoRadius">
            <summary>
            Gets the radius defining the size of the object.
            </summary>
            <returns>The radius.</returns>
        </member>
        <member name="M:RAWSimO.Core.Info.IMovableObjectInfo.GetInfoChanged">
            <summary>
            Indicates whether the underlying object changed since the last call of <code>GetChanged()</code>.
            </summary>
            <returns><code>true</code> if the object changed since the last call of this method, <code>false</code> otherwise.</returns>
        </member>
        <member name="T:RAWSimO.Core.Info.IOrderInfo">
            <summary>
            The interface that handles communication with order-objects.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Info.IOrderInfo.GetInfoPositions">
            <summary>
            Gets all positions of the order.
            </summary>
            <returns>An enumeration of all item-description in this order.</returns>
        </member>
        <member name="M:RAWSimO.Core.Info.IOrderInfo.GetInfoDemandCount(RAWSimO.Core.Info.IItemDescriptionInfo)">
            <summary>
            Gets the given position's quantity.
            </summary>
            <param name="item">The position.</param>
            <returns>The quantity of the position.</returns>
        </member>
        <member name="M:RAWSimO.Core.Info.IOrderInfo.GetInfoServedCount(RAWSimO.Core.Info.IItemDescriptionInfo)">
            <summary>
            Gets the given position's already served quantity.
            </summary>
            <param name="item">The position.</param>
            <returns>The already served quantity of the position.</returns>
        </member>
        <member name="M:RAWSimO.Core.Info.IOrderInfo.GetInfoIsCompleted">
            <summary>
            Indicates whether the order is already completed.
            </summary>
            <returns><code>true</code> if the order is completed, <code>false</code> otherwise.</returns>
        </member>
        <member name="T:RAWSimO.Core.Info.IOutputStationInfo">
            <summary>
            The interface for supplying information about an output-station object.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Info.IOutputStationInfo.GetInfoAssignedOrders">
            <summary>
            Gets the number of assigned orders.
            </summary>
            <returns>The number of assigned orders.</returns>
        </member>
        <member name="M:RAWSimO.Core.Info.IOutputStationInfo.GetInfoCapacity">
            <summary>
            Gets the capacity this station offers.
            </summary>
            <returns>The capacity of the station.</returns>
        </member>
        <member name="M:RAWSimO.Core.Info.IOutputStationInfo.GetInfoCapacityUsed">
            <summary>
            Gets the absolute capacity currently in use.
            </summary>
            <returns>The capacity in use.</returns>
        </member>
        <member name="M:RAWSimO.Core.Info.IOutputStationInfo.GetInfoOpenOrders">
            <summary>
            Gets all order currently open.
            </summary>
            <returns>The enumeration of open orders.</returns>
        </member>
        <member name="M:RAWSimO.Core.Info.IOutputStationInfo.GetInfoCompletedOrders">
            <summary>
            Gets all orders already completed.
            </summary>
            <returns>The enumeration of completed orders.</returns>
        </member>
        <member name="M:RAWSimO.Core.Info.IOutputStationInfo.GetInfoActivationOrderID">
            <summary>
            Indicates the number that determines the overall sequence in which stations get activated.
            </summary>
            <returns>The order ID of the station.</returns>
        </member>
        <member name="M:RAWSimO.Core.Info.IOutputStationInfo.GetInfoQueue">
            <summary>
            Gets the information queue.
            </summary>
            <returns>Queue</returns>
        </member>
        <member name="M:RAWSimO.Core.Info.IOutputStationInfo.GetInfoActive">
            <summary>
            Indicates whether the station is currently activated (available for new assignments).
            </summary>
            <returns><code>true</code> if the station is active, <code>false</code> otherwise.</returns>
        </member>
        <member name="M:RAWSimO.Core.Info.IOutputStationInfo.GetInfoBlocked">
            <summary>
            Indicates whether the station is currently blocked due to activity.
            </summary>
            <returns><code>true</code> if it is blocked, <code>false</code> otherwise.</returns>
        </member>
        <member name="M:RAWSimO.Core.Info.IOutputStationInfo.GetInfoBlockedLeft">
            <summary>
            Gets the remaining time this station is blocked.
            </summary>
            <returns>The remaining time this station is blocked.</returns>
        </member>
        <member name="M:RAWSimO.Core.Info.IOutputStationInfo.GetInfoOpenRequests">
            <summary>
            Gets the number of requests currently open (not assigned to a bot) for this station.
            </summary>
            <returns>The number of active requests.</returns>
        </member>
        <member name="M:RAWSimO.Core.Info.IOutputStationInfo.GetInfoOpenQueuedRequests">
            <summary>
            Gets the number of queued requests currently open (not assigned to a bot) for this station.
            </summary>
            <returns>The number of active queued requests.</returns>
        </member>
        <member name="M:RAWSimO.Core.Info.IOutputStationInfo.GetInfoOpenItems">
            <summary>
            Gets the number of currently open items (not yet picked) for this station.
            </summary>
            <returns>The number of open items.</returns>
        </member>
        <member name="M:RAWSimO.Core.Info.IOutputStationInfo.GetInfoOpenQueuedItems">
            <summary>
            Gets the number of currently queued and open items (not yet picked) for this station.
            </summary>
            <returns>The number of open queued items.</returns>
        </member>
        <member name="M:RAWSimO.Core.Info.IOutputStationInfo.GetInfoInboundPods">
            <summary>
            Gets the number of pods currently incoming to this station.
            </summary>
            <returns>The number of pods currently incoming to this station.</returns>
        </member>
        <member name="T:RAWSimO.Core.Info.IPodInfo">
            <summary>
            The interface for supplying information about a pod object.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Info.IPodInfo.GetInfoHeatValue">
            <summary>
            Gets the current heat associated with this pod as a value between 0 (low heat) and 100 (high heat).
            </summary>
            <returns>The heat of this pod.</returns>
        </member>
        <member name="M:RAWSimO.Core.Info.IPodInfo.GetInfoCapacity">
            <summary>
            Gets the capacity this pod offers.
            </summary>
            <returns>The capacity of the pod.</returns>
        </member>
        <member name="M:RAWSimO.Core.Info.IPodInfo.GetInfoCapacityUsed">
            <summary>
            Gets the absolute capacity currently in use.
            </summary>
            <returns>The capacity in use.</returns>
        </member>
        <member name="M:RAWSimO.Core.Info.IPodInfo.GetInfoCapacityReserved">
            <summary>
            Gets the absolute capacity currently reserved.
            </summary>
            <returns>The capacity reserved.</returns>
        </member>
        <member name="M:RAWSimO.Core.Info.IPodInfo.GetInfoContent(RAWSimO.Core.Info.IItemDescriptionInfo)">
            <summary>
            Gets information about number of items of the given kind in this pod.
            </summary>
            <returns>The number of units contained in the pod of the specified item.</returns>
        </member>
        <member name="M:RAWSimO.Core.Info.IPodInfo.GetInfoContentChanged">
            <summary>
            Indicates whether the content of the pod changed.
            </summary>
            <returns>Indicates whether the content of the pod changed.</returns>
        </member>
        <member name="M:RAWSimO.Core.Info.IPodInfo.GetInfoReadyForRefill">
            <summary>
            Indicates whether the pod is ready for refill.
            </summary>
            <returns>Indicates whether the pod is ready for refill.</returns>
        </member>
        <member name="P:RAWSimO.Core.Info.IPodInfo.InfoTagPodStorageType">
            <summary>
            The type of this pod as distinguished by an integer number that starts at 0. This can be set by any controller to give feedback about the mechanism.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Info.IPodInfo.InfoTagPodStorageInfo">
            <summary>
            Some additional information about the pod.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Info.ISemaphoreInfo">
            <summary>
            The interface for supplying information about a semaphore object.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Info.ISemaphoreInfo.GetInfoID">
            <summary>
            The ID of this semaphore.
            </summary>
            <returns>The ID of this semaphore.</returns>
        </member>
        <member name="M:RAWSimO.Core.Info.ISemaphoreInfo.GetInfoGuards">
            <summary>
            The number of guards associated with this semaphore.
            </summary>
            <returns>The number of guards belonging to this semaphore.</returns>
        </member>
        <member name="T:RAWSimO.Core.Info.ITierInfo">
            <summary>
            The interface for supplying information about a tier object.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Info.ITierInfo.GetInfoBots">
            <summary>
            Returns the bots currently moving on this tier.
            </summary>
            <returns>All bots of the tier.</returns>
        </member>
        <member name="M:RAWSimO.Core.Info.ITierInfo.GetInfoPods">
            <summary>
            Returns the pods currently placed on this tier.
            </summary>
            <returns>All pods of this tier.</returns>
        </member>
        <member name="M:RAWSimO.Core.Info.ITierInfo.GetInfoInputStations">
            <summary>
            Returns the input stations placed on this tier.
            </summary>
            <returns>All input stations located on this tier.</returns>
        </member>
        <member name="M:RAWSimO.Core.Info.ITierInfo.GetInfoOutputStations">
            <summary>
            Returns the output stations placed on this tier.
            </summary>
            <returns>All output stations located on this tier.</returns>
        </member>
        <member name="M:RAWSimO.Core.Info.ITierInfo.GetInfoWaypoints">
            <summary>
            Returns all waypoints on this tier.
            </summary>
            <returns>The waypoints on this tier.</returns>
        </member>
        <member name="M:RAWSimO.Core.Info.ITierInfo.GetInfoGuards">
            <summary>
            Returns all guards on this tier.
            </summary>
            <returns>The guards working on this tier.</returns>
        </member>
        <member name="M:RAWSimO.Core.Info.ITierInfo.GetInfoZ">
            <summary>
            Returns the vertical position of the tier.
            </summary>
            <returns>The z-position.</returns>
        </member>
        <member name="T:RAWSimO.Core.Info.IWaypointInfo">
            <summary>
            The interface for supplying information about a waypoint object.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Info.IWaypointInfo.GetInfoStorageLocation">
            <summary>
            Indicates whether the waypoint is a storage location.
            </summary>
            <returns><code>true</code> if it is a storage location, <code>false</code> otherwise.</returns>
        </member>
        <member name="M:RAWSimO.Core.Info.IWaypointInfo.GetInfoConnectedWaypoints">
            <summary>
            Gets all outgoing connections of the waypoint.
            </summary>
            <returns>An enumeration of waypoints this waypoint has a directed edge to.</returns>
        </member>
        <member name="T:RAWSimO.Core.Instance">
            THIS PARTIAL CLASS CONTAINS THE CORE FIELDS OF AN INSTANCE
            <summary>
            The core element of each simulation instance.
            </summary>
            THIS PARTIAL CLASS CONTAINS ALL METHODS AND ADDITIONAL FIELDS FOR CREATION OF NEW ELEMENTS OF THE INSTANCE
            <summary>
            The core element of each simulation instance.
            </summary>
            THIS PARTIAL CLASS CONTAINS NOTIFIERS AND EVENTS USED TO INVOKE CALLBACKS IN ORDER TO UPDATE OBSERVERS
            <summary>
            The core element of each simulation instance.
            </summary>
            THIS PARTIAL CLASS CONTAINS ADDITIONAL FIELDS AND META-INFORMATION
            <summary>
            The core element of each simulation instance.
            </summary>
            THIS PARTIAL CLASS CONTAINS ALL CORE ELEMENTS OF THE PERFORMANCE INDICATORS
            <summary>
            The core element of each simulation instance.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Instance.Name">
            <summary>
            The name of the instance.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Instance.SettingConfig">
            <summary>
            The configuration to use while executing the instance.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Instance.ControllerConfig">
            <summary>
            The configuration for all controlling mechanisms.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Instance.ItemDescriptions">
            <summary>
            All SKUs available in this instance.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Instance.ItemBundles">
            <summary>
            All item bundles known so far.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Instance.OrderList">
            <summary>
            A list of given orders that will be passed to the item manager.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Instance.Compound">
            <summary>
            The compound declaring all physical attributes of the instance.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Instance.Bots">
            <summary>
            All robots of this instance.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Instance.Pods">
            <summary>
            All pods of this instance.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Instance.Elevators">
            <summary>
            All elevators of this instance.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Instance.InputStations">
            <summary>
            All input-stations of this instance.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Instance.OutputStations">
            <summary>
            All output-stations of this instance.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Instance.Waypoints">
            <summary>
            All waypoints of this instance.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Instance.Semaphores">
            <summary>
            All semaphors of this instance.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Instance.CreateInstance(RAWSimO.Core.Configurations.SettingConfiguration,RAWSimO.Core.Configurations.ControlConfiguration)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="settingConfig">The configuration for the setting to emulate.</param>
            <param name="controlConfig">The configuration for the controllers.</param>
            <returns>The newly created instance.</returns>
        </member>
        <member name="F:RAWSimO.Core.Instance._itemDescriptionID">
            <summary>
            Current ID to identify the corresponding instance element.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Instance.RegisterItemDescriptionID">
            <summary>
            Registers and returns a new ID for an object of the given type.
            </summary>
            <returns>A new unique ID that can be used to identify the object.</returns>
        </member>
        <member name="F:RAWSimO.Core.Instance._volatileItemDescriptionIDs">
            <summary>
            All volative IDs used for item descriptions so far.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Instance.CreateItemDescription(System.Int32,RAWSimO.Core.Items.ItemType)">
            <summary>
            Creates an abstract item description for an item of the specified type.
            </summary>
            <param name="id">The ID of the item description.</param>
            <param name="itemType">The type of the item.</param>
            <returns>An abstract item description.</returns>
        </member>
        <member name="F:RAWSimO.Core.Instance._itemBundleID">
            <summary>
            Current ID to identify the corresponding instance element.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Instance.CreateItemBundle(RAWSimO.Core.Items.ItemDescription,System.Int32)">
            <summary>
            Creates a bundle of items.
            </summary>
            <param name="itemDescription">An element describing the characteristics of the item.</param>
            <param name="count">The number of items in the bundle.</param>
            <returns>A bundle of items.</returns>
        </member>
        <member name="M:RAWSimO.Core.Instance.CreateOrderList(RAWSimO.Core.Items.ItemType)">
            <summary>
            Creates a new order list.
            </summary>
            <param name="itemType">The type of the items in the list.</param>
            <returns></returns>
        </member>
        <member name="M:RAWSimO.Core.Instance.CreateCompound">
            <summary>
            Creates the compound that manages all the tiers.
            </summary>
            <returns>The newly created compound.</returns>
        </member>
        <member name="F:RAWSimO.Core.Instance._tierID">
            <summary>
            Current ID to identify the corresponding instance element.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Instance.RegisterTierID">
            <summary>
            Registers and returns a new ID for an object of the given type.
            </summary>
            <returns>A new unique ID that can be used to identify the object.</returns>
        </member>
        <member name="M:RAWSimO.Core.Instance.CreateTier(System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Adds a new tier to the compound.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Instance._botID">
            <summary>
            Current ID to identify the corresponding instance element.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Instance.RegisterBotID">
            <summary>
            Registers and returns a new ID for an object of the given type.
            </summary>
            <returns>A new unique ID that can be used to identify the object.</returns>
        </member>
        <member name="F:RAWSimO.Core.Instance._volatileBotIDs">
            <summary>
            All volative IDs used for bots so far.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Instance.CreateBot(System.Int32,RAWSimO.Core.Elements.Tier,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a bot with the given characteristics.
            </summary>
            <param name="id">The ID of the bot.</param>
            <param name="tier">The initial position (tier).</param>
            <param name="x">The initial position (x-coordinate).</param>
            <param name="y">The initial position (y-coordinate).</param>
            <param name="radius">The radius of the bot.</param>
            <param name="orientation">The initial orientation.</param>
            <param name="podTransferTime">The time for picking up and setting down a pod.</param>
            <param name="maxAcceleration">The maximal acceleration in m/s^2.</param>
            <param name="maxDeceleration">The maximal deceleration in m/s^2.</param>
            <param name="maxVelocity">The maximal velocity in m/s.</param>
            <param name="turnSpeed">The time it takes the bot to take a full turn in s.</param>
            <param name="collisionPenaltyTime">The penalty time for a collision in s.</param>
            <returns>The newly created bot.</returns>
        </member>
        <member name="F:RAWSimO.Core.Instance._podID">
            <summary>
            Current ID to identify the corresponding instance element.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Instance.RegisterPodID">
            <summary>
            Registers and returns a new ID for an object of the given type.
            </summary>
            <returns>A new unique ID that can be used to identify the object.</returns>
        </member>
        <member name="F:RAWSimO.Core.Instance._volatilePodIDs">
            <summary>
            All volative IDs used for pods so far.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Instance.SetVolatileIDForPod(RAWSimO.Core.Elements.Pod)">
            <summary>
            Determines and sets a volatile ID for the given pod. This must be called, if volatile IDs will be used.
            </summary>
            <param name="pod">The pod to determine the volatile ID for.</param>
        </member>
        <member name="M:RAWSimO.Core.Instance.CreatePod(System.Int32,RAWSimO.Core.Elements.Tier,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a pod with the given characteristics.
            </summary>
            <param name="id">The ID of the pod.</param>
            <param name="tier">The initial position (tier).</param>
            <param name="x">The initial position (x-coordinate).</param>
            <param name="y">The initial position (y-coordinate).</param>
            <param name="radius">The radius of the pod.</param>
            <param name="orientation">The initial orientation of the pod.</param>
            <param name="capacity">The capacity of the pod.</param>
            <returns>The newly created pod.</returns>
        </member>
        <member name="M:RAWSimO.Core.Instance.CreatePod(System.Int32,RAWSimO.Core.Elements.Tier,RAWSimO.Core.Waypoints.Waypoint,System.Double,System.Double,System.Double)">
            <summary>
            Creates a pod with the given characteristics.
            </summary>
            <param name="id">The ID of the pod.</param>
            <param name="tier">The initial position (tier).</param>
            <param name="waypoint">The waypoint to place the pod at.</param>
            <param name="radius">The radius of the pod.</param>
            <param name="orientation">The initial orientation of the pod.</param>
            <param name="capacity">The capacity of the pod.</param>
            <returns>The newly created pod.</returns>
        </member>
        <member name="F:RAWSimO.Core.Instance._elevatorID">
            <summary>
            Current ID to identify the corresponding instance element.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Instance.RegisterElevatorID">
            <summary>
            Registers and returns a new ID for an object of the given type.
            </summary>
            <returns>A new unique ID that can be used to identify the object.</returns>
        </member>
        <member name="M:RAWSimO.Core.Instance.CreateElevator(System.Int32)">
            <summary>
            Creates a new elevator.
            </summary>
            <param name="id">The ID of the elevator.</param>
            <returns>The newly created elevator.</returns>
        </member>
        <member name="F:RAWSimO.Core.Instance._inputStationID">
            <summary>
            Current ID to identify the corresponding instance element.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Instance.RegisterInputStationID">
            <summary>
            Registers and returns a new ID for an object of the given type.
            </summary>
            <returns>A new unique ID that can be used to identify the object.</returns>
        </member>
        <member name="F:RAWSimO.Core.Instance._volatileInputStationIDs">
            <summary>
            All volative IDs used for input-stations so far.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Instance.CreateInputStation(System.Int32,RAWSimO.Core.Elements.Tier,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Creates a new input-station.
            </summary>
            <param name="id">The ID of the input station.</param>
            <param name="tier">The position (tier).</param>
            <param name="x">The position (x-coordinate).</param>
            <param name="y">The position (y-coordinate).</param>
            <param name="radius">The radius of the station.</param>
            <param name="capacity">The capacity of the station.</param>
            <param name="itemBundleTransfertime">The time it takes to handle one bundle at the station.</param>
            <param name="activationOrderID">The order ID of the station that defines the sequence in which the stations have to be activated.</param>
            <returns>The newly created input station.</returns>
        </member>
        <member name="F:RAWSimO.Core.Instance._outputStationID">
            <summary>
            Current ID to identify the corresponding instance element.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Instance.RegisterOutputStationID">
            <summary>
            Registers and returns a new ID for an object of the given type.
            </summary>
            <returns>A new unique ID that can be used to identify the object.</returns>
        </member>
        <member name="F:RAWSimO.Core.Instance._volatileOutputStationIDs">
            <summary>
            All volative IDs used for output-stations so far.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Instance.CreateOutputStation(System.Int32,RAWSimO.Core.Elements.Tier,System.Double,System.Double,System.Double,System.Int32,System.Double,System.Double,System.Int32)">
            <summary>
            Creates a new output-station.
            </summary>
            <param name="id">The ID of the input station.</param>
            <param name="tier">The position (tier).</param>
            <param name="x">The position (x-coordinate).</param>
            <param name="y">The position (y-coordinate).</param>
            <param name="radius">The radius of the station.</param>
            <param name="capacity">The capacity of the station.</param>
            <param name="itemTransferTime">The time it takes to handle one item at the station.</param>
            <param name="itemPickTime">The time it takes to pick the item from a pod (excluding other handling times).</param>
            <param name="activationOrderID">The order ID of the station that defines the sequence in which the stations have to be activated.</param>
            <returns>The newly created output station.</returns>
        </member>
        <member name="M:RAWSimO.Core.Instance.RegisterWaypointID">
            <summary>
            Registers and returns a new ID for an object of the given type.
            </summary>
            <returns>A new unique ID that can be used to identify the object.</returns>
        </member>
        <member name="F:RAWSimO.Core.Instance._volatileWaypointIDs">
            <summary>
            All volative IDs used for waypoints so far.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Instance.SetVolatileIDForWaypoint(RAWSimO.Core.Waypoints.Waypoint)">
            <summary>
            Determines and sets a volatile ID for the given waypoint. This must be called, if volatile IDs will be used.
            </summary>
            <param name="waypoint">The waypoint to determine the volatile ID for.</param>
        </member>
        <member name="M:RAWSimO.Core.Instance.CreateWaypoint(System.Int32,RAWSimO.Core.Elements.Tier,RAWSimO.Core.Elements.InputStation,System.Boolean)">
            <summary>
            Creates a new waypoint that serves as the handover point for an input station.
            </summary>
            <param name="id">The ID of the waypoint.</param>
            <param name="tier">The position (tier).</param>
            <param name="station">The station.</param>
            <param name="isQueueWaypoint">Indicates whether this waypoint is also a queue waypoint.</param>
            <returns>The newly created waypoint.</returns>
        </member>
        <member name="M:RAWSimO.Core.Instance.CreateWaypoint(System.Int32,RAWSimO.Core.Elements.Tier,RAWSimO.Core.Elements.OutputStation,System.Boolean)">
            <summary>
            Creates a new waypoint that serves as the handover point for an output station.
            </summary>
            <param name="id">The ID of the waypoint.</param>
            <param name="tier">The position (tier).</param>
            <param name="station">The station.</param>
            <param name="isQueueWaypoint">Indicates whether this waypoint is also a queue waypoint.</param>
            <returns>The newly created waypoint.</returns>
        </member>
        <member name="M:RAWSimO.Core.Instance.CreateWaypoint(System.Int32,RAWSimO.Core.Elements.Tier,RAWSimO.Core.Elements.Elevator,System.Double,System.Double,System.Boolean)">
            <summary>
            Creates a new waypoint that serves as the handover point for an elevator.
            </summary>
            <param name="id">The ID of the waypoint.</param>
            <param name="tier">The position (tier).</param>
            <param name="x">The position (x-coordinate).</param>
            <param name="y">The position (y-coordinate).</param>
            <param name="elevator">The elevator.</param>
            <param name="isQueueWaypoint">Indicates whether this waypoint is also a queue waypoint.</param>
            <returns>The newly created waypoint.</returns>
        </member>
        <member name="M:RAWSimO.Core.Instance.CreateWaypoint(System.Int32,RAWSimO.Core.Elements.Tier,RAWSimO.Core.Elements.Pod)">
            <summary>
            Creates a new waypoint that serves as a storage location.
            </summary>
            <param name="id">The ID of the waypoint.</param>
            <param name="tier">The position (tier).</param>
            <param name="pod">The pod currently stored at it.</param>
            <returns>The newly created waypoint.</returns>
        </member>
        <member name="M:RAWSimO.Core.Instance.CreateWaypoint(System.Int32,RAWSimO.Core.Elements.Tier,System.Double,System.Double,System.Boolean,System.Boolean)">
            <summary>
            Creates a typical waypoint.
            </summary>
            <param name="id">The ID of the waypoint.</param>
            <param name="tier">The position (tier).</param>
            <param name="x">The position (x-coordinate).</param>
            <param name="y">The position (y-coordinate).</param>
            <param name="podStorageLocation">Indicates whether the waypoint serves as a storage location.</param>
            <param name="isQueueWaypoint">Indicates whether the waypoint belongs to a queue.</param>
            <returns>The newly created waypoint.</returns>
        </member>
        <member name="M:RAWSimO.Core.Instance.RegisterSemaphoreID">
            <summary>
            Registers and returns a new ID for an object of the given type.
            </summary>
            <returns>A new unique ID that can be used to identify the object.</returns>
        </member>
        <member name="M:RAWSimO.Core.Instance.CreateSemaphore(System.Int32,System.Int32)">
            <summary>
            Creates a new semaphore.
            </summary>
            <param name="id">The ID of the semaphore.</param>
            <param name="maximalCount">The maximal number of bots in the managed area.</param>
            <returns>The newly created semaphore.</returns>
        </member>
        <member name="M:RAWSimO.Core.Instance.Flush">
            <summary>
            Finalizes the instance.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Instance.LateInitEventHandler">
            <summary>
            The event handler for the event that is raised when the simulation is just before starting and after all other managers were initialized.
            </summary>
        </member>
        <member name="E:RAWSimO.Core.Instance.LateInit">
            <summary>
            The event that is raised when the simulation is just before starting and after all other managers were initialized.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Instance.LateInitialize">
            <summary>
            Notifies the instance that all previous initializations are done (all managers are available) and we are almost ready to start the simulation updates.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Instance.ItemPickedEventHandler">
            <summary>
            The event handler for the event that is raised when an item is picked.
            </summary>
            <param name="pod">The pod the item was stored in.</param>
            <param name="bot">The bot that is carrying the pod.</param>
            <param name="station">The output-station the item was picked at.</param>
            <param name="item">The item that was picked.</param>
        </member>
        <member name="E:RAWSimO.Core.Instance.ItemPicked">
            <summary>
            The event that is raised when an item is picked.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Instance.NotifyItemHandled(RAWSimO.Core.Elements.Pod,RAWSimO.Core.Elements.Bot,RAWSimO.Core.Elements.OutputStation,RAWSimO.Core.Items.ItemDescription)">
            <summary>
            Notifies the instance that items were handled in order to keep the statistics up-to-date.
            </summary>
            <param name="pod">The corresponding pod.</param>
            <param name="bot">The corresponding bot.</param>
            <param name="oStation">The corresponding station.</param>
            <param name="item">The item that was picked.</param>
        </member>
        <member name="T:RAWSimO.Core.Instance.LinePickedEventHandler">
            <summary>
            The event handler for the event that is raised when a line is picked.
            </summary>
            <param name="station">The output-station the item was picked at.</param>
            <param name="item">The item that was picked.</param>
            <param name="lineCount">The number of items that have been picked for the line.</param>
        </member>
        <member name="E:RAWSimO.Core.Instance.LinePicked">
            <summary>
            The event that is raised when an item is picked.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Instance.NotifyLineHandled(RAWSimO.Core.Elements.OutputStation,RAWSimO.Core.Items.ItemDescription,System.Int32)">
            <summary>
            Notifies the instance that a line was handled in order to keep the statistics up-to-date.
            </summary>
            <param name="oStation">The corresponding station.</param>
            <param name="item">The item that was picked.</param>
            <param name="lineCount">The number of items that have been picked for the line.</param>
        </member>
        <member name="T:RAWSimO.Core.Instance.OrderCompletedEventHandler">
            <summary>
            The handler for the event that is called when an order is completed.
            </summary>
            <param name="order">The order that was completed.</param>
            <param name="station">The station at which the order was completed.</param>
        </member>
        <member name="E:RAWSimO.Core.Instance.OrderCompleted">
            <summary>
            The event that is raised when an order is completed.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Instance.NotifyOrderCompleted(RAWSimO.Core.Items.Order,RAWSimO.Core.Elements.OutputStation)">
            <summary>
            Notifies the instance that an order was completed in order to keep the statistics up-to-date.
            </summary>
            <param name="oStation">The corresponding station.</param>
            <param name="order">The order that was completed.</param>
        </member>
        <member name="T:RAWSimO.Core.Instance.CollisionEventHandler">
            <summary>
            The event handler for the event that is raised when a collision occurs.
            </summary>
            <param name="bot">The bot that detected the collision.</param>
            <param name="tier">The tier the collision happened on.</param>
        </member>
        <member name="E:RAWSimO.Core.Instance.Collision">
            <summary>
            The event that is raised when a collision occurs.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Instance.NotifyCollision(RAWSimO.Core.Elements.Bot,RAWSimO.Core.Elements.Tier)">
            <summary>
            Notifies the instance that a collision happened in order to keep the statistics up-to-date.
            </summary>
            <param name="bot">The bot that reports the collision.</param>
            <param name="tier">The tier on which the collision happened.</param>
        </member>
        <member name="T:RAWSimO.Core.Instance.TripCompletedEventHandler">
            <summary>
            The event handler for the event that is raised when a robot reaches the queueing area of its destination station.
            </summary>
            <param name="bot">The bot that just reached the queueing area.</param>
            <param name="tripType">The type of the trip.</param>
            <param name="tripTime">The time it took to reach the queueing area measured from the trip starting waypoint.</param>
        </member>
        <member name="E:RAWSimO.Core.Instance.TripCompleted">
            <summary>
            The event that is raised when a robot reached the queueing area of its destination station.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Instance.NotifyTripCompleted(RAWSimO.Core.Elements.Bot,RAWSimO.Core.Statistics.StationTripDatapoint.StationTripType,System.Double)">
            <summary>
            Notifies the instance that a bot just arrived in the queueing area of its destination station.
            </summary>
            <param name="bot">The bot that just arrived.</param>
            <param name="tripType">The trip type.</param>
            <param name="tripTime">The time it took to get to the queueing area.</param>
        </member>
        <member name="T:RAWSimO.Core.Instance.RepositioningEventHandler">
            <summary>
            The event handler for the event that is raised when a collision occurs.
            </summary>
            <param name="bot">The bot that detected the collision.</param>
            <param name="from">The waypoint from which the pod is brought to another one.</param>
            <param name="to">The waypoint to which the pod is being brought.</param>
            <param name="pod">The pod that is being repositioned.</param>
        </member>
        <member name="E:RAWSimO.Core.Instance.RepositioningStarted">
            <summary>
            The event that is raised when a collision occurs.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Instance.NotifyRepositioningStarted(RAWSimO.Core.Elements.Bot,RAWSimO.Core.Waypoints.Waypoint,RAWSimO.Core.Waypoints.Waypoint,RAWSimO.Core.Elements.Pod)">
            <summary>
            Notifies the instance that a collision happened in order to keep the statistics up-to-date.
            </summary>
            <param name="bot">The bot that reports the collision.</param>
            <param name="from">The waypoint from which the pod is brought to another one.</param>
            <param name="to">The waypoint to which the pod is being brought.</param>
            <param name="pod">The pod that is being repositioned.</param>
        </member>
        <member name="T:RAWSimO.Core.Instance.PodClaimedEventHandler">
            <summary>
            The event handler for the event that is raised when a pod is claimed by a bot.
            </summary>
            <param name="bot">The bot that claimed the pod.</param>
            <param name="pod">The pod that was claimed.</param>
            <param name="purpose">The purpose the pod was claimed for.</param>
        </member>
        <member name="E:RAWSimO.Core.Instance.PodClaimed">
            <summary>
            The event that is raised when a pod is claimed by a bot.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Instance.NotifyPodClaimed(RAWSimO.Core.Elements.Pod,RAWSimO.Core.Elements.Bot,RAWSimO.Core.Control.BotTaskType)">
            <summary>
            Notifies the instance that a pod was picked up.
            </summary>
            <param name="pod">The pod that was pickep up.</param>
            <param name="bot">The bot that picked up the pod.</param>
            <param name="purpose">The purpose the pod was claimed for.</param>
        </member>
        <member name="T:RAWSimO.Core.Instance.PodPickupEventHandler">
            <summary>
            The event handler for the event that is raised when a pod is picked up.
            </summary>
            <param name="bot">The bot that picked up the pod.</param>
            <param name="pod">The pod that was picked up.</param>
        </member>
        <member name="E:RAWSimO.Core.Instance.PodPickup">
            <summary>
            The event that is raised when a pod is picked up.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Instance.NotifyPodPickup(RAWSimO.Core.Elements.Pod,RAWSimO.Core.Elements.Bot)">
            <summary>
            Notifies the instance that a pod was picked up.
            </summary>
            <param name="pod">The pod that was pickep up.</param>
            <param name="bot">The bot that picked up the pod.</param>
        </member>
        <member name="T:RAWSimO.Core.Instance.PodSetdownEventHandler">
            <summary>
            The event handler for the event that is raised when a pod is set down.
            </summary>
            <param name="bot">The bot that set down the pod.</param>
            <param name="pod">The pod that was set down.</param>
        </member>
        <member name="E:RAWSimO.Core.Instance.PodSetdown">
            <summary>
            The event that is raised when a pod is set down.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Instance.NotifyPodSetdown(RAWSimO.Core.Elements.Pod,RAWSimO.Core.Elements.Bot)">
            <summary>
            Notifies the instance that a pod was set down.
            </summary>
            <param name="pod">The pod that was set down.</param>
            <param name="bot">The bot that set down the pod.</param>
        </member>
        <member name="T:RAWSimO.Core.Instance.PodHandledEventHandler">
            <summary>
            The event handler for the event that is raised when a pod is being used at a station.
            </summary>
            <param name="pod">The pod that was used.</param>
            <param name="iStation">The input station at which the pod was used or <code>null</code> if it was used at an output station.</param>
            <param name="oStation">The output station at which the pod was used or <code>null</code> if it was used at an input station.</param>
        </member>
        <member name="E:RAWSimO.Core.Instance.PodHandled">
            <summary>
            The event that is raised when a pod is being used at a station.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Instance.NotifyPodHandled(RAWSimO.Core.Elements.Pod,RAWSimO.Core.Elements.InputStation,RAWSimO.Core.Elements.OutputStation)">
            <summary>
            Notifies the instance that a pod was used at a station.
            </summary>
            <param name="pod">The pod that was used.</param>
            <param name="iStation">The input station at which the pod was used or <code>null</code> if it was used at an output station.</param>
            <param name="oStation">The output station at which the pod was used or <code>null</code> if it was used at an input station.</param>
        </member>
        <member name="T:RAWSimO.Core.Instance.ItemStorageDecidedEventHandler">
            <summary>
            The handler for the event that is called when a pod was chosen for a bundle.
            </summary>
            <param name="pod">The chosen pod.</param>
            <param name="bundle">The corresponding bundle.</param>
        </member>
        <member name="E:RAWSimO.Core.Instance.ItemStorageDecided">
            <summary>
            The event that is raised when a pod was chosen for a new bundle.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Instance.NotifyItemStorageDecided(RAWSimO.Core.Elements.Pod,RAWSimO.Core.Items.ItemBundle)">
            <summary>
            Notifies the instance that a pod was chosen for a bundle.
            </summary>
            <param name="pod">The chosen pod.</param>
            <param name="bundle">The corresponding bundle.</param>
        </member>
        <member name="T:RAWSimO.Core.Instance.ItemStorageAllocationAvailableEventHandler">
            <summary>
            The handler for the event that is called when a bundle was submitted for allocation to a pod.
            </summary>
            <param name="pod">The pod the bundle was assigned to.</param>
            <param name="bundle">The bundle that was assigned.</param>
        </member>
        <member name="E:RAWSimO.Core.Instance.ItemStorageAllocationAvailable">
            <summary>
            The event that is raised when a bundle was submitted for allocation to a pod.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Instance.NotifyItemStorageAllocationAvailable(RAWSimO.Core.Elements.Pod,RAWSimO.Core.Items.ItemBundle)">
            <summary>
            Notifies the instance that a bundle was submitted for allocation to a pod.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Instance.ReplenishmentBatchingDecidedEventHandler">
            <summary>
            The handler for the event that is called when a station was chosen for a bundle.
            </summary>
            <param name="station">The chosen station.</param>
            <param name="bundle">The corresponding bundle.</param>
        </member>
        <member name="E:RAWSimO.Core.Instance.ReplenishmentBatchingDecided">
            <summary>
            The event that is raised when a station was chosen for a new bundle.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Instance.NotifyReplenishmentBatchingDecided(RAWSimO.Core.Elements.InputStation,RAWSimO.Core.Items.ItemBundle)">
            <summary>
            Notifies the instance that a station was chosen for a bundle.
            </summary>
            <param name="station">The chosen station.</param>
            <param name="bundle">The corresponding bundle.</param>
        </member>
        <member name="T:RAWSimO.Core.Instance.BundleRegisteredEventHandler">
            <summary>
            The handler for the event that is called when a bundle was registered with a pod.
            </summary>
            <param name="pod">The corresponding pod.</param>
            <param name="bundle">The handled bundle.</param>
        </member>
        <member name="E:RAWSimO.Core.Instance.BundleRegistered">
            <summary>
            The event that is raised when a bundle is registered with a pod.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Instance.NotifyBundleRegistered(RAWSimO.Core.Elements.Pod,RAWSimO.Core.Items.ItemBundle)">
            <summary>
            Notifies the instance that a bundle was registered with a pod.
            </summary>
            <param name="pod">The pod the bundle was registered with.</param>
            <param name="bundle">The bundle that was moved from the input-station to the pod.</param>
        </member>
        <member name="T:RAWSimO.Core.Instance.BundleStoredEventHandler">
            <summary>
            The handler for the event that is called when a bundle was stored.
            </summary>
            <param name="pod">The corresponding pod.</param>
            <param name="bot">The corresponding bot.</param>
            <param name="iStation">The corresponding station.</param>
            <param name="bundle">The handled bundle.</param>
        </member>
        <member name="E:RAWSimO.Core.Instance.BundleStored">
            <summary>
            The event that is raised when a bundle is transferred to a pod.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Instance.NotifyBundleStored(RAWSimO.Core.Elements.InputStation,RAWSimO.Core.Elements.Bot,RAWSimO.Core.Elements.Pod,RAWSimO.Core.Items.ItemBundle)">
            <summary>
            Notifies the instance that a bundle was placed in a pod.
            </summary>
            <param name="pod">The pod the bundle was placed in.</param>
            <param name="bot">The corresponding bot.</param>
            <param name="bundle">The bundle that was moved from the input-station to the pod.</param>
            <param name="station">The station the bundle was distributed from.</param>
        </member>
        <member name="T:RAWSimO.Core.Instance.BundleAllocatedEventHandler">
            <summary>
            The handler for the event that is called when a bundle was allocated to a station.
            </summary>
            <param name="iStation">The input-station the bundle was assigned to.</param>
            <param name="bundle">The bundle that was assigned.</param>
        </member>
        <member name="E:RAWSimO.Core.Instance.BundleAllocated">
            <summary>
            The event that is raised when a bundle is allocated to a station.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Instance.NotifyBundleAllocated(RAWSimO.Core.Elements.InputStation,RAWSimO.Core.Items.ItemBundle)">
            <summary>
            Notifies the instance that a bundle was allocated.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Instance.OrderAllocatedEventHandler">
            <summary>
            The handler for the event that is called when an order was allocated to a station.
            </summary>
            <param name="oStation">The output-station the order was assigned to.</param>
            <param name="order">The order that was assigned.</param>
        </member>
        <member name="E:RAWSimO.Core.Instance.OrderAllocated">
            <summary>
            The event that is raised when an order is allocated to a station.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Instance.NotifyOrderAllocated(RAWSimO.Core.Elements.OutputStation,RAWSimO.Core.Items.Order)">
            <summary>
            Notifies the instance that an order was allocated.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Instance.InitialBundleStoredEventHandler">
            <summary>
            The handler for the event that is called when a bundle is stored during the initialization phase of the inventory.
            </summary>
            <param name="bundle">The bundle that was stored.</param>
            <param name="pod">The pod the bundle was stored in.</param>
        </member>
        <member name="E:RAWSimO.Core.Instance.InitialBundleStored">
            <summary>
            The event that is raised when a bundle is stored during the initialization phase.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Instance.NotifyInitialBundleStored(RAWSimO.Core.Items.ItemBundle,RAWSimO.Core.Elements.Pod)">
            <summary>
            Notifies the instance that a bundle was placed in a pod.
            </summary>
            <param name="bundle">The bundle that was stored.</param>
            <param name="pod">The pod the bundle was placed in.</param>
        </member>
        <member name="T:RAWSimO.Core.Instance.ItemExtractedEventHandler">
            <summary>
            The handler for the event that is called when an item is extracted.
            </summary>
            <param name="pod">The pod the item was stored in.</param>
            <param name="item">The item that was extracted.</param>
        </member>
        <member name="E:RAWSimO.Core.Instance.ItemExtracted">
            <summary>
            The event that is raised when an item was extracted.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Instance.NotifyItemExtracted(RAWSimO.Core.Elements.Pod,RAWSimO.Core.Items.ItemDescription)">
            <summary>
            Notifies the instance that an item was extracted.
            </summary>
            <param name="pod">The pod the item was stored in.</param>
            <param name="item">The item that was extracted.</param>
        </member>
        <member name="T:RAWSimO.Core.Instance.PodItemReservedEventHandler">
            <summary>
            The handler for the event that is called when an item on a pod is reserved for picking.
            </summary>
            <param name="pod">The pod the item was stored in.</param>
            <param name="item">The item that was extracted.</param>
            <param name="request">The request the item was reserved for.</param>
        </member>
        <member name="E:RAWSimO.Core.Instance.PodItemReserved">
            <summary>
            The event that is raised when an item on a pod is reserved for picking.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Instance.NotifyPodItemReserved(RAWSimO.Core.Elements.Pod,RAWSimO.Core.Items.ItemDescription,RAWSimO.Core.Management.ExtractRequest)">
            <summary>
            Notifies the instance that an item on a pod is reserved for picking.
            </summary>
            <param name="pod">The pod the item was stored in.</param>
            <param name="item">The item that was extracted.</param>
            <param name="request">The request the item was reserved for.</param>
        </member>
        <member name="T:RAWSimO.Core.Instance.PodItemUnreservedEventHandler">
            <summary>
            The handler for the event that is called when a reservation for an item on a pod is canceled.
            </summary>
            <param name="pod">The pod the item was stored in.</param>
            <param name="item">The item that was extracted.</param>
            <param name="request">The request the item was reserved for.</param>
        </member>
        <member name="E:RAWSimO.Core.Instance.PodItemUnreserved">
            <summary>
            The event that is raised when a reservation for an item on a pod is canceled.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Instance.NotifyPodItemUnreserved(RAWSimO.Core.Elements.Pod,RAWSimO.Core.Items.ItemDescription,RAWSimO.Core.Management.ExtractRequest)">
            <summary>
            Notifies the instance that the reservation for an item on a pod is canceled.
            </summary>
            <param name="pod">The pod the item was stored in.</param>
            <param name="item">The item that was extracted.</param>
            <param name="request">The request the item was reserved for.</param>
        </member>
        <member name="T:RAWSimO.Core.Instance.NewBundleEventHandler">
            <summary>
            Handles the event that is raised when a new bundle becomes available.
            </summary>
            <param name="bundle">The new bundle.</param>
        </member>
        <member name="E:RAWSimO.Core.Instance.NewBundle">
            <summary>
            The event that is raised when a new bundle becomes available.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Instance.NotifyBundlePlaced(RAWSimO.Core.Items.ItemBundle)">
            <summary>
            Notifies the instance about a new available bundle.
            </summary>
            <param name="bundle">The bundle that become available.</param>
        </member>
        <member name="T:RAWSimO.Core.Instance.NewOrderEventHandler">
            <summary>
            Handles the event that is raised when a new order becomes available.
            </summary>
            <param name="order">The new order.</param>
        </member>
        <member name="E:RAWSimO.Core.Instance.NewOrder">
            <summary>
            The event that is raised when a new order becomes available.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Instance.NotifyOrderPlaced(RAWSimO.Core.Items.Order)">
            <summary>
            Notifies the instance that an order was placed.
            </summary>
            <param name="order">The order that was placed.</param>
        </member>
        <member name="T:RAWSimO.Core.Instance.RejectedBundleEventHandler">
            <summary>
            Handles the event that is raised when a bundle was rejected.
            </summary>
        </member>
        <member name="E:RAWSimO.Core.Instance.RejectedBundle">
            <summary>
            The event that is raised when a bundle was rejected.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Instance.NotifyBundleRejected">
            <summary>
            Notifies the instance about a rejected bundle.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Instance.RejectedOrderEventHandler">
            <summary>
            Handles the event that is raised when an order was rejected.
            </summary>
        </member>
        <member name="E:RAWSimO.Core.Instance.RejectedOrder">
            <summary>
            The event that is raised when an order was rejected.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Instance.NotifyOrderRejected">
            <summary>
            Notifies the instance that an order was rejected.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Instance.NewpodEventHandler">
            <summary>
            Handles the event that is raised when a new pod is added to the system.
            </summary>
            <param name="pod">The new pod.</param>
        </member>
        <member name="E:RAWSimO.Core.Instance.NewPod">
            <summary>
            The event that is raised when a new pod becomes available.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Instance.NotifyPodAdded(RAWSimO.Core.Elements.Pod)">
            <summary>
            Notifies the instance that a new pod was added.
            </summary>
            <param name="pod">The pod that was added.</param>
        </member>
        <member name="T:RAWSimO.Core.Instance.BundleGenerationPausedEventHandler">
            <summary>
            Handles the event that is raised when bundle generation was paused.
            </summary>
        </member>
        <member name="E:RAWSimO.Core.Instance.BundleGenerationPaused">
            <summary>
            The event that is raised when bundle generation was paused.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Instance.NotifyBundleGenerationPaused">
            <summary>
            Notifies the instance that bundle generation is paused.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Instance.OrderGenerationPausedEventHandler">
            <summary>
            Handles the event that is raised when order generation was paused.
            </summary>
        </member>
        <member name="E:RAWSimO.Core.Instance.OrderGenerationPaused">
            <summary>
            The event that is raised when order generation was paused.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Instance.NotifyOrderGenerationPaused">
            <summary>
            Notifies the instance that order generation is paused.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Instance.Changed">
            <summary>
            This value is set to <code>true</code> whenever a change happened in the simulation that makes a visual refresh necessary.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Instance.Randomizer">
            <summary>
            The randomizer instance used throughout the simulation.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Instance.WaypointGraph">
            <summary>
            The waypoint-graph containing all waypoints.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Instance.BotCrashHandler">
            <summary>
            Keeps track of potential collisions and checks whether they were problematic or just a cause of the asynchronous update of the robots.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Instance.ResourceManager">
            <summary>
            Manages certain resources like pods in use and available storage positions.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Instance.ItemManager">
            <summary>
            The entitiy managing all items and incoming orders.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Instance.Controller">
            <summary>
            The simulation controller.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Instance.SharedControlElements">
            <summary>
            The shared control elements container.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Instance.ActivateRemoteController">
            <summary>
            Activates real-world integration and returns an adapter that can be used for communication with the outer world.
            </summary>
            <returns>The adapter.</returns>
        </member>
        <member name="M:RAWSimO.Core.Instance.DeactivateRemoteController">
            <summary>
            Deactivates real-world integration.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Instance.RemoteController">
            <summary>
            A remote control adapter enabling communication with a 'not-simulated world'.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Instance._updateables">
            <summary>
            All elements that have to be updated in each simulation step.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Instance.RemoveUpdateable(RAWSimO.Core.Interfaces.IUpdateable)">
            <summary>
            Removes an updateable object from the list.
            </summary>
            <param name="updateable">The object to remove</param>
        </member>
        <member name="M:RAWSimO.Core.Instance.AddUpdateable(RAWSimO.Core.Interfaces.IUpdateable)">
            <summary>
            Add an updateable object to the list.
            </summary>
            <param name="updateable">The object to add.</param>
        </member>
        <member name="P:RAWSimO.Core.Instance.Updateables">
            <summary>
            All elements that have to be updated in each simulation step.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Instance.StartExecutionTiming">
            <summary>
            Stores the current time as the reference time for the start of the execution.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Instance.StopExecutionTiming">
            <summary>
            Stores the current time as the reference time for the finish of the execution.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Instance.GetMetaInfoBasedInstanceName">
            <summary>
            Returns a simple instance describing name.
            </summary>
            <returns>A string that can be used as an instance name.</returns>
        </member>
        <member name="F:RAWSimO.Core.Instance._timedLogger">
            <summary>
            The timer used for async logging.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Instance._timedLogStarted">
            <summary>
            Indicates whether the first timed log was already written.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Instance.StartAsyncLogger">
            <summary>
            Starts async logging.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Instance.StopAsyncLogger">
            <summary>
            Stops async logging.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Instance._loggingColumnSep">
            <summary>
            The separator used for the columns in logging.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Instance.LoggingGetRealTimeHead">
            <summary>
            Returns the header for the time info.
            </summary>
            <returns>The time info.</returns>
        </member>
        <member name="M:RAWSimO.Core.Instance.LoggingGetRealTimeValue">
            <summary>
            Returns the time info.
            </summary>
            <returns>The time info.</returns>
        </member>
        <member name="M:RAWSimO.Core.Instance.LoggingGetETATimeHead">
            <summary>
            Returns the header for the ETA info.
            </summary>
            <returns>The ETA info.</returns>
        </member>
        <member name="M:RAWSimO.Core.Instance.LoggingGetETATimeValue">
            <summary>
            Returns the ETA info.
            </summary>
            <returns>The ETA info.</returns>
        </member>
        <member name="M:RAWSimO.Core.Instance.LoggingGetMemoryHead">
            <summary>
            Returns the header for the memory info.
            </summary>
            <returns>The memory info header.</returns>
        </member>
        <member name="M:RAWSimO.Core.Instance.LoggingGetMemoryValue">
            <summary>
            Returns the memory info.
            </summary>
            <returns>The memory info.</returns>
        </member>
        <member name="M:RAWSimO.Core.Instance.TimedLog(System.Object)">
            <summary>
            Method that is called by the async logging timer.
            </summary>
            <param name="state">The state (not used).</param>
        </member>
        <member name="M:RAWSimO.Core.Instance.Log(System.String)">
            <summary>
            The method to call in case of logging.
            </summary>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:RAWSimO.Core.Instance.LogSevere(System.String)">
            <summary>
            Used to log severe errors. (This is log level 1)
            </summary>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:RAWSimO.Core.Instance.LogDefault(System.String)">
            <summary>
            Used to log standard messages of the simulation progress or severe warnings / bug info. (This is log level 2)
            </summary>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:RAWSimO.Core.Instance.LogInfo(System.String)">
            <summary>
            Used to log informative messages about things potentially going wrong or the state of the system. (This is log level 3)
            </summary>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:RAWSimO.Core.Instance.LogVerbose(System.String)">
            <summary>
            Used to log everything that can be logged. (This is log level 4)
            </summary>
            <param name="message">The message to log.</param>
        </member>
        <member name="P:RAWSimO.Core.Instance.Tag">
            <summary>
            A tag that can be set to better identify an execution of the simulation.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Instance.Observer">
            <summary>
            An observer instance monitoring statistics of this instance.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Instance.FrequencyTracker">
            <summary>
            The tracker that keeps all frequency information up-to-date and accessible at one single object.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Instance.ElementMetaInfoTracker">
            <summary>
            Keeps track of pod meta info.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Instance.StockInfo">
            <summary>
            Supplies information about the current stock situation.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Instance.MetaInfoManager">
            <summary>
            A manager keeping track of instance specific meta-information.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Instance.StatGetInfoBalancedBotsPerStation(RAWSimO.Core.Elements.InputStation)">
            <summary>
            Gets the number of robots currently assigned to the given station. Does only work for the balanced bot manager. For others it will only return 0.
            </summary>
            <param name="station">The station to get the number for.</param>
            <returns>The number of bots currently assigned to the station or always 0 if the bot manager does not support these assignments.</returns>
        </member>
        <member name="M:RAWSimO.Core.Instance.StatGetInfoBalancedBotsPerStation(RAWSimO.Core.Elements.OutputStation)">
            <summary>
            Gets the number of robots currently assigned to the given station. Does only work for the balanced bot manager. For others it will only return 0.
            </summary>
            <param name="station">The station to get the number for.</param>
            <returns>The number of bots currently assigned to the station or always 0 if the bot manager does not support these assignments.</returns>
        </member>
        <member name="F:RAWSimO.Core.Instance._wrongTierPenaltyDistance">
            <summary>
            The penalty distance to add for a node not residing on the destination tier.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Instance.WrongTierPenaltyDistance">
            <summary>
            The penalty distance to add for a node not residing on the destination tier.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Instance.RefusedRequestPenaltyTime">
            <summary>
            The penalty time for a bot for which a station just refused a request.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Instance.StraightOrientationTolerance">
            <summary>
            The tolerance for a straight path in radians.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Instance.GetInfoPods">
            <summary>
            Returns an enumeration of all pods of this instance.
            </summary>
            <returns>All pods of this instance.</returns>
        </member>
        <member name="M:RAWSimO.Core.Instance.GetInfoBots">
            <summary>
            Returns an enumeration of all bots of this instance.
            </summary>
            <returns>All bots of this instance.</returns>
        </member>
        <member name="M:RAWSimO.Core.Instance.GetInfoTiers">
            <summary>
            Returns an enumeration of all tiers of this instance.
            </summary>
            <returns>All tiers of this instance.</returns>
        </member>
        <member name="M:RAWSimO.Core.Instance.GetInfoElevators">
            <summary>
            Returns the elevators connected to this tier.
            </summary>
            <returns>All elevators connected to this tier.</returns>
        </member>
        <member name="M:RAWSimO.Core.Instance.GetInfoChanged">
            <summary>
            Indicates whether anything has changed in the instance.
            </summary>
            <returns><code>false</code> if nothing changed since the last query, <code>true</code> otherwise.</returns>
        </member>
        <member name="M:RAWSimO.Core.Instance.GetInfoItemManager">
            <summary>
            Returns the item manager of this instance.
            </summary>
            <returns>The item manager of this instance.</returns>
        </member>
        <member name="M:RAWSimO.Core.Instance.GetInfoItemDescriptions">
            <summary>
            Returns all item descriptions used in the instance.
            </summary>
            <returns>All item descriptions used by the instance.</returns>
        </member>
        <member name="M:RAWSimO.Core.Instance.GetInfoStatItemsHandled">
            <summary>
            Returns the count of bundles handled by the system.
            </summary>
            <returns>The number of bundles handled.</returns>
        </member>
        <member name="M:RAWSimO.Core.Instance.GetInfoStatBundlesHandled">
            <summary>
            Returns the count of orders handled by the system.
            </summary>
            <returns>The number of orders handled.</returns>
        </member>
        <member name="M:RAWSimO.Core.Instance.GetInfoStatOrdersHandled">
            <summary>
            Returns the count of orders handled by the system.
            </summary>
            <returns>The number of orders handled.</returns>
        </member>
        <member name="M:RAWSimO.Core.Instance.GetInfoStatOrdersLate">
            <summary>
            Returns the count of orders handled that were not completed in time.
            </summary>
            <returns>The number of orders not completed in time.</returns>
        </member>
        <member name="M:RAWSimO.Core.Instance.GetInfoStatRepositioningMoves">
            <summary>
            Returns the count of repositioning moves started so far.
            </summary>
            <returns>The number of repositioning moves started.</returns>
        </member>
        <member name="M:RAWSimO.Core.Instance.GetInfoStatCollisions">
            <summary>
            Returns the count of occurred collisions.
            </summary>
            <returns>The number of occurred collisions.</returns>
        </member>
        <member name="M:RAWSimO.Core.Instance.GetInfoStatStorageFillLevel">
            <summary>
            Returns the storage fill level.
            </summary>
            <returns>The storage fill level.</returns>
        </member>
        <member name="M:RAWSimO.Core.Instance.GetInfoStatStorageFillAndReservedLevel">
            <summary>
            Returns the storage fill level including the already present reservations.
            </summary>
            <returns>The storage fill level.</returns>
        </member>
        <member name="M:RAWSimO.Core.Instance.GetInfoStatStorageFillAndReservedAndBacklogLevel">
            <summary>
            Returns the storage fill level including the already present reservations and the capacity consumed by backlog bundles.
            </summary>
            <returns>The storage fill level.</returns>
        </member>
        <member name="M:RAWSimO.Core.Instance.GetInfoName">
            <summary>
            Returns the current name of the instance.
            </summary>
            <returns>The name of the instance.</returns>
        </member>
        <member name="F:RAWSimO.Core.Instance._idToBots">
            <summary>
            Stores the corresponding elements by their ID.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Instance.GetBotByID(System.Int32)">
            <summary>
            Gets the corresponding element by ID.
            </summary>
            <param name="id">The ID of the element.</param>
            <returns>The object matching the ID.</returns>
        </member>
        <member name="F:RAWSimO.Core.Instance._idToPods">
            <summary>
            Stores the corresponding elements by their ID.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Instance.GetPodByID(System.Int32)">
            <summary>
            Gets the corresponding element by ID.
            </summary>
            <param name="id">The ID of the element.</param>
            <returns>The object matching the ID.</returns>
        </member>
        <member name="F:RAWSimO.Core.Instance._idToInputStations">
            <summary>
            Stores the corresponding elements by their ID.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Instance.GetInputStationByID(System.Int32)">
            <summary>
            Gets the corresponding element by ID.
            </summary>
            <param name="id">The ID of the element.</param>
            <returns>The object matching the ID.</returns>
        </member>
        <member name="F:RAWSimO.Core.Instance._idToOutputStations">
            <summary>
            Stores the corresponding elements by their ID.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Instance.GetOutputStationByID(System.Int32)">
            <summary>
            Gets the corresponding element by ID.
            </summary>
            <param name="id">The ID of the element.</param>
            <returns>The object matching the ID.</returns>
        </member>
        <member name="F:RAWSimO.Core.Instance._idToElevators">
            <summary>
            Stores the corresponding elements by their ID.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Instance.GetElevatorByID(System.Int32)">
            <summary>
            Gets the corresponding element by ID.
            </summary>
            <param name="id">The ID of the element.</param>
            <returns>The object matching the ID.</returns>
        </member>
        <member name="F:RAWSimO.Core.Instance._idToTier">
            <summary>
            Stores the corresponding elements by their ID.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Instance.GetTierByID(System.Int32)">
            <summary>
            Gets the corresponding element by ID.
            </summary>
            <param name="id">The ID of the element.</param>
            <returns>The object matching the ID.</returns>
        </member>
        <member name="F:RAWSimO.Core.Instance._idToWaypoint">
            <summary>
            Stores the corresponding elements by their ID.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Instance.GetWaypointByID(System.Int32)">
            <summary>
            Gets the corresponding element by ID.
            </summary>
            <param name="id">The ID of the element.</param>
            <returns>The object matching the ID.</returns>
        </member>
        <member name="F:RAWSimO.Core.Instance._idToSemaphore">
            <summary>
            Stores the corresponding elements by their ID.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Instance.GetSemaphoreByID(System.Int32)">
            <summary>
            Gets the corresponding element by ID.
            </summary>
            <param name="id">The ID of the element.</param>
            <returns>The object matching the ID.</returns>
        </member>
        <member name="F:RAWSimO.Core.Instance._idToItemDescription">
            <summary>
            Stores the corresponding elements by their ID.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Instance.GetItemDescriptionByID(System.Int32)">
            <summary>
            Gets the corresponding element by ID.
            </summary>
            <param name="id">The ID of the element.</param>
            <returns>The object matching the ID.</returns>
        </member>
        <member name="M:RAWSimO.Core.Instance.VisClearBots">
            <summary>
            Remove all robots from the instance. This is only usable for visualization purposes.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Instance.VisClearPods">
            <summary>
            Remove all pods from the instance. This is only usable for visualization purposes.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Instance.VisClearSemaphores">
            <summary>
            Remove all semaphores and guards from the instance. This is only usable for visualization purposes.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Instance.VisClearStations">
            <summary>
            Remove all stations from the instance. This is only usable for visualization purposes.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Instance.ModRemoveWaypoints(RAWSimO.Core.Info.ITierInfo,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Removes all elements in scope from the instance.
            </summary>
            <param name="theTier">The tier to remove the elements from.</param>
            <param name="xMin">The min x-value of the scope.</param>
            <param name="xMax">The max x-value of the scope.</param>
            <param name="yMin">The min y-value of the scope.</param>
            <param name="yMax">The max y-value of the scope.</param>
        </member>
        <member name="T:RAWSimO.Core.Instance.SanityError">
            <summary>
            Contains all error types that sanity checking is overwatching.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Instance.SanityError.DeadEnd">
            <summary>
            No outgoing connection from a waypoint.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Instance.SanityError.DeadEndByBlocking">
            <summary>
            No outgoing unblockable connection from a waypoint.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Instance.SanityError.BlockableStorageLocation">
            <summary>
            A storage location that might be blocked throughout the simulation by other pods.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Instance.SanityError.InsufficientRestingPositions">
            <summary>
            There are not enough resting positions for all bots of the instance.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Instance._sanityErrorDescriptions">
            <summary>
            Contains some description to better clarify all errors that might be detected.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Instance.SanityGetDescription(RAWSimO.Core.Instance.SanityError)">
            <summary>
            Returns a describing string for the corresponding error type.
            </summary>
            <param name="errorType">The error type.</param>
            <returns>A string describing the error.</returns>
        </member>
        <member name="M:RAWSimO.Core.Instance.SanityCheck">
            <summary>
            Sanity checks the instance.
            </summary>
            <returns>All errors that were recognized.</returns>
        </member>
        <member name="F:RAWSimO.Core.Instance.STAT_MAX_DATA_POINTS">
            <summary>
            Number of datapoints stored before a flush is done.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Instance.StatTimeStart">
            <summary>
            The time the recording of the statistics started.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Instance.StatTime">
            <summary>
            The current time regarding all statistical measurements.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Instance.StatWarmupResetDone">
            <summary>
            Indicates whether the stat reset after the warmup period was done.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Instance.StatResultsWritten">
            <summary>
            Indicates whether the stats have been written.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Instance.StatBundleGenerationStops">
            <summary>
            The number of times bundle generation was paused.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Instance.StatOrderGenerationStops">
            <summary>
            The number of times order generation was paused.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Instance.StatOverallItemsHandled">
            <summary>
            The number of handled items overall.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Instance.StatOverallBundlesHandled">
            <summary>
            The number of handled bundles overall.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Instance.StatOverallLinesHandled">
            <summary>
            The number of handled order lines overall.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Instance.StatOverallOrdersHandled">
            <summary>
            The number of handled orders overall.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Instance.StatOverallOrdersLate">
            <summary>
            The number of handled orders overall that were not completed in time.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Instance.StatOverallItemsOrdered">
            <summary>
            The absolute number of items ordered.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Instance.StatOverallBundlesPlaced">
            <summary>
            The absolute number of bundles placed.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Instance.StatOverallOrdersPlaced">
            <summary>
            The absolute number of orders placed.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Instance.StatOverallBundlesRejected">
            <summary>
            The absolute number of bundles placed.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Instance.StatOverallOrdersRejected">
            <summary>
            The absolute number of orders placed.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Instance.StatRepositioningMoves">
            <summary>
            The total number of repositioning moves that were executed.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Instance.StatOverallDistanceTraveled">
            <summary>
            The total distance traveled by the bots so far.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Instance.StatOverallDistanceEstimated">
            <summary>
            The estimated distance by the bots.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Instance.StatOverallAssignedTasks">
            <summary>
            The total number of assigned tasks so far.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Instance.StatMaxMemoryUsed">
            <summary>
            The maximum Memory Usage in megabyte.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Instance._statOrderTurnoverTimes">
            <summary>
            The turnover times for all completed orders.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Instance._statOrderThroughputTimes">
            <summary>
            The throughput times for all completed orders.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Instance._statOrderLatenessTimes">
            <summary>
            The lateness for all completed orders.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Instance._statBundleTurnoverTimes">
            <summary>
            The turnover times for all completed bundles.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Instance._statBundleThroughputTimes">
            <summary>
            The throughput times for all completed bundles.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Instance.StatOrderThroughputTimeAvg">
            <summary>
            The average order throughput time.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Instance._statItemHandlingTimestamps">
            <summary>
            Stores all times at which an item was handled.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Instance._statBundleHandlingTimestamps">
            <summary>
            Stores all times at which an bundle was handled.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Instance._statOrderHandlingTimestamps">
            <summary>
            Stores all times at which an order was handled.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Instance._statBundlePlacementTimestamps">
            <summary>
            Stores all times at which an incoming bundle was placed.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Instance._statOrderPlacementTimestamps">
            <summary>
            Stores all times at which a new order was placed.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Instance._statCollisionTimestamps">
            <summary>
            Stores all times at which a collision happened.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Instance._statStationTripTimestamps">
            <summary>
            Stores all completed trips to stations queueing areas.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Instance.StatOverallCollisions">
            <summary>
            The number of collisions that happened in this instance. This value may count a collision of two robots twice, hence it should only be used as an indicator.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Instance._oStationTripCount">
            <summary>
            The number of bots that reached their targeted output station queueing area.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Instance._oStationTripTimeAvg">
            <summary>
            The average time it took a bot for their last trip towards an output station queueing area.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Instance._iStationTripCount">
            <summary>
            The number of bots that reached their targeted input station queueing area.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Instance._iStationTripTimeAvg">
            <summary>
            The average time it took a bot for their last trip towards an input station queueing area.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Instance.StatAddTrip(RAWSimO.Core.Statistics.StationTripDatapoint.StationTripType,System.Double)">
            <summary>
            Registers another trip completed trip to a station queueing area.
            </summary>
            <param name="tripType">The type of the trip.</param>
            <param name="tripTime">The time for completing the trip.</param>
        </member>
        <member name="P:RAWSimO.Core.Instance.OStationTripCount">
            <summary>
            The number of bots that reached their targeted output station queueing area.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Instance.OStationTripTimeAvg">
            <summary>
            The average time it took a bot for their last trip towards an output station queueing area.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Instance.IStationTripCount">
            <summary>
            The number of bots that reached their targeted input station queueing area.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Instance.IStationTripTimeAvg">
            <summary>
            The number of bots that reached their targeted output station queueing area.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Instance.StatOverallFailedReservations">
            <summary>
            The number of times a move could not be executed due to a failed reservation.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Instance.StatOverallPathPlanningTimeouts">
            <summary>
            The number of times the runtime limit was reached by the path planning method.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Instance._storageCapacity">
            <summary>
            The overall storage capacity.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Instance._storageUsage">
            <summary>
            The current overall storage usage.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Instance._storageReserved">
            <summary>
            The current overall storage reserved for bundles.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Instance._storageBacklog">
            <summary>
            The current storage capacity required by the backlog bundles.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Instance.StorageCapacity">
            <summary>
            The overall storage capacity.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Instance.StorageUsage">
            <summary>
            The current overall storage usage.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Instance.StorageReserved">
            <summary>
            The current overall storage reserved for bundles.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Instance.StorageBacklog">
            <summary>
            The current storage capacity required by the backlog bundles.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Instance.InitStorageTracking">
            <summary>
            Initializes storage tracking.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Instance.StatStorageFillLevel">
            <summary>
            The overall storage fill level.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Instance.StatStorageFillAndReservedLevel">
            <summary>
            The overall storage fill level including the reservations present for the pods.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Instance.StatStorageFillAndReservedAndBacklogLevel">
            <summary>
            The overall storage fill level including the reservations present for the pods and the capacity consumed by the backlog bundles.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Instance.StatMaxItemsHandledByPod">
            <summary>
            The maximal number of items handled by a pod.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Instance.StatMaxBundlesHandledByPod">
            <summary>
            The maximal number of bundles handled by a pod.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Instance.StatCustomControllerInfo">
            <summary>
            Contains custom info written by the different controllers.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Instance.StatReset">
            <summary>
            Resets the statistics
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Instance.StatFinish">
            <summary>
            Finalizes some potentially incomplete statistics.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Instance.StatFlushBundlesHandled">
            <summary>
            Flushes the current state of the corresponding statistics to reduce memory usage.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Instance.StatFlushItemsHandled">
            <summary>
            Flushes the current state of the corresponding statistics to reduce memory usage.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Instance.StatFlushOrdersHandled">
            <summary>
            Flushes the current state of the corresponding statistics to reduce memory usage.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Instance.StatFlushBundlesPlaced">
            <summary>
            Flushes the current state of the corresponding statistics.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Instance.StatFlushOrdersPlaced">
            <summary>
            Flushes the current state of the corresponding statistics.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Instance.StatFlushPathFinding">
            <summary>
            Flushes the current state of the corresponding statistics.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Instance.StatFlushCollisions">
            <summary>
            Flushes the current state of the corresponding statistics to reduce memory usage.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Instance.StatFlushTripsCompleted">
            <summary>
            Flushes the current state of the corresponding statistics to reduce memory usage.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Instance.StatFlushTripStatistics">
            <summary>
            Flushes statistics about the trips of the robots.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Instance.StatFlushConnectionStatistics">
            <summary>
            Flushes all data of all connections that have been used.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Instance.StatInitDirectory">
            <summary>
            Initializes the statistics directory.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Instance.WriteStatistics">
            <summary>
            Writes and flushes all statistics to the directory specified in the configuration.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Instance.WriteStationStatistics(System.Action{System.String})">
            <summary>
            Writes basic statistics about the stations in a CSV manner.
            </summary>
            <param name="writer">The write action to use.</param>
        </member>
        <member name="M:RAWSimO.Core.Instance.WriteItemDescriptionStatistics(System.Action{System.String})">
            <summary>
            Writes basic information about the SKUs and how they were ordered during simulation.
            </summary>
            <param name="writer">The writer to use.</param>
        </member>
        <member name="M:RAWSimO.Core.Instance.PrintStatistics(System.Action{System.String},System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Prints a statistics overview in readable format to a specified action.
            </summary>
            <param name="writer">The action to print the statistics to.</param>
            <param name="detailedAll">Indicates whether to print detailed or short statistics.</param>
            <param name="detailedBots">Indicates whether to print detailed statistics about the bots.</param>
            <param name="detailedPods">Indicates whether to print detailed statistics about the pods.</param>
            <param name="detailedStations">Indicates whether to print detailed statistics about the stations.</param>
        </member>
        <member name="M:RAWSimO.Core.Instance.WriteIndividiualStatistics">
            <summary>
            Flushes individual statistics, if the corresponding controllers are present.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.InstanceElement">
            <summary>
            An element that belongs to a specific simulation instance.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.InstanceElement.#ctor(RAWSimO.Core.Instance)">
            <summary>
            Creates a new instance element.
            </summary>
            <param name="instance">The instance this element belongs to.</param>
        </member>
        <member name="F:RAWSimO.Core.InstanceElement.ID">
            <summary>
            The ID of this element. This is also used to build simple identifying names of the objects.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.InstanceElement.Instance">
            <summary>
            The instance this element is assigned to.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.InstanceElement.VolatileID">
            <summary>
            Used for fast access of the item. Marks the position of the item in a corresponding array of all possible items.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.InstanceElement.GetInfoID">
            <summary>
            Returns the ID of the object.
            </summary>
            <returns>The ID.</returns>
        </member>
        <member name="M:RAWSimO.Core.InstanceElement.GetIdentfierString">
            <summary>
            Returns a simple string identifying this object in its instance.
            </summary>
            <returns>A simple name identifying the instance element.</returns>
        </member>
        <member name="T:RAWSimO.Core.Interfaces.IBotEventListener">
            <summary>
            Listens for real world events
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Interfaces.IBotEventListener.OnReachedWaypoint(RAWSimO.Core.Waypoints.Waypoint)">
            <summary>
            Called when [bot reached way point].
            </summary>
            <param name="waypoint">The way point.</param>
        </member>
        <member name="M:RAWSimO.Core.Interfaces.IBotEventListener.OnPickedUpPod">
            <summary>
            Called when [bot picked up the pod].
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Interfaces.IBotEventListener.OnSetDownPod">
            <summary>
            Called when [bot set down pod].
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Interfaces.IBotState">
            <summary>
            PodbotState is an interface which should be inherited to provide states for the Bot to be in. <code>Bot</code> keeps track of the fraction of time in each state, and also maintains a stateQueue.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Interfaces.IBotState.Act(RAWSimO.Core.Elements.Bot,System.Double,System.Double)">
            <summary>
            Act will be called whenever the <code>Bot</code> is not blocked or waiting for an event to finish.
            </summary>
            <param name="self">A reference to the affected bot.</param>
            <param name="lastTime">The last time an update happened.</param>
            <param name="currentTime">The current simulation time.</param>
        </member>
        <member name="P:RAWSimO.Core.Interfaces.IBotState.DestinationWaypoint">
            <summary>
            Returns the current waypoint this bot wants to drive to
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Interfaces.IBotState.Type">
            <summary>
            The type of this state.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Interfaces.IOptimize">
            <summary>
            Defines a must implement interface for non-adhoc control mechanisms.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Interfaces.IOptimize.SignalCurrentTime(System.Double)">
            <summary>
            Signals the current time to the mechanism. The mechanism can decide to block the simulation thread in order consume remaining real-time.
            </summary>
            <param name="currentTime">The current simulation time.</param>
        </member>
        <member name="T:RAWSimO.Core.Interfaces.IQueuesOwner">
            <summary>
            Owner of a queue.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Interfaces.IQueuesOwner.Queues">
            <summary>
            The Queue starting with the way point of the object ending with the most far away one.
            The first argument is the way point that has a queue and the second one is the List with way points
            </summary>
            <value>
            The queue.
            </value>
        </member>
        <member name="T:RAWSimO.Core.Interfaces.IRandomizer">
            <summary>
            The basic interface for a randomization object.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Interfaces.IRandomizer.NextInt(System.Int32)">
            <summary>
            Returns a random <code>int</code> number within the interval [0,<code>maxValue</code>).
            </summary>
            <param name="maxValue">The exclusive upper bound of the interval.</param>
            <returns>A random number within the specified interval.</returns>
        </member>
        <member name="M:RAWSimO.Core.Interfaces.IRandomizer.NextInt(System.Int32,System.Int32)">
            <summary>
            Returns a random <code>int</code> number within the interval [<code>minValue</code>,<code>maxValue</code>).
            </summary>
            <param name="minValue">The inclusive lower bound of the interval.</param>
            <param name="maxValue">The exclusive upper bound of the interval.</param>
            <returns>A random number within the specified interval.</returns>
        </member>
        <member name="M:RAWSimO.Core.Interfaces.IRandomizer.NextNormalInt(System.Double,System.Double)">
            <summary>
            Returns the next normally distributed random number according to the given mean value and standard deviation.
            </summary>
            <param name="mean">The mean of the normal distribution.</param>
            <param name="std">The standard deviation of the normal distribution.</param>
            <returns>The next normally ditributed random value.</returns>
        </member>
        <member name="M:RAWSimO.Core.Interfaces.IRandomizer.NextNormalInt(System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            Returns the next normally distributed random number according to the given mean value and standard deviation.
            </summary>
            <param name="mean">The mean of the normal distribution.</param>
            <param name="std">The standard deviation of the normal distribution.</param>
            <param name="minValue">The minimal value.</param>
            <param name="maxValue">The maximal value.</param>
            <returns>The next normally ditributed random value.</returns>
        </member>
        <member name="M:RAWSimO.Core.Interfaces.IRandomizer.NextDouble">
            <summary>
            Returns a random <code>double</code> number within the interval [0,1).
            </summary>
            <returns>A random number from the interval [0,1).</returns>
        </member>
        <member name="M:RAWSimO.Core.Interfaces.IRandomizer.NextDouble(System.Double)">
            <summary>
            Returns a random <code>double</code> number within the interval [0,<code>maxValue</code>).
            </summary>
            <param name="maxValue">The exclusive upper bound of the interval.</param>
            <returns>A random number within the specified interval.</returns>
        </member>
        <member name="M:RAWSimO.Core.Interfaces.IRandomizer.NextDouble(System.Double,System.Double)">
            <summary>
            Returns a random <code>double</code> number within the interval [<code>minValue</code>,<code>maxValue</code>).
            </summary>
            <param name="minValue">The inclusive lower bound of the interval.</param>
            <param name="maxValue">The exclusive upper bound of the interval.</param>
            <returns>A random number within the specified interval.</returns>
        </member>
        <member name="M:RAWSimO.Core.Interfaces.IRandomizer.NextNormalDouble(System.Double,System.Double)">
            <summary>
            Returns the next normally distributed random number according to the given mean value and standard deviation.
            </summary>
            <param name="mean">The mean of the normal distribution.</param>
            <param name="std">The standard deviation of the normal distribution.</param>
            <returns>The next normally ditributed random value.</returns>
        </member>
        <member name="M:RAWSimO.Core.Interfaces.IRandomizer.NextNormalDouble(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the next normally distributed random number according to the given mean value and standard deviation.
            </summary>
            <param name="mean">The mean of the normal distribution.</param>
            <param name="std">The standard deviation of the normal distribution.</param>
            <param name="lowerBound">The lower bound for the value.</param>
            <param name="upperBound">The upper bound for the value.</param>
            <returns>The next normally ditributed random value.</returns>
        </member>
        <member name="M:RAWSimO.Core.Interfaces.IRandomizer.NextExponentialDouble(System.Double)">
            <summary>
            Returns the next variable drawn from an exponential distribution with the given parameters.
            </summary>
            <param name="lambda">The lambda parameter of the distribution.</param>
            <returns>The next random number drawn from the distribution with the given parameters.</returns>
        </member>
        <member name="M:RAWSimO.Core.Interfaces.IRandomizer.NextExponentialDouble(System.Double,System.Double,System.Double)">
            <summary>
            Returns the next variable drawn from an exponential distribution with the given parameters.
            </summary>
            <param name="lambda">The lambda parameter of the distribution.</param>
            <param name="lowerBound">All numbers below the lower bound will be dropped.</param>
            <param name="upperBound">All numbers below the upper bound will be dropped.</param>
            <returns>The next random number drawn from the distribution with the given parameters.</returns>
        </member>
        <member name="M:RAWSimO.Core.Interfaces.IRandomizer.NextGammaDouble(System.Double,System.Double)">
            <summary>
            Returns the next variable drawn from a gamma distribution with the given parameters.
            Note: "A simple method for generating Gamma variables" by George Marsaglia and Wai Wan Tsang
            </summary>
            <param name="k">The k parameter of the distribution.</param>
            <param name="theta">The theta parameter of the distribution.</param>
            <returns>The next random number drawn from the distribution with the given parameters.</returns>
        </member>
        <member name="M:RAWSimO.Core.Interfaces.IRandomizer.NextGammaDouble(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the next variable drawn from a gamma distribution with the given parameters.
            Note: "A simple method for generating Gamma variables" by George Marsaglia and Wai Wan Tsang
            </summary>
            <param name="k">The k parameter of the distribution.</param>
            <param name="theta">The theta parameter of the distribution.</param>
            <param name="lowerBound">All numbers below the lower bound will be dropped.</param>
            <param name="upperBound">All numbers below the upper bound will be dropped.</param>
            <returns>The next random number drawn from the distribution with the given parameters.</returns>
        </member>
        <member name="T:RAWSimO.Core.Interfaces.IStatTracker">
            <summary>
            Functionality to implement for an element that tracks statistics during a simulation.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Interfaces.IStatTracker.StatReset">
            <summary>
            The callback indicates a reset of the statistics.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Interfaces.IStatTracker.StatFinish">
            <summary>
            The callback that indicates that the simulation is finished and statistics have to submitted to the instance.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Interfaces.IUpdateable">
            <summary>
            Defines the functionality of an updateable object used by the agent based simulation.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Interfaces.IUpdateable.GetNextEventTime(System.Double)">
            <summary>
            The next event when this element has to be updated.
            </summary>
            <param name="currentTime">The current time of the simulation.</param>
            <returns>The next time this element has to be updated.</returns>
        </member>
        <member name="M:RAWSimO.Core.Interfaces.IUpdateable.Update(System.Double,System.Double)">
            <summary>
            Updates the element to the specified time.
            </summary>
            <param name="lastTime">The time before the update.</param>
            <param name="currentTime">The time to update to.</param>
        </member>
        <member name="T:RAWSimO.Core.IO.DTOBot">
            <summary>
            A simplified representation of the original object used for serialization.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.IO.DTOBot.#ctor">
            <summary>
            Creates a new instance of this object.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.DTOBot.ID">
            <summary>
            The ID of this element.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.DTOBot.PodTransferTime">
            <summary>
            The time it takes for picking up and setting down a pod.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.DTOBot.MaxAcceleration">
            <summary>
            The maximal acceleration of the robot in m/s^2.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.DTOBot.MaxDeceleration">
            <summary>
            The maximal deceleration of the robot in m/s^2.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.DTOBot.MaxVelocity">
            <summary>
            The maximal velocity of the robot in m/s.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.DTOBot.TurnSpeed">
            <summary>
            The time it takes the robot to do a full turn in s.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.DTOBot.CollisionPenaltyTime">
            <summary>
            The collision penalty time in s.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.DTOBot.X">
            <summary>
            The initial position of the robot (x-value).
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.DTOBot.Y">
            <summary>
            The initial position of the robot (y-value).
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.DTOBot.Radius">
            <summary>
            The radius of the robot in m.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.DTOBot.Orientation">
            <summary>
            The initial orientation of the robot.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.DTOBot.Tier">
            <summary>
            The initial tier the robot is located on.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.IO.DTOBot.op_Implicit(RAWSimO.Core.Elements.Bot)~RAWSimO.Core.IO.DTOBot">
            <summary>
            Creates a DTO representation of the original object.
            </summary>
            <param name="value">The original object.</param>
        </member>
        <member name="M:RAWSimO.Core.IO.DTOBot.FromOrig(RAWSimO.Core.Elements.Bot)">
            <summary>
            Creates a clone out of the original.
            </summary>
            <param name="original">The original object.</param>
            <returns>The cloned object.</returns>
        </member>
        <member name="M:RAWSimO.Core.IO.DTOBot.Submit(RAWSimO.Core.Instance)">
            <summary>
            Submits all this object to the instance.
            </summary>
            <param name="instance">The instance to submit to.</param>
            <returns>The original object created at the instance.</returns>
        </member>
        <member name="T:RAWSimO.Core.IO.DTOElevator">
            <summary>
            A simplified representation of the original object used for serialization.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.IO.DTOElevator.#ctor">
            <summary>
            Creates a new instance of this object.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.DTOElevator.ID">
            <summary>
            The ID of this element.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.DTOElevator.Waypoints">
            <summary>
            The list of waypoints that serve as an entrance to the elevator.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.DTOElevator.Timings">
            <summary>
            The timings for transporting robots from one tier to another.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.DTOElevator.Queues">
            <summary>
            The queues of this elevator.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.IO.DTOElevator.op_Implicit(RAWSimO.Core.Elements.Elevator)~RAWSimO.Core.IO.DTOElevator">
            <summary>
            Creates a DTO representation of the original object.
            </summary>
            <param name="value">The original object.</param>
        </member>
        <member name="M:RAWSimO.Core.IO.DTOElevator.SetConnections(RAWSimO.Core.Instance,System.Collections.Generic.List{RAWSimO.Core.IO.DTOElevator})">
            <summary>
            Sets all connections for this elevator.
            </summary>
            <param name="instance">The instance to register the connections with.</param>
            <param name="elevators">The elevators to set the connections for.</param>
        </member>
        <member name="M:RAWSimO.Core.IO.DTOElevator.Flush(RAWSimO.Core.Instance)">
            <summary>
            Finishes the submission of this elevator.
            </summary>
            <param name="instance">The instance to submit to.</param>
        </member>
        <member name="M:RAWSimO.Core.IO.DTOElevator.FromOrig(RAWSimO.Core.Elements.Elevator)">
            <summary>
            Creates a clone out of the original.
            </summary>
            <param name="original">The original object.</param>
            <returns>The cloned object.</returns>
        </member>
        <member name="M:RAWSimO.Core.IO.DTOElevator.Submit(RAWSimO.Core.Instance)">
            <summary>
            Submits all this object to the instance.
            </summary>
            <param name="instance">The instance to submit to.</param>
            <returns>The original object created at the instance.</returns>
        </member>
        <member name="T:RAWSimO.Core.IO.DTOInputStation">
            <summary>
            A simplified representation of the original object used for serialization.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.IO.DTOInputStation.#ctor">
            <summary>
            Creates a new instance of this object.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.DTOInputStation.ID">
            <summary>
            The ID of this element.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.DTOInputStation.X">
            <summary>
            The initial position of the station (x-value).
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.DTOInputStation.Y">
            <summary>
            The initial position of the station (y-value).
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.DTOInputStation.Radius">
            <summary>
            The radius of the station.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.DTOInputStation.Tier">
            <summary>
            The tier this station is located on.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.DTOInputStation.Capacity">
            <summary>
            The capacity of this station.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.DTOInputStation.ItemBundleTransferTime">
            <summary>
            The time it takes to store one bundle in a pod.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.DTOInputStation.ActivationOrderID">
            <summary>
            The order ID of this station that defines the sequence in which the stations have to be activated.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.DTOInputStation.Queues">
            <summary>
            The queues of this station.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.IO.DTOInputStation.op_Implicit(RAWSimO.Core.Elements.InputStation)~RAWSimO.Core.IO.DTOInputStation">
            <summary>
            Creates a DTO representation of the original object.
            </summary>
            <param name="value">The original object.</param>
        </member>
        <member name="M:RAWSimO.Core.IO.DTOInputStation.Flush(RAWSimO.Core.Instance)">
            <summary>
            Finishes the submission of this station.
            </summary>
            <param name="instance">The instance to submit to.</param>
        </member>
        <member name="M:RAWSimO.Core.IO.DTOInputStation.FromOrig(RAWSimO.Core.Elements.InputStation)">
            <summary>
            Creates a clone out of the original.
            </summary>
            <param name="original">The original object.</param>
            <returns>The cloned object.</returns>
        </member>
        <member name="M:RAWSimO.Core.IO.DTOInputStation.Submit(RAWSimO.Core.Instance)">
            <summary>
            Submits all this object to the instance.
            </summary>
            <param name="instance">The instance to submit to.</param>
            <returns>The original object created at the instance.</returns>
        </member>
        <member name="T:RAWSimO.Core.IO.DTOInstance">
            <summary>
            A simplified representation of the original object used for serialization.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.DTOInstance.Name">
            <summary>
            The name of this instance.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.DTOInstance.Bots">
            <summary>
            All robots of this instance.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.DTOInstance.Pods">
            <summary>
            All pods of this instance.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.DTOInstance.Elevators">
            <summary>
            All elevators of this instance.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.DTOInstance.InputStations">
            <summary>
            All input-stations of this instance.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.DTOInstance.OutputStations">
            <summary>
            All output-stations of this instance.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.DTOInstance.Tiers">
            <summary>
            All tiers of this instance.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.DTOInstance.Waypoints">
            <summary>
            All waypoints of this instance.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.DTOInstance.Semaphores">
            <summary>
            All semaphores of this instance.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.IO.DTOInstance.op_Implicit(RAWSimO.Core.Instance)~RAWSimO.Core.IO.DTOInstance">
            <summary>
            Creates a DTO representation of the original object.
            </summary>
            <param name="value">The original object.</param>
        </member>
        <member name="M:RAWSimO.Core.IO.DTOInstance.FromOrig(RAWSimO.Core.Instance)">
            <summary>
            Creates a clone out of the original.
            </summary>
            <param name="original">The original object.</param>
            <returns>The cloned object.</returns>
        </member>
        <member name="M:RAWSimO.Core.IO.DTOInstance.Submit(RAWSimO.Core.Instance)">
            <summary>
            Submits all this object to the instance.
            </summary>
            <param name="instance">The instance to submit to.</param>
            <returns>The original object created at the instance.</returns>
        </member>
        <member name="T:RAWSimO.Core.IO.DTOOrderList">
            <summary>
            A simplified representation of the original object used for serialization.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.DTOOrderList.Type">
            <summary>
            The type of the items of this list.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.DTOOrderList.ItemDescriptions">
            <summary>
            All item descriptions used in this list.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.DTOOrderList.ItemBundles">
            <summary>
            All bundles of this list.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.DTOOrderList.Orders">
            <summary>
            All orders of this list.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.IO.DTOOrderList.op_Implicit(RAWSimO.Core.Items.OrderList)~RAWSimO.Core.IO.DTOOrderList">
            <summary>
            Creates a DTO representation of the original object.
            </summary>
            <param name="value">The original object.</param>
        </member>
        <member name="M:RAWSimO.Core.IO.DTOOrderList.FromOrig(RAWSimO.Core.Items.OrderList)">
            <summary>
            Creates a clone out of the original.
            </summary>
            <param name="original">The original object.</param>
            <returns>The cloned object.</returns>
        </member>
        <member name="M:RAWSimO.Core.IO.DTOOrderList.Submit(RAWSimO.Core.Instance)">
            <summary>
            Submits all this object to the instance.
            </summary>
            <param name="instance">The instance to submit to.</param>
            <returns>The original object created at the instance.</returns>
        </member>
        <member name="T:RAWSimO.Core.IO.DTOOrder">
            <summary>
            A DTO representation of an order.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.DTOOrder.TimeStamp">
            <summary>
            The time at which this order becomes active.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.DTOOrder.Positions">
            <summary>
            The lines of this order.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.IO.DTOOrder.op_Implicit(RAWSimO.Core.Items.Order)~RAWSimO.Core.IO.DTOOrder">
            <summary>
            Creates a DTO representation of the original object.
            </summary>
            <param name="value">The original object.</param>
        </member>
        <member name="M:RAWSimO.Core.IO.DTOOrder.FromOrig(RAWSimO.Core.Items.Order)">
            <summary>
            Creates a clone out of the original.
            </summary>
            <param name="original">The original object.</param>
            <returns>The cloned object.</returns>
        </member>
        <member name="M:RAWSimO.Core.IO.DTOOrder.Submit(RAWSimO.Core.Instance)">
            <summary>
            Submits all this object to the instance.
            </summary>
            <param name="instance">The instance to submit to.</param>
            <returns>The original object created at the instance.</returns>
        </member>
        <member name="T:RAWSimO.Core.IO.DTOOrderPosition">
            <summary>
            A DTO representation of one order line.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.DTOOrderPosition.ItemDescriptionID">
            <summary>
            The ID of the item description of this order line.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.DTOOrderPosition.Count">
            <summary>
            The quantity of this order line.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.IO.DTOOrderPosition.op_Implicit(System.Collections.Generic.KeyValuePair{RAWSimO.Core.Items.ItemDescription,System.Int32})~RAWSimO.Core.IO.DTOOrderPosition">
            <summary>
            Creates a DTO representation of the original object.
            </summary>
            <param name="value">The original object.</param>
        </member>
        <member name="M:RAWSimO.Core.IO.DTOOrderPosition.Submit(RAWSimO.Core.Items.Order,RAWSimO.Core.Instance)">
            <summary>
            Submits all this object to the instance.
            </summary>
            <param name="instance">The instance to submit to.</param>
            <param name="order">The order to submit to.</param>
            <returns>The original object created at the instance.</returns>
        </member>
        <member name="T:RAWSimO.Core.IO.DTOItemDescription">
            <summary>
            A DTO representation of an item description.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.DTOItemDescription.ID">
            <summary>
            The ID of this element.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.DTOItemDescription.Type">
            <summary>
            The type of the item.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.DTOItemDescription.Weight">
            <summary>
            The weight of one unit of this item.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.DTOItemDescription.Letter">
            <summary>
            The letter of this item.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.DTOItemDescription.Color">
            <summary>
            The color of this item.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.IO.DTOItemDescription.op_Implicit(RAWSimO.Core.Items.ItemDescription)~RAWSimO.Core.IO.DTOItemDescription">
            <summary>
            Creates a DTO representation of the original object.
            </summary>
            <param name="value">The original object.</param>
        </member>
        <member name="M:RAWSimO.Core.IO.DTOItemDescription.FromOrig(RAWSimO.Core.Items.ItemDescription)">
            <summary>
            Creates a clone out of the original.
            </summary>
            <param name="original">The original object.</param>
            <returns>The cloned object.</returns>
        </member>
        <member name="M:RAWSimO.Core.IO.DTOItemDescription.Submit(RAWSimO.Core.Instance)">
            <summary>
            Submits all this object to the instance.
            </summary>
            <param name="instance">The instance to submit to.</param>
            <returns>The original object created at the instance.</returns>
        </member>
        <member name="T:RAWSimO.Core.IO.DTOItemBundle">
            <summary>
            A DTO representation of a bundle.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.DTOItemBundle.TimeStamp">
            <summary>
            The time at which this bundle becomes active.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.DTOItemBundle.ItemDescription">
            <summary>
            The item description of this bundle.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.DTOItemBundle.Size">
            <summary>
            The size of this bundle.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.IO.DTOItemBundle.op_Implicit(RAWSimO.Core.Items.ItemBundle)~RAWSimO.Core.IO.DTOItemBundle">
            <summary>
            Creates a DTO representation of the original object.
            </summary>
            <param name="value">The original object.</param>
        </member>
        <member name="M:RAWSimO.Core.IO.DTOItemBundle.FromOrig(RAWSimO.Core.Items.ItemBundle)">
            <summary>
            Creates a clone out of the original.
            </summary>
            <param name="original">The original object.</param>
            <returns>The cloned object.</returns>
        </member>
        <member name="M:RAWSimO.Core.IO.DTOItemBundle.Submit(RAWSimO.Core.Instance)">
            <summary>
            Submits all this object to the instance.
            </summary>
            <param name="instance">The instance to submit to.</param>
            <returns>The original object created at the instance.</returns>
        </member>
        <member name="T:RAWSimO.Core.IO.DTOOutputStation">
            <summary>
            A simplified representation of the original object used for serialization.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.IO.DTOOutputStation.#ctor">
            <summary>
            Creates a new instance of this object.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.DTOOutputStation.ID">
            <summary>
            The ID of this element.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.DTOOutputStation.X">
            <summary>
            The initial position of the station (x-value).
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.DTOOutputStation.Y">
            <summary>
            The initial position of the station (y-value).
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.DTOOutputStation.Radius">
            <summary>
            The radius of this station.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.DTOOutputStation.Tier">
            <summary>
            The tier this station is located on.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.DTOOutputStation.Capacity">
            <summary>
            The capacity of this station.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.DTOOutputStation.ItemTransferTime">
            <summary>
            The time it takes to pick one item at the station.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.DTOOutputStation.ItemPickTime">
            <summary>
            The time it takes to pick one item from a pod (excluding other handling times).
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.DTOOutputStation.ActivationOrderID">
            <summary>
            The order ID of this station that defines the sequence in which the stations have to be activated.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.DTOOutputStation.Queues">
            <summary>
            The queues of this station.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.IO.DTOOutputStation.op_Implicit(RAWSimO.Core.Elements.OutputStation)~RAWSimO.Core.IO.DTOOutputStation">
            <summary>
            Creates a DTO representation of the original object.
            </summary>
            <param name="value">The original object.</param>
        </member>
        <member name="M:RAWSimO.Core.IO.DTOOutputStation.Flush(RAWSimO.Core.Instance)">
            <summary>
            Finishes the submission of this element.
            </summary>
            <param name="instance">The instance to submit to.</param>
        </member>
        <member name="M:RAWSimO.Core.IO.DTOOutputStation.FromOrig(RAWSimO.Core.Elements.OutputStation)">
            <summary>
            Creates a clone out of the original.
            </summary>
            <param name="original">The original object.</param>
            <returns>The cloned object.</returns>
        </member>
        <member name="M:RAWSimO.Core.IO.DTOOutputStation.Submit(RAWSimO.Core.Instance)">
            <summary>
            Submits all this object to the instance.
            </summary>
            <param name="instance">The instance to submit to.</param>
            <returns>The original object created at the instance.</returns>
        </member>
        <member name="T:RAWSimO.Core.IO.DTOPod">
            <summary>
            A simplified representation of the original object used for serialization.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.IO.DTOPod.#ctor">
            <summary>
            Creates a new instance of this object.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.DTOPod.ID">
            <summary>
            The ID of this element.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.DTOPod.X">
            <summary>
            The initial position of the pod (x-value).
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.DTOPod.Y">
            <summary>
            The initial position of the pod (y-value).
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.DTOPod.Radius">
            <summary>
            The radius of the pod.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.DTOPod.Orientation">
            <summary>
            The initial orientation of the pod.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.DTOPod.Tier">
            <summary>
            The initial tier the pod is located on.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.DTOPod.Capacity">
            <summary>
            The capacity of the pod.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.IO.DTOPod.op_Implicit(RAWSimO.Core.Elements.Pod)~RAWSimO.Core.IO.DTOPod">
            <summary>
            Creates a DTO representation of the original object.
            </summary>
            <param name="value">The original object.</param>
        </member>
        <member name="M:RAWSimO.Core.IO.DTOPod.FromOrig(RAWSimO.Core.Elements.Pod)">
            <summary>
            Creates a clone out of the original.
            </summary>
            <param name="original">The original object.</param>
            <returns>The cloned object.</returns>
        </member>
        <member name="M:RAWSimO.Core.IO.DTOPod.Submit(RAWSimO.Core.Instance)">
            <summary>
            Submits all this object to the instance.
            </summary>
            <param name="instance">The instance to submit to.</param>
            <returns>The original object created at the instance.</returns>
        </member>
        <member name="T:RAWSimO.Core.IO.DTOQueueGuard">
            <summary>
            A simplified representation of the original object used for serialization.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.DTOQueueGuard.From">
            <summary>
            The from part of the connection.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.DTOQueueGuard.To">
            <summary>
            The to part of the connection.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.DTOQueueGuard.Entry">
            <summary>
            Indicates whether this is an entry or exit guard.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.DTOQueueGuard.Barrier">
            <summary>
            Indicates whether this guard can block the connection.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.DTOQueueGuard.Semaphore">
            <summary>
            The semaphore this guard belongs to.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.IO.DTOQueueGuard.op_Implicit(RAWSimO.Core.Waypoints.QueueGuard)~RAWSimO.Core.IO.DTOQueueGuard">
            <summary>
            Creates a DTO representation of the original object.
            </summary>
            <param name="value">The original object.</param>
        </member>
        <member name="M:RAWSimO.Core.IO.DTOQueueGuard.FromOrig(RAWSimO.Core.Waypoints.QueueGuard)">
            <summary>
            Creates a clone out of the original.
            </summary>
            <param name="original">The original object.</param>
            <returns>The cloned object.</returns>
        </member>
        <member name="M:RAWSimO.Core.IO.DTOQueueGuard.Submit(RAWSimO.Core.Instance)">
            <summary>
            Submits all this object to the instance.
            </summary>
            <param name="instance">The instance to submit to.</param>
            <returns>The original object created at the instance.</returns>
        </member>
        <member name="T:RAWSimO.Core.IO.DTOQueueSemaphore">
            <summary>
            A simplified representation of the original object used for serialization.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.DTOQueueSemaphore.ID">
            <summary>
            The ID of this element.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.DTOQueueSemaphore.Capacity">
            <summary>
            The capacity of the managed section.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.DTOQueueSemaphore.Guards">
            <summary>
            The guards belonging to this semaphore.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.IO.DTOQueueSemaphore.op_Implicit(RAWSimO.Core.Waypoints.QueueSemaphore)~RAWSimO.Core.IO.DTOQueueSemaphore">
            <summary>
            Creates a DTO representation of the original object.
            </summary>
            <param name="value">The original object.</param>
        </member>
        <member name="M:RAWSimO.Core.IO.DTOQueueSemaphore.FromOrig(RAWSimO.Core.Waypoints.QueueSemaphore)">
            <summary>
            Creates a clone out of the original.
            </summary>
            <param name="original">The original object.</param>
            <returns>The cloned object.</returns>
        </member>
        <member name="M:RAWSimO.Core.IO.DTOQueueSemaphore.Submit(RAWSimO.Core.Instance)">
            <summary>
            Submits all this object to the instance.
            </summary>
            <param name="instance">The instance to submit to.</param>
            <returns>The original object created at the instance.</returns>
        </member>
        <member name="T:RAWSimO.Core.IO.DTOTier">
            <summary>
            A simplified representation of the original object used for serialization.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.IO.DTOTier.#ctor">
            <summary>
            Creates a new instance of this object.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.DTOTier.ID">
            <summary>
            The ID of this element.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.DTOTier.Length">
            <summary>
            The length of the tier.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.DTOTier.Width">
            <summary>
            The width of the tier.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.DTOTier.RelativePositionX">
            <summary>
            The relative x-position of the tier.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.DTOTier.RelativePositionY">
            <summary>
            The relative y-position of the tier.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.DTOTier.RelativePositionZ">
            <summary>
            The relative z-position of the tier.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.IO.DTOTier.op_Implicit(RAWSimO.Core.Elements.Tier)~RAWSimO.Core.IO.DTOTier">
            <summary>
            Creates a DTO representation of the original object.
            </summary>
            <param name="value">The original object.</param>
        </member>
        <member name="M:RAWSimO.Core.IO.DTOTier.FromOrig(RAWSimO.Core.Elements.Tier)">
            <summary>
            Creates a clone out of the original.
            </summary>
            <param name="original">The original object.</param>
            <returns>The cloned object.</returns>
        </member>
        <member name="M:RAWSimO.Core.IO.DTOTier.Submit(RAWSimO.Core.Instance)">
            <summary>
            Submits all this object to the instance.
            </summary>
            <param name="instance">The instance to submit to.</param>
            <returns>The original object created at the instance.</returns>
        </member>
        <member name="T:RAWSimO.Core.IO.DTOWaypoint">
            <summary>
            A simplified representation of the original object used for serialization.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.DTOWaypoint.INT_NULL">
            <summary>
            The int value to represent a <code>null</code>.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.IO.DTOWaypoint.#ctor">
            <summary>
            Creates a new instance of this object.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.DTOWaypoint.ID">
            <summary>
            The ID of this element.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.DTOWaypoint.X">
            <summary>
            The x-position.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.DTOWaypoint.Y">
            <summary>
            The y-position.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.DTOWaypoint.Tier">
            <summary>
            The tier this element is located on.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.DTOWaypoint.Paths">
            <summary>
            The outgoing connections of the waypoint.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.DTOWaypoint.OutputStation">
            <summary>
            The output-station at this waypoint (if there is one).
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.DTOWaypoint.InputStation">
            <summary>
            The input-station at this waypoint (if there is one).
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.DTOWaypoint.Elevator">
            <summary>
            The elevator at this waypoint (if there is one).
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.DTOWaypoint.Pod">
            <summary>
            The pod at this waypoint (if there is one).
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.DTOWaypoint.PodStorageLocation">
            <summary>
            Indicates whether this waypoint is a storage location.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.DTOWaypoint.IsQueueWaypoint">
            <summary>
            Indicates whether this waypoint belongs to a queue.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.IO.DTOWaypoint.op_Implicit(RAWSimO.Core.Waypoints.Waypoint)~RAWSimO.Core.IO.DTOWaypoint">
            <summary>
            Creates a DTO representation of the original object.
            </summary>
            <param name="value">The original object.</param>
        </member>
        <member name="M:RAWSimO.Core.IO.DTOWaypoint.SetConnections(RAWSimO.Core.Instance,System.Collections.Generic.List{RAWSimO.Core.IO.DTOWaypoint})">
            <summary>
            Submits the connection of this waypoint.
            </summary>
            <param name="instance">The instance to register the connections with.</param>
            <param name="waypoints">The connected waypoints.</param>
        </member>
        <member name="M:RAWSimO.Core.IO.DTOWaypoint.FromOrig(RAWSimO.Core.Waypoints.Waypoint)">
            <summary>
            Creates a clone out of the original.
            </summary>
            <param name="original">The original object.</param>
            <returns>The cloned object.</returns>
        </member>
        <member name="M:RAWSimO.Core.IO.DTOWaypoint.Submit(RAWSimO.Core.Instance)">
            <summary>
            Submits all this object to the instance.
            </summary>
            <param name="instance">The instance to submit to.</param>
            <returns>The original object created at the instance.</returns>
        </member>
        <member name="T:RAWSimO.Core.IO.IDataTransferObject`2">
            <summary>
            Defines the basic functionality of a DTO wrapper for an object.
            </summary>
            <typeparam name="Orig">The original type.</typeparam>
            <typeparam name="Clone">The type of the clone.</typeparam>
        </member>
        <member name="M:RAWSimO.Core.IO.IDataTransferObject`2.FromOrig(`0)">
            <summary>
            Creates a clone out of the original.
            </summary>
            <param name="original">The original object.</param>
            <returns>The cloned object.</returns>
        </member>
        <member name="M:RAWSimO.Core.IO.IDataTransferObject`2.Submit(RAWSimO.Core.Instance)">
            <summary>
            Submits all this object to the instance.
            </summary>
            <param name="instance">The instance to submit to.</param>
            <returns>The original object created at the instance.</returns>
        </member>
        <member name="T:RAWSimO.Core.IO.InstanceIO">
            <summary>
            Exposes methods to serialize and deserialize instances and more.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.IO.InstanceIO.ReadInstance(System.String,System.String,System.String,System.Boolean,System.Boolean,System.Action{System.String})">
            <summary>
            Reads an instance from a file.
            </summary>
            <param name="instancePath">The path to either the instance or a layout configuration.</param>
            <param name="settingConfigPath">The path to the file specifying the setting.</param>
            <param name="controlConfigPath">The path to the file supplying the configuration for all controlling mechanisms.</param>
            <param name="overrideVisualizationAttached">Indicates whether a visualization shall be attached.</param>
            <param name="visualizationOnly">If this is enabled most of the initialization will be skipped.</param>
            <param name="logAction">A action that will be used for logging some lines.</param>
            <returns></returns>
        </member>
        <member name="M:RAWSimO.Core.IO.InstanceIO.ReadDTOInstance(System.String)">
            <summary>
            Reads a DTO representation of the instance given by the file.
            </summary>
            <param name="instancePath">The file to read.</param>
            <returns>The instance.</returns>
        </member>
        <member name="M:RAWSimO.Core.IO.InstanceIO.ReadOrders(System.String,RAWSimO.Core.Instance)">
            <summary>
            Reads an order list from a file.
            </summary>
            <param name="orderFile">The file.</param>
            <param name="instance">The instance to submit to.</param>
            <returns>The order list.</returns>
        </member>
        <member name="M:RAWSimO.Core.IO.InstanceIO.ReadSimpleItemGeneratorConfig(System.String)">
            <summary>
            Reads the configuration for a simple item generator instance.
            </summary>
            <param name="file">The file.</param>
            <returns>The configuration.</returns>
        </member>
        <member name="M:RAWSimO.Core.IO.InstanceIO.WriteInstance(System.String,RAWSimO.Core.Instance)">
            <summary>
            Writes the instance to a file.
            </summary>
            <param name="path">The file.</param>
            <param name="instance">The instance.</param>
        </member>
        <member name="M:RAWSimO.Core.IO.InstanceIO.WriteDTOInstance(System.String,RAWSimO.Core.IO.DTOInstance)">
            <summary>
            Writes a DTO instance representation to a file.
            </summary>
            <param name="path">The file.</param>
            <param name="instance">The instance.</param>
        </member>
        <member name="M:RAWSimO.Core.IO.InstanceIO.WriteLayout(System.String,RAWSimO.Core.Configurations.LayoutConfiguration)">
            <summary>
            Writes the layout configuration to a file.
            </summary>
            <param name="path">The file.</param>
            <param name="config">The layout configuration.</param>
        </member>
        <member name="M:RAWSimO.Core.IO.InstanceIO.WriteSetting(System.String,RAWSimO.Core.Configurations.SettingConfiguration)">
            <summary>
            Writes the setting specification to a file.
            </summary>
            <param name="path">The file.</param>
            <param name="config">The setting specification.</param>
        </member>
        <member name="M:RAWSimO.Core.IO.InstanceIO.WriteConfiguration(System.String,RAWSimO.Core.Configurations.ControlConfiguration)">
            <summary>
            Writes the configuration to a file.
            </summary>
            <param name="path">The file.</param>
            <param name="config">The configuration.</param>
        </member>
        <member name="M:RAWSimO.Core.IO.InstanceIO.WriteOrders(System.String,RAWSimO.Core.Items.OrderList)">
            <summary>
            Writes the order list to a file.
            </summary>
            <param name="path">The file.</param>
            <param name="list">The order list.</param>
        </member>
        <member name="M:RAWSimO.Core.IO.InstanceIO.WriteSimpleItemGeneratorConfigFile(System.String,RAWSimO.Core.Configurations.SimpleItemGeneratorConfiguration)">
            <summary>
            Writes a simple item generator configuration to a file.
            </summary>
            <param name="path">The file.</param>
            <param name="config">The configuration.</param>
        </member>
        <member name="T:RAWSimO.Core.IO.IOConstants">
            <summary>
            Defines certain constants used for serialization and deserialization.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.IOConstants.FORMATTER">
            <summary>
            The basic formatter to use for string-representations of values.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.IOConstants.EXPORT_FORMAT_SHORT">
            <summary>
            A format pattern to use when shortened string representations of values are desired.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.IOConstants.EXPORT_FORMAT_SHORTER">
            <summary>
            A format pattern to use when even shorter string represenstations of values are desired.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.IOConstants.EXPORT_FORMAT_SHORTEST_BY_ROUNDING">
            <summary>
            A format pattern to use when shortest string represenstations of values are desired.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.IOConstants.TIMESPAN_FORMAT_HUMAN_READABLE_DAYS">
            <summary>
            A format pattern to use when exporting a timespan as human readable that has to include days, e.g. the current simulation time after converting the seconds to <code>TimeSpan</code>.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.IOConstants.TIMESPAN_FORMAT_HUMAN_READABLE_MINUTES">
            <summary>
            A format pattern to use when exporting a timespan as human readable that has to include minutes, e.g. the current blocked time of a robot after converting the seconds to <code>TimeSpan</code>.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.IOConstants.COMMENT_LINE">
            <summary>
            String for indicating a following comment line.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.IOConstants.BLOCKNAME_START">
            <summary>
            String for indicating a following block-start.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.IOConstants.BLOCKNAME_END">
            <summary>
            Character indicating the end of a blockname.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.IOConstants.LINE_TERMINATOR">
            <summary>
            String that terminates each line when writing a CSV-file.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.IOConstants.DELIMITER_VALUE">
            <summary>
            Delimiter for separating values.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.IOConstants.DELIMITER_LIST">
            <summary>
            Delimiter for list-values.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.IOConstants.DELIMITER_TUPLE">
            <summary>
            Delimiter for tuples.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.IOConstants.DELIMITER_SPECIAL">
            <summary>
            Delimiter for special purposes.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.IOConstants.DELIMITER_CUSTOM_CONTROLLER_FOOTPRINT">
            <summary>
            Delimiter for custom performance footprint strings.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.IOConstants.GNU_PLOT_VALUE_SPLIT">
            <summary>
            Delimiter for separating values to use in gnuplot.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.IOConstants.GNU_PLOT_COMMENT_LINE">
            <summary>
            Marker for a gnuplot comment line.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.IOConstants.STAT_HEAT_TAG_START">
            <summary>
            The character denoting the start of a tag identifying the heat info type.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.IOConstants.STAT_HEAT_TAG_END">
            <summary>
            The character denoting the end of a tag identifying the heat info type.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.IOConstants.LOG_FILE">
            <summary>
            The name of the log file to use (if desired).
            </summary>
        </member>
        <member name="T:RAWSimO.Core.IO.IOConstants.StatFile">
            <summary>
            Enumerates all statistics files written out by the simulation (every file needs to be contained in here!).
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.IOConstants.StatFile.InstanceName">
            <summary>
            The file containing the instance name.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.IOConstants.StatFile.SettingName">
            <summary>
            The file containing the setting name.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.IOConstants.StatFile.ControllerName">
            <summary>
            The file containing the controller name.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.IOConstants.StatFile.ItemProgressionRaw">
            <summary>
            The item-progression file.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.IOConstants.StatFile.BundleProgressionRaw">
            <summary>
            The bundle-progression file.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.IOConstants.StatFile.OrderProgressionRaw">
            <summary>
            The order-progression file.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.IOConstants.StatFile.BundlePlacementProgressionRaw">
            <summary>
            The bundle-placement-progression file.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.IOConstants.StatFile.OrderPlacementProgressionRaw">
            <summary>
            The order-placement-progression file.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.IOConstants.StatFile.CollisionProgressionRaw">
            <summary>
            The collision-progression file.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.IOConstants.StatFile.TripsCompletedProgressionRaw">
            <summary>
            The completed trips progression file.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.IOConstants.StatFile.TraveledDistanceProgressionRaw">
            <summary>
            The traveled distance progression file.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.IOConstants.StatFile.InventoryLevelPollingRaw">
            <summary>
            The file storing all inventory levels polled.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.IOConstants.StatFile.PerformancePollingRaw">
            <summary>
            The file storing all performance polls.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.IOConstants.StatFile.BundleOrderSituationPollingRaw">
            <summary>
            The file storing all backlog levels polled.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.IOConstants.StatFile.StationPollingRaw">
            <summary>
            The file storing all station statistics polled.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.IOConstants.StatFile.BotInfoPollingRaw">
            <summary>
            The file storing all bot info statistics polled.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.IOConstants.StatFile.WellSortednessPollingRaw">
            <summary>
            The file storing all well sortedness polled.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.IOConstants.StatFile.ReadableStatistics">
            <summary>
            The readable statistics file.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.IOConstants.StatFile.StationStatistics">
            <summary>
            The file containing statistics about the stations.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.IOConstants.StatFile.ConnectionStatistics">
            <summary>
            The file containing detailed statistics about the connections the bot used.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.IOConstants.StatFile.ItemDescriptionStatistics">
            <summary>
            The file containing detailed information about all SKUs and how they were ordered during simulation.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.IOConstants.StatFile.Footprint">
            <summary>
            The file containing the main stat values of the corresponding run.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.IOConstants.StatFile.PathFinding">
            <summary>
            The pathfinding file.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.IOConstants.StatFile.HeatLocationPolling">
            <summary>
            The file storing all the locations polled.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.IOConstants.StatFile.HeatTrips">
            <summary>
            The file storing the trip information.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.IOConstants.StatFile.HeatStorageLocationPolling">
            <summary>
            The file storing all the pod info polled.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.IOConstants.StatFile.IndividualPerformanceFileOrderManagerAsyncSeparate">
            <summary>
            The file for storing the individual separate performance result for the async order manager, if present.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.IOConstants.StatFile.IndividualPerformanceFileOrderManagerAsyncConsolidated">
            <summary>
            The file for storing the individual consolidated performance result for the async order manager, if present.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.IOConstants.StatFileNames">
            <summary>
            Contains all names to use for the statistic files defined.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.IOConstants.STAT_ITEM_PROGRESSION_RESULT_FILENAME">
            <summary>
            Name of the item-progression result files.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.IOConstants.STAT_BUNDLE_PROGRESSION_RESULT_FILENAME">
            <summary>
            Name of the bundle-progression result files.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.IOConstants.STAT_ORDER_PROGRESSION_RESULT_FILENAME">
            <summary>
            Name of the order-progression result files.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.IOConstants.STAT_COLLISION_PROGRESSION_RESULT_FILENAME">
            <summary>
            Name of the collision-progression result files.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.IOConstants.STAT_TRAVELED_DISTANCE_PROGRESSION_RESULT_FILENAME">
            <summary>
            Name of the traveled distance progression result files.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.IOConstants.STAT_PROGRESSION_SCRIPT_FILENAME">
            <summary>
            Name of the progression script files.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.IOConstants.STAT_CONSOLIDATED_FOOTPRINTS_FILENAME">
            <summary>
            Name of the file containing all the KPI-values of the runs.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.IO.IOConstants.DEFAULT_RESOURCE_SUB_DIRS">
            <summary>
            Typical names of folders containing resource files for auto-lookup.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.IO.IOHelper">
            <summary>
            Exposes helping methods for I/O operations.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.IO.IOHelper.FindResourceFile(System.String,System.String)">
            <summary>
            Finds the given wordlist by looking up default directories for the wordlists.
            </summary>
            <param name="resourceFile">The wordfile to look for.</param>
            <param name="instancePath">The path of the instance (one of the default storage locations).</param>
            <returns>The successfully retrieved wordfile. If no file was found an Exception is thrown.</returns>
        </member>
        <member name="T:RAWSimO.Core.Items.ColoredLetterBundle">
            <summary>
            Implements a colored letter based bundle.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Items.ColoredLetterBundle.#ctor(RAWSimO.Core.Instance)">
            <summary>
            Instantiates this class.
            </summary>
            <param name="instance">The instance this element belongs to.</param>
        </member>
        <member name="M:RAWSimO.Core.Items.ColoredLetterBundle.GetIdentfierString">
            <summary>
            Returns a simple string identifying this object in its instance.
            </summary>
            <returns>A simple name identifying the instance element.</returns>
        </member>
        <member name="M:RAWSimO.Core.Items.ColoredLetterBundle.ToString">
            <summary>
            Returns a simple string giving information about the object.
            </summary>
            <returns>A simple string.</returns>
        </member>
        <member name="T:RAWSimO.Core.Items.ColoredLetterDescription">
            <summary>
            Implements a colored letter based item description.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Items.ColoredLetterDescription.#ctor(RAWSimO.Core.Instance)">
            <summary>
            Instantiates this class.
            </summary>
            <param name="instance">The instance this element belongs to.</param>
        </member>
        <member name="F:RAWSimO.Core.Items.ColoredLetterDescription.Letter">
            <summary>
            The letter of this colored letter.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Items.ColoredLetterDescription.Color">
            <summary>
            The color of this colored letter.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Items.ColoredLetterDescription.Type">
            <summary>
            The type of the item.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Items.ColoredLetterDescription.GetIdentfierString">
            <summary>
            Returns a simple string identifying this object in its instance.
            </summary>
            <returns>A simple name identifying the instance element.</returns>
        </member>
        <member name="M:RAWSimO.Core.Items.ColoredLetterDescription.ToString">
            <summary>
            Returns a simple string giving information about the object.
            </summary>
            <returns>A simple string.</returns>
        </member>
        <member name="M:RAWSimO.Core.Items.ColoredLetterDescription.ToDescriptiveString">
            <summary>
            Returns a string describing the item behind this type.
            </summary>
            <returns>A descriptive string.</returns>
        </member>
        <member name="M:RAWSimO.Core.Items.ColoredLetterDescription.GetInfoColor">
            <summary>
            The color of this letter.
            </summary>
            <returns>The color.</returns>
        </member>
        <member name="M:RAWSimO.Core.Items.ColoredLetterDescription.GetInfoLetter">
            <summary>
            The letter of this colored letter.
            </summary>
            <returns>The character describing the letter.</returns>
        </member>
        <member name="T:RAWSimO.Core.Items.ItemBundle">
            <summary>
            Implements a basic item bundle.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Items.ItemBundle.#ctor(RAWSimO.Core.Instance)">
            <summary>
            Creates a new instance of an item bundle.
            </summary>
            <param name="instance">The instance this bundle belongs to.</param>
        </member>
        <member name="P:RAWSimO.Core.Items.ItemBundle.BundleWeight">
            <summary>
            The weight of this bundle.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Items.ItemBundle.ItemDescription">
            <summary>
            The item-description of this physical item.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Items.ItemBundle.TimeStamp">
            <summary>
            The time this bundle is available.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Items.ItemBundle.TimeStampSubmit">
            <summary>
            The time stamp this order was submitted to an input-station.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Items.ItemBundle.ItemCount">
            <summary>
            The number of items currently contained in this bundle.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Items.ItemBundle.Pod">
            <summary>
            The pod this bundle is allocated to.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Items.ItemBundle.GetIdentfierString">
            <summary>
            Returns a simple string identifying this object in its instance.
            </summary>
            <returns>A simple name identifying the instance element.</returns>
        </member>
        <member name="M:RAWSimO.Core.Items.ItemBundle.ToString">
            <summary>
            Returns a simple string giving information about the object.
            </summary>
            <returns>A simple string.</returns>
        </member>
        <member name="M:RAWSimO.Core.Items.ItemBundle.GetInfoBundleWeight">
            <summary>
            The weight of the complete bundle.
            </summary>
            <returns>The weight of the bundle.</returns>
        </member>
        <member name="M:RAWSimO.Core.Items.ItemBundle.GetInfoItemCount">
            <summary>
            The number of items contained in this bundle.
            </summary>
            <returns>The number of items contained.</returns>
        </member>
        <member name="M:RAWSimO.Core.Items.ItemBundle.GetInfoItemDescription">
            <summary>
            The corresponding item description.
            </summary>
            <returns>The corresponding item description.</returns>
        </member>
        <member name="T:RAWSimO.Core.Items.ItemDescription">
            <summary>
            Implements a basic item description, i.e. SKU.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Items.ItemDescription.#ctor(RAWSimO.Core.Instance)">
            <summary>
            Creates a new item-description.
            </summary>
            <param name="instance">The instance this item-description belongs to.</param>
        </member>
        <member name="F:RAWSimO.Core.Items.ItemDescription.BundleSize">
            <summary>
            If a value greater 1 is supplied, this defines a fixed size of the bundle to use when replenishing this product type.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Items.ItemDescription.Weight">
            <summary>
            Weight of the item. This defines how much capacity one instance of this item uses when put into a storage.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Items.ItemDescription.Type">
            <summary>
            The type of the item.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Items.ItemDescription.ToDescriptiveString">
            <summary>
            Returns a string describing the item behind this type.
            </summary>
            <returns>A descriptive string.</returns>
        </member>
        <member name="P:RAWSimO.Core.Items.ItemDescription.ItemProbability">
            <summary>
            The order probability of tis item, set in the .xgenc file.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Items.ItemDescription.OrderCount">
            <summary>
            The number of times this item was ordered.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Items.ItemDescription.GetIdentfierString">
            <summary>
            Returns a simple string identifying this object in its instance.
            </summary>
            <returns>A simple name identifying the instance element.</returns>
        </member>
        <member name="M:RAWSimO.Core.Items.ItemDescription.ToString">
            <summary>
            Returns a simple string giving information about the object.
            </summary>
            <returns>A simple string.</returns>
        </member>
        <member name="M:RAWSimO.Core.Items.ItemDescription.GetInfoWeight">
            <summary>
            Gets the weight of one item of this type.
            </summary>
            <returns>The weight of the item.</returns>
        </member>
        <member name="M:RAWSimO.Core.Items.ItemDescription.GetInfoType">
            <summary>
            The type of the item.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Items.ItemDescription.GetInfoDescription">
            <summary>
            Gets a string representation of the item.
            </summary>
            <returns>A string representing the item.</returns>
        </member>
        <member name="P:RAWSimO.Core.Items.ItemDescription.RAWSimO#Toolbox#IExposeVolatileID#VolatileID">
            <summary>
            An ID that is useful as an index for listing this item.
            This ID is unique among all <code>ItemDescription</code>s while being as low as possible.
            Note: For now the volatile ID matches the actual ID.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Items.ItemType">
            <summary>
            The different item types that are supported by this framework.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Items.ItemType.SimpleItem">
            <summary>
            A simple item only identified by its ID. (Coloring is only used to better visually distinguish multiple items)
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Items.ItemType.Letter">
            <summary>
            An item that is described by a combination of a letter and a color.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Items.LetterColors">
            <summary>
            Defines the color of a <code>ColoredLetter</code>.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Items.LetterColors.Red">
            <summary>
            Simple red
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Items.LetterColors.Green">
            <summary>
            Simple green
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Items.LetterColors.Blue">
            <summary>
            Simple blue
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Items.LetterColors.Yellow">
            <summary>
            Simple yellow
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Items.Order">
            <summary>
            Defines one order.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Items.Order.#ctor">
            <summary>
            Creates a new instance of the order.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Items.Order._overallQuantity">
            <summary>
            The overall demand quantity.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Items.Order._quantities">
            <summary>
            The quantities needed per order line.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Items.Order._requests">
            <summary>
            The requests belonging to the order lines.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Items.Order._overallServedQuantity">
            <summary>
            The overall served demand quantity.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Items.Order._servedQuantities">
            <summary>
            The quantities already fulfilled per order line.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Items.Order._servedPositions">
            <summary>
            The number of finished order lines.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Items.Order.TimeStamp">
            <summary>
            The time this order is placed.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Items.Order.TimeStampSubmit">
            <summary>
            The time stamp this order was submitted to an output-station.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Items.Order.TimeStampQueued">
            <summary>
            The time this order was submitted to a queue of a station.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Items.Order.DueTime">
            <summary>
            The time stamp at which the order should be completed.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Items.Order.Positions">
            <summary>
            Enumerates all lines of the order.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Items.Order.GetDemandCount">
            <summary>
            Gets the overall demand count of all lines of the order.
            </summary>
            <returns>The overall quantity necessary to fulfill this order.</returns>
        </member>
        <member name="M:RAWSimO.Core.Items.Order.GetOpenDemandCount">
            <summary>
            Gets the overall open demand count of all lines of the order.
            </summary>
            <returns>The overall open demand of the order.</returns>
        </member>
        <member name="M:RAWSimO.Core.Items.Order.GetDemandCount(RAWSimO.Core.Items.ItemDescription)">
            <summary>
            Gets the given lines's demand count.
            </summary>
            <param name="item">The order line.</param>
            <returns>The demand of the line.</returns>
        </member>
        <member name="P:RAWSimO.Core.Items.Order.Requests">
            <summary>
            Enumerates all requests for picking the different items.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Items.Order.AddPosition(RAWSimO.Core.Items.ItemDescription,System.Int32)">
            <summary>
            Adds a new line to the order.
            </summary>
            <param name="itemDescription">The item description of the line.</param>
            <param name="count">The quantity.</param>
        </member>
        <member name="M:RAWSimO.Core.Items.Order.AddRequest(RAWSimO.Core.Items.ItemDescription,RAWSimO.Core.Management.ExtractRequest)">
            <summary>
            Adds the request to pick the item to the order. This can be used by other components to see the particular requests' status.
            </summary>
            <param name="itemDescription">The SKU to add the request for.</param>
            <param name="request">The particular request to pick the item.</param>
        </member>
        <member name="M:RAWSimO.Core.Items.Order.PositionOverallCount(RAWSimO.Core.Items.ItemDescription)">
            <summary>
            Returns the number of units needed to fulfill the given position.
            </summary>
            <param name="item">The SKU.</param>
            <returns>Number of units necessary to fulfill the position corresponding to the given SKU.</returns>
        </member>
        <member name="M:RAWSimO.Core.Items.Order.PositionServedCount(RAWSimO.Core.Items.ItemDescription)">
            <summary>
            Returns the number of units picked so far for the given position.
            </summary>
            <param name="item">The SKU.</param>
            <returns>Number of units picked so far for the position corresponding to the given SKU.</returns>
        </member>
        <member name="M:RAWSimO.Core.Items.Order.Serve(RAWSimO.Core.Items.ItemDescription)">
            <summary>
            Fulfills one unit of this order.
            </summary>
            <param name="item">The physical unit used to fulfill a part of the order.</param>
            <returns>Indicates whether fulfilling one unit of the order was successful.</returns>
        </member>
        <member name="M:RAWSimO.Core.Items.Order.IsCompleted">
            <summary>
            Checks whether the order is complete.
            </summary>
            <returns><code>true</code> if the order is complete, <code>false</code> otherwise.</returns>
        </member>
        <member name="M:RAWSimO.Core.Items.Order.ToString">
            <summary>
            Returns a simple string giving information about the object.
            </summary>
            <returns>A simple string.</returns>
        </member>
        <member name="F:RAWSimO.Core.Items.Order.HelperBoolTag">
            <summary>
            A helper tag that can be used for meta information purposes by other methods.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Items.Order.GetInfoPositions">
            <summary>
            Gets all positions of the order.
            </summary>
            <returns>An enumeration of all item-description in this order.</returns>
        </member>
        <member name="M:RAWSimO.Core.Items.Order.GetInfoServedCount(RAWSimO.Core.Info.IItemDescriptionInfo)">
            <summary>
            Gets the given position's quantity.
            </summary>
            <param name="item">The position.</param>
            <returns>The quantity of the position.</returns>
        </member>
        <member name="M:RAWSimO.Core.Items.Order.GetInfoDemandCount(RAWSimO.Core.Info.IItemDescriptionInfo)">
            <summary>
            Gets the given position's already served quantity.
            </summary>
            <param name="item">The position.</param>
            <returns>The already served quantity of the position.</returns>
        </member>
        <member name="M:RAWSimO.Core.Items.Order.GetInfoIsCompleted">
            <summary>
            Indicates whether the order is already completed.
            </summary>
            <returns><code>true</code> if the order is completed, <code>false</code> otherwise.</returns>
        </member>
        <member name="T:RAWSimO.Core.Items.OrderList">
            <summary>
            Defines a list of orders and bundles that can be used to feed an offline generated list to the simulation instead of generating them online.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Items.OrderList.#ctor(RAWSimO.Core.Items.ItemType)">
            <summary>
            Creates a new order list.
            </summary>
            <param name="type">The type of the items in the list.</param>
        </member>
        <member name="P:RAWSimO.Core.Items.OrderList.Type">
            <summary>
            The type of the items in this order list.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Items.OrderList.ItemDescriptions">
            <summary>
            All item-descriptions of all orders in this order list.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Items.OrderList.Orders">
            <summary>
            All orders of this order list sorted by their placement timestamp.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Items.OrderList.Bundles">
            <summary>
            All item-bundles of this list sorted by their placement timestamp.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Items.OrderList.Sort">
            <summary>
            Sorts all orders by their placement timestamp. This can be used after generating a list of orders randomly.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Items.OrderList.GetMetaInfoBasedOrderListName">
            <summary>
            Gets a name for the order list based on the information in the list.
            </summary>
            <returns>A string describing the list using the type of the items, the number of item descriptions, the number of bundles, the number of orders and the absolute time-horizon.</returns>
        </member>
        <member name="T:RAWSimO.Core.Items.SimpleItemBundle">
            <summary>
            Implements an item bundle of the type simple.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Items.SimpleItemBundle.#ctor(RAWSimO.Core.Instance)">
            <summary>
            Instantiates this class.
            </summary>
            <param name="instance">The instance this element belongs to.</param>
        </member>
        <member name="M:RAWSimO.Core.Items.SimpleItemBundle.GetIdentfierString">
            <summary>
            Returns a simple string identifying this object in its instance.
            </summary>
            <returns>A simple name identifying the instance element.</returns>
        </member>
        <member name="M:RAWSimO.Core.Items.SimpleItemBundle.ToString">
            <summary>
            Returns a simple string giving information about the object.
            </summary>
            <returns>A simple string.</returns>
        </member>
        <member name="T:RAWSimO.Core.Items.SimpleItemDescription">
            <summary>
            Implements the item description (SKU) for the item type simple.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Items.SimpleItemDescription.#ctor(RAWSimO.Core.Instance)">
            <summary>
            Instantiates this class.
            </summary>
            <param name="instance">The instance this element belongs to.</param>
        </member>
        <member name="P:RAWSimO.Core.Items.SimpleItemDescription.ItemID">
            <summary>
            The ID used to identify the item. (Same as ID set by the instance)
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Items.SimpleItemDescription.Hue">
            <summary>
            The color of this item (used to better distinguish multiple item types).
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Items.SimpleItemDescription.Type">
            <summary>
            The type of the item.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Items.SimpleItemDescription.GetIdentfierString">
            <summary>
            Returns a simple string identifying this object in its instance.
            </summary>
            <returns>A simple name identifying the instance element.</returns>
        </member>
        <member name="M:RAWSimO.Core.Items.SimpleItemDescription.ToString">
            <summary>
            Returns a simple string giving information about the object.
            </summary>
            <returns>A simple string.</returns>
        </member>
        <member name="M:RAWSimO.Core.Items.SimpleItemDescription.ToDescriptiveString">
            <summary>
            Returns a string describing the item behind this type.
            </summary>
            <returns>A descriptive string.</returns>
        </member>
        <member name="M:RAWSimO.Core.Items.SimpleItemDescription.GetInfoHue">
            <summary>
            The color of this item (used to better distinguish the items - does not have any additional meaning).
            </summary>
            <returns>The color.</returns>
        </member>
        <member name="T:RAWSimO.Core.Management.HeatMode">
            <summary>
            Indicates which information shall be used for rendering heat informtation for the pods.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Management.HeatMode.None">
            <summary>
            No information is given.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Management.HeatMode.CurrentCapacityUtilization">
            <summary>
            Gives feedback about the current utilization of the pods.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Management.HeatMode.NumItemsHandled">
            <summary>
            Gives feedback about the number of items handled per pod.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Management.HeatMode.NumBundlesHandled">
            <summary>
            Gives feedback about the number of bundles handled per pod.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Management.HeatMode.AverageFrequency">
            <summary>
            Gives feedback about the average frequency of items contained in the pods.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Management.HeatMode.MaxFrequency">
            <summary>
            Gives feedback about the maximal frequency of the items contained in the pods.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Management.HeatMode.AverageStaticFrequency">
            <summary>
            Gives feedback about the average frequency of the items internally used for generating them.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Management.HeatMode.MaxStaticFrequency">
            <summary>
            Gives feedback about the maximal frequency of the items internally used for generating them.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Management.HeatMode.StorageType">
            <summary>
            Gives feedback about the type of the pod. This is set by a manager to give visual feedback.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Management.HeatMode.CacheType">
            <summary>
            Gives feedback about whether the storage location the pod is stored at belongs to a cache.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Management.HeatMode.ProminenceValue">
            <summary>
            Gives feedback about the prominence value set by a pod utility manager component.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Management.HeatMode.PodSpeed">
            <summary>
            Gives feedback about the speed value set by a pod utility manager component.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Management.HeatMode.PodUtility">
            <summary>
            Gives feedback about the utility value set by a pod utility manager component.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Management.HeatMode.PodCombinedValue">
            <summary>
            Gives feedback about the combined speed and utility value set by a pod utility manager component.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Management.ItemManager">
            <summary>
            The manager class that handles all bundle, order and item generation during simulation.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Management.ItemManager.#ctor(RAWSimO.Core.Instance)">
            <summary>
            Constructs a new item manager object for the given instance.
            </summary>
            <param name="instance">The instance this item manager belongs to.</param>
        </member>
        <member name="F:RAWSimO.Core.Management.ItemManager._itemDescriptions">
            <summary>
            All possible item description. Hence, this is the complete list of all possible simulated products that can be generated.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Management.ItemManager._itemDescriptionProbabilities">
            <summary>
            The probabilities for all item-descriptions.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Management.ItemManager._itemDescriptionProbabilityMax">
            <summary>
            The maximal probability of all item-descriptions.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Management.ItemManager.OrderPoissonGenerator">
            <summary>
            The poisson generator used to emulate realistic order generation frequencies.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Management.ItemManager.BundlePoissonGenerator">
            <summary>
            The poisson generator used to emulate realistic bundle generation frequencies.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Management.ItemManager._nextPoissonOrderGenerationTime">
            <summary>
            The next timestamp at which an order is generated when in poisson mode.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Management.ItemManager._nextPoissonBundleGenerationTime">
            <summary>
            The next timestamp at which a bundle is generated when in poisson mode.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Management.ItemManager.Instance">
            <summary>
            The instance this manager belongs to.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Management.ItemManager._futureOrders">
            <summary>
            A list containing all future orders that aren't placed yet. (Only available in fixed order mode.)
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Management.ItemManager._availableOrders">
            <summary>
            The set of all pending orders.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Management.ItemManager.BacklogOrderCount">
            <summary>
            Gets the current number of orders in backlog.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Management.ItemManager._openOrders">
            <summary>
            The list of all currently assigned orders.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Management.ItemManager._completedOrders">
            <summary>
            The list of all already completed orders.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Management.ItemManager._futureBundles">
            <summary>
            A list containing all future bundles that aren't placed yet. (Only available in fixed bundle mode.)
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Management.ItemManager._availableBundles">
            <summary>
            The set of all pending bundles.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Management.ItemManager.BacklogBundleCount">
            <summary>
            Gets the current number of bundles in backlog.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Management.ItemManager._openBundles">
            <summary>
            The list of all currently assigned bundles.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Management.ItemManager._completedBundles">
            <summary>
            The list of all already completed bundles.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Management.ItemManager.ORDER_GENERATION_TIMEOUT">
            <summary>
            When failing to generate suitable orders the order generation is blocked for this time.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Management.ItemManager.BUNDLE_GENERATION_TIMEOUT">
            <summary>
            When failing to generate suitable bundles the bundle generation is blocked for this time.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Management.ItemManager._orderGenerationBlockedUntil">
            <summary>
            The timestamp in simulation time up until which the generation of orders is temporarily blocked.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Management.ItemManager._bundleGenerationBlockedUntil">
            <summary>
            The timestamp in simulation time up until which the generation of bundles is temporarily blocked.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Management.ItemManager._orderGenerationBlockedByInventoryLevel">
            <summary>
            Indicates whether order generation is currently blocked by too much inventory.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Management.ItemManager._bundleGenerationBlockedByInventoryLevel">
            <summary>
            Indicates whether bundle generation is currently blocked by too much inventory.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Management.ItemManager._itemDemandInformation">
            <summary>
            Information about the demand for the different items. This is used when generating item-bundles according to the recently submitted orders.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Management.ItemManager._batchNextBundleCycle">
            <summary>
            The next time the bundle batch timepoints cycle.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Management.ItemManager._batchNextOrderCycle">
            <summary>
            The next time the order batch timepoints cycle.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Management.ItemManager._batchTimepointsBundles">
            <summary>
            All times at which bundle batches have to be generated with their respective amount information.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Management.ItemManager._batchTimepointsOrders">
            <summary>
            All times at which order batches have to be generated with their respective amount information.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Management.ItemManager._downPeriodHandling">
            <summary>
            Indicates whether down periods must be handled.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Management.ItemManager._downPeriodNextBundleCycle">
            <summary>
            The next time the down period timepoints for bundles cycle.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Management.ItemManager._downPeriodNextOrderCycle">
            <summary>
            The next time the down period timepoints for orders cycle.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Management.ItemManager._downPeriodTimepointsBundles">
            <summary>
            All times at which the down period for bundle generation changes.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Management.ItemManager._downPeriodTimepointsOrders">
            <summary>
            All times at which the down period for order generation changes.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Management.ItemManager._downPeriodActiveForBundles">
            <summary>
            Indicates whether there is an active down period for bundle generation.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Management.ItemManager._downPeriodActiveForOrders">
            <summary>
            Indicates whether there is an active down period for order generation.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Management.ItemManager._baseWords">
            <summary>
            The list of possible orders to generate when in random order mode. (The letters have to be colored by the specified probabilities)
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Management.ItemManager._itemDescriptionsByValue">
            <summary>
            Contains all item-description objects by their characteristics.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Management.ItemManager._colorProbabilities">
            <summary>
            The probabilities of the different colors for fast access.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Management.ItemManager._simpleItemGeneratorConfig">
            <summary>
            The config for the simple item generator.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Management.ItemManager._simpleItemCoProbabilityDefault">
            <summary>
            The default conditional probability.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Management.ItemManager._simpleItemCoProbabilities">
            <summary>
            Contains the probability that is used to determine additional items for an order based on one item already contained in that order.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Management.ItemManager.GetCombinedProbability(RAWSimO.Core.Items.ItemDescription,RAWSimO.Core.Items.ItemDescription)">
            <summary>
            Gets the conditional probability of selecting the second item in case the first one is already chosen.
            </summary>
            <param name="item1">The first item (already chosen).</param>
            <param name="item2">The second item.</param>
            <returns>The conditional probability.</returns>
        </member>
        <member name="M:RAWSimO.Core.Management.ItemManager.InitializeMode">
            <summary>
            Initializes the basic item-descriptions according to the given wordlist-file.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Management.ItemManager.InitializeInventoryAndBundlesAndOrders">
            <summary>
            Initializes the inventory content, the available bundle buffer and the available order buffer.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Management.ItemManager.InitializePodContentsRandomly(System.Double)">
            <summary>
            Initializes a random inventory content.
            </summary>
            <param name="initialInventory">The fractional amount of desired inventory.</param>
        </member>
        <member name="M:RAWSimO.Core.Management.ItemManager.InitializeBundlesAndOrdersRandomly(System.Int32,System.Int32)">
            <summary>
            Randomly generates a set of bundles and orders that are ready for allocation.
            </summary>
            <param name="bundles">The number of bundles to generate.</param>
            <param name="orders">The number of orders to generate.</param>
        </member>
        <member name="M:RAWSimO.Core.Management.ItemManager.WarmupItemFrequencies">
            <summary>
            Generates a random orders that are not submitted to the instance. These order can be used to warmup item-frequency based mechanisms.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Management.ItemManager.CheckForOrderGenerationPause">
            <summary>
            Checks whether order generation is currently suspended.
            </summary>
            <returns><code>true</code> if order generation is blocked, <code>false</code> otherwise.</returns>
        </member>
        <member name="M:RAWSimO.Core.Management.ItemManager.CheckForBundleGenerationPause">
            <summary>
            Checks whether bundle generation is currently suspended.
            </summary>
            <returns><code>true</code> if bundle generation is blocked, <code>false</code> otherwise.</returns>
        </member>
        <member name="M:RAWSimO.Core.Management.ItemManager.GenerateRandomBundle">
            <summary>
            Generates a random item.
            </summary>
            <returns>The generated item.</returns>
        </member>
        <member name="M:RAWSimO.Core.Management.ItemManager.GenerateRequiredBundle">
            <summary>
            Generates a bundle that is needed by the allocated orders. (This feels like cheating - that is why I integrated simple items)
            </summary>
            <returns>The newly generated bundle or <code>null</code> if no bundle is necessary.</returns>
        </member>
        <member name="M:RAWSimO.Core.Management.ItemManager.GenerateRandomOrder">
            <summary>
            Generates a random order.
            </summary>
            <returns>The newly generated order.</returns>
        </member>
        <member name="M:RAWSimO.Core.Management.ItemManager.TakeAvailableOrder(RAWSimO.Core.Items.Order)">
            <summary>
            Returns the first available order and removes it from the list.
            </summary>
            <returns>The order.</returns>
        </member>
        <member name="M:RAWSimO.Core.Management.ItemManager.TakeAvailableBundle(RAWSimO.Core.Items.ItemBundle)">
            <summary>
            Returns the next available bundle and removes it from the list.
            </summary>
            <param name="bundle">The bundle that is being allocated.</param>
        </member>
        <member name="P:RAWSimO.Core.Management.ItemManager.AvailableOrders">
            <summary>
            Exposes all currently available orders.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Management.ItemManager.RetrieveOrder(System.Object)">
            <summary>
            Retrieves the next order from a dynamic list of available orders for the retriever. Every retrieved item will be consumed and removed from the personalized list of the retriever.
            </summary>
            <param name="retriever">The object retrieving the next order.</param>
            <returns>The next order on the list or <code>null</code> if no order is left.</returns>
        </member>
        <member name="F:RAWSimO.Core.Management.ItemManager._personalizedAvailableOrders">
            <summary>
            Contains all bundles personalized per retrieving object.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Management.ItemManager.NewOrderAssignedToStation(RAWSimO.Core.Elements.OutputStation,RAWSimO.Core.Items.Order)">
            <summary>
            Called by the system when a new order has been assigned to an output-station. It is useful as it indicates what new items need to be filled in the system (based on the order).
            </summary>
            <param name="oStation">The station the order was assigned to.</param>
            <param name="order">The assigned order.</param>
        </member>
        <member name="M:RAWSimO.Core.Management.ItemManager.CompleteOrder(RAWSimO.Core.Items.Order)">
            <summary>
            Marks the given order as complete.
            </summary>
            <param name="order">The completed order.</param>
        </member>
        <member name="P:RAWSimO.Core.Management.ItemManager.AvailableBundles">
            <summary>
            Exposes all currently available bundles.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Management.ItemManager.RetrieveBundle(System.Object)">
            <summary>
            Retrieves the next item-bundle from a dynamic list of available bundles for the retriever. Every retrieved item will be consumed and removed from the personalized list of the retriever.
            </summary>
            <param name="retriever">The object retrieving the next bundle.</param>
            <returns>The next bundle on the list or <code>null</code> if no bundle is left.</returns>
        </member>
        <member name="F:RAWSimO.Core.Management.ItemManager._personalizedAvailableBundles">
            <summary>
            Contains all bundles personalized per retrieving object.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Management.ItemManager.NewBundleAssignedToStation(RAWSimO.Core.Elements.InputStation,RAWSimO.Core.Items.ItemBundle)">
            <summary>
            Called by the system when a new bundle has been assigned to an input-station.
            </summary>
            <param name="iStation">The station the bundle was assigned to.</param>
            <param name="bundle">The assigned bundle.</param>
        </member>
        <member name="M:RAWSimO.Core.Management.ItemManager.CompleteBundle(RAWSimO.Core.Items.ItemBundle)">
            <summary>
            Marks the given bundle as stored.
            </summary>
            <param name="bundle">The stored bundle.</param>
        </member>
        <member name="M:RAWSimO.Core.Management.ItemManager.ResetStatistics">
            <summary>
            Resets the statistics.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Management.ItemManager._syncRoot">
            <summary>
            The object syncing is done with.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Management.ItemManager.GetInfoPendingOrderCount">
            <summary>
            Gets the number of currently available orders that are not yet allocated.
            </summary>
            <returns>The number of currently available orders that are not yet allocated.</returns>
        </member>
        <member name="M:RAWSimO.Core.Management.ItemManager.GetInfoPendingBundleCount">
            <summary>
            Gets the number of currently available bundles that are not yet allocated.
            </summary>
            <returns>The number of currently available bundles that are not yet allocated.</returns>
        </member>
        <member name="M:RAWSimO.Core.Management.ItemManager.GetInfoPendingOrders">
            <summary>
            Gets an enumeration of the currently pending orders. Hence, all orders not yet assigned to any station.
            </summary>
            <returns>The orders currently pending.</returns>
        </member>
        <member name="M:RAWSimO.Core.Management.ItemManager.GetInfoOpenOrders">
            <summary>
            Gets an enumeration of the currently open orders. This are all orders currently assigned to a station.
            </summary>
            <returns>The orders currently open.</returns>
        </member>
        <member name="M:RAWSimO.Core.Management.ItemManager.GetInfoCompletedOrders">
            <summary>
            Gets an enumeration of the already completed orders.
            </summary>
            <returns>The orders already completed.</returns>
        </member>
        <member name="M:RAWSimO.Core.Management.ItemManager.GetNextEventTime(System.Double)">
            <summary>
            The next event when this element has to be updated.
            </summary>
            <param name="currentTime">The current time of the simulation.</param>
            <returns>The next time this element has to be updated.</returns>
        </member>
        <member name="M:RAWSimO.Core.Management.ItemManager.Update(System.Double,System.Double)">
            <summary>
            Updates the element to the specified time.
            </summary>
            <param name="lastTime">The time before the update.</param>
            <param name="currentTime">The time to update to.</param>
        </member>
        <member name="M:RAWSimO.Core.Management.ItemManager.GetItemProbability(RAWSimO.Core.Items.ItemDescription)">
            <summary>
            Returns the static frequency of the given item type. This is the value currently used for generating new orders and bundles (depending on the current item type).
            </summary>
            <param name="item">The item to return the frequency for.</param>
            <returns>The frequency of the item. This value is equal to the probability for generating the item (when ignoring combined probabilities).</returns>
        </member>
        <member name="M:RAWSimO.Core.Management.ItemManager.GetItemProbabilityMax">
            <summary>
            Returns the current maximal probability over all item descriptions.
            </summary>
            <returns>The current maximal probability.</returns>
        </member>
        <member name="T:RAWSimO.Core.Management.MetaInformationManager">
            <summary>
            A manager keeping track of meta information related to an instance.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Management.MetaInformationManager.ShortestPathManager">
            <summary>
            Keeps track of shortest paths from one waypoint to another.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Management.MetaInformationManager.TimeEfficientPathManager">
            <summary>
            Keeps track of shortest paths from one waypoint to another.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Management.ShortestPathManager">
            <summary>
            Keeps track of shortest paths from one waypoint to another.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Management.ShortestPathManager._shortestPaths">
            <summary>
            Contains all shortest paths calculated so far.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Management.ShortestPathManager.WaypointSearchDatapoint">
            <summary>
            Used to store the search tree of A*.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Management.ShortestPathManager.WaypointSearchDatapoint.#ctor(System.Double,System.Double,RAWSimO.Core.Waypoints.Waypoint,RAWSimO.Core.Management.ShortestPathManager.WaypointSearchDatapoint,System.Int32)">
            <summary>
            Creates a new waypoint search data object.
            </summary>
            <param name="distanceTraveled">The distance travelled so far.</param>
            <param name="distanceToGoal">The estimated distance towards the destination.</param>
            <param name="waypoint">The waypoint this data object belongs to.</param>
            <param name="parentMove">The data of the parent.</param>
            <param name="depth">The steps we did to come here.</param>
        </member>
        <member name="F:RAWSimO.Core.Management.ShortestPathManager.WaypointSearchDatapoint.DistanceTraveled">
            <summary>
            The distance travelled so far.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Management.ShortestPathManager.WaypointSearchDatapoint.DistanceToGoal">
            <summary>
            The estimated distance towards the destination.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Management.ShortestPathManager.WaypointSearchDatapoint.Waypoint">
            <summary>
            The waypoint this data object belongs to.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Management.ShortestPathManager.WaypointSearchDatapoint.Depth">
            <summary>
            The steps we did to come here.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Management.ShortestPathManager.WaypointSearchDatapoint.ParentMove">
            <summary>
            The data of the parent.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Management.ShortestPathManager.CalculateShortestPath(RAWSimO.Core.Waypoints.Waypoint,RAWSimO.Core.Waypoints.Waypoint,System.Double,System.Boolean)">
            <summary>
            Uses A* to find the distance from the startNode to the destinationNode.
            </summary>
            <param name="startNode">The starting waypoint.</param>
            <param name="destinationNode">The destination waypoint.</param>
            <param name="wrongTierPenalty">The penalty for the waypoints not being on the same tier.</param>
            <param name="emulatePodCarrying">Indicates whether to calculate a path that is ensured to be safe for carrying a pod on it.</param>
            <returns>The distance.</returns>
        </member>
        <member name="M:RAWSimO.Core.Management.ShortestPathManager.GetShortestPath(RAWSimO.Core.Waypoints.Waypoint,RAWSimO.Core.Waypoints.Waypoint,RAWSimO.Core.Instance,System.Boolean)">
            <summary>
            Calculates the shortest path from first to the second waypoint in instance units.
            </summary>
            <param name="from">The starting waypoint.</param>
            <param name="to">The destination waypoint.</param>
            <param name="instance">The instance.</param>
            <param name="emulatePodCarrying">Indicates whether to calculate a path that is ensured to be safe for carrying a pod on it.</param>
            <returns>The distance of the shortest path. If both waypoints are not located on the same tier, penalty costs will be added. If there is no connection, an infinite length is returned.</returns>
        </member>
        <member name="T:RAWSimO.Core.Management.TimeEfficientPathManager.TimeGraph">
            <summary>
            A time-waypoint graph that helps estimating travel times.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Management.TimeEfficientPathManager.TimeGraph.PI2">
            <summary>
            Two times PI as a constant.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Management.TimeEfficientPathManager.TimeGraph.TURN_SPEED_SLOW_FACTOR">
            <summary>
            This factor can be used to further penalize turning, i.e. further slowing down the turn speed.
            This is useful, because acceleration and deceleration are not respected by this manager.
            However, turning does cause acceleration and deceration, which takes even more time than turning itself.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Management.TimeEfficientPathManager.TimeGraph.Instance">
            <summary>
            The instance this graph reflects.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Management.TimeEfficientPathManager.TimeGraph.Speed">
            <summary>
            The speed that robots travel.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Management.TimeEfficientPathManager.TimeGraph.TurnSpeed">
            <summary>
            The turn-speed of the robots.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Management.TimeEfficientPathManager.TimeGraph.TimeWaypoints">
            <summary>
            All generated time-waypoints.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Management.TimeEfficientPathManager.TimeGraph.TimeWaypointsOfOriginalWaypoints">
            <summary>
            The time-waypoints of all original waypoints.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Management.TimeEfficientPathManager.TimeGraph.TimeWaypointsOfConnections">
            <summary>
            The time-waypoints reflecting specific connections.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Management.TimeEfficientPathManager.TimeGraph.#ctor(RAWSimO.Core.Instance)">
            <summary>
            Creates a new time-waypoint graph.
            </summary>
            <param name="instance">The instance that the graph shall reflect.</param>
        </member>
        <member name="M:RAWSimO.Core.Management.TimeEfficientPathManager.TimeGraph.GetTimeNeededToTravel(RAWSimO.Core.Management.TimeEfficientPathManager.TimeWaypoint,RAWSimO.Core.Management.TimeEfficientPathManager.TimeWaypoint)">
            <summary>
            Calculates the time to move from one time-waypoint to another.
            </summary>
            <param name="from">The start node.</param>
            <param name="to">The destination node.</param>
            <returns>The time for traveling from one node to the other.</returns>
        </member>
        <member name="T:RAWSimO.Core.Management.TimeEfficientPathManager.TimeWaypoint">
            <summary>
            Joins a waypoint of an instance with an orientation which the robot is facing.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Management.TimeEfficientPathManager.TimeWaypoint.OriginalWaypoint">
            <summary>
            The original waypoint reflected by this orientation extended node.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Management.TimeEfficientPathManager.TimeWaypoint.InboundWaypoint">
            <summary>
            The inbound waypoint that caused the generation of the time-waypoint for the original waypoint.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Management.TimeEfficientPathManager.TimeWaypoint.Orientation">
            <summary>
            The orientation the robot is facing after approaching this node.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Management.TimeEfficientPathManager.TimeWaypoint.Edges">
            <summary>
            All connections of this node to other nodes or other orientations.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Management.TimeEfficientPathManager.TimeWaypoint.ToString">
            <summary>
            Creates a string representation of this object.
            </summary>
            <returns>The string representing this object.</returns>
        </member>
        <member name="T:RAWSimO.Core.Management.TimeEfficientPathManager.TimeWaypointSearchDatapoint">
            <summary>
            Used to store the search tree of A*.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Management.TimeEfficientPathManager.TimeWaypointSearchDatapoint.#ctor(System.Double,System.Double,RAWSimO.Core.Management.TimeEfficientPathManager.TimeWaypoint,RAWSimO.Core.Management.TimeEfficientPathManager.TimeWaypointSearchDatapoint,System.Int32)">
            <summary>
            Creates a new waypoint search data object.
            </summary>
            <param name="timeTraveled">The time traveled so far.</param>
            <param name="timeToGoal">The estimated time towards the destination.</param>
            <param name="waypoint">The waypoint this data object belongs to.</param>
            <param name="parentMove">The data of the parent.</param>
            <param name="depth">The steps we did to come here.</param>
        </member>
        <member name="F:RAWSimO.Core.Management.TimeEfficientPathManager.TimeWaypointSearchDatapoint.TimeTraveled">
            <summary>
            The distance travelled so far.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Management.TimeEfficientPathManager.TimeWaypointSearchDatapoint.TimeToGoal">
            <summary>
            The estimated distance towards the destination.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Management.TimeEfficientPathManager.TimeWaypointSearchDatapoint.Waypoint">
            <summary>
            The waypoint this data object belongs to.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Management.TimeEfficientPathManager.TimeWaypointSearchDatapoint.Depth">
            <summary>
            The steps we did to come here.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Management.TimeEfficientPathManager.TimeWaypointSearchDatapoint.ParentMove">
            <summary>
            The data of the parent.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Management.TimeEfficientPathManager.#ctor(RAWSimO.Core.Instance)">
            <summary>
            Creates a new manager.
            </summary>
            <param name="instance">The instance.</param>
        </member>
        <member name="F:RAWSimO.Core.Management.TimeEfficientPathManager._instance">
            <summary>
            The instance.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Management.TimeEfficientPathManager._timeGraph">
            <summary>
            The time graph.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Management.TimeEfficientPathManager._shortestPaths">
            <summary>
            Contains all shortest paths calculated so far.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Management.TimeEfficientPathManager.EstimateTravelTime(RAWSimO.Core.Management.TimeEfficientPathManager.TimeWaypoint,RAWSimO.Core.Waypoints.Waypoint)">
            <summary>
            Estimates the time it takes to travel from one waypoint to another.
            </summary>
            <param name="from">The start node.</param>
            <param name="to">The destination node.</param>
            <returns>The estimated time it takes to travel between the nodes.</returns>
        </member>
        <member name="M:RAWSimO.Core.Management.TimeEfficientPathManager.CalculateShortestPath(RAWSimO.Core.Waypoints.Waypoint,RAWSimO.Core.Waypoints.Waypoint,System.Double,System.Boolean)">
            <summary>
            Uses A* to find the distance from the startNode to the destinationNode.
            </summary>
            <param name="start">The starting waypoint.</param>
            <param name="destination">The destination waypoint.</param>
            <param name="wrongTierPenalty">The penalty for the waypoints not being on the same tier.</param>
            <param name="emulatePodCarrying">Indicates whether to calculate a path that is ensured to be safe for carrying a pod on it.</param>
            <returns>The distance.</returns>
        </member>
        <member name="M:RAWSimO.Core.Management.TimeEfficientPathManager.EstimateShortestPathManhattan(RAWSimO.Core.Geometrics.Circle,RAWSimO.Core.Geometrics.Circle,RAWSimO.Core.Instance)">
            <summary>
            Estimates the time for traveling using the manhattan metric.
            </summary>
            <param name="from">The from part of the trip.</param>
            <param name="to">The to part of the trip.</param>
            <param name="instance">The instance.</param>
            <returns>The time needed to for conducting the trip according to the manhattan metric.</returns>
        </member>
        <member name="M:RAWSimO.Core.Management.TimeEfficientPathManager.EstimateShortestPathEuclid(RAWSimO.Core.Geometrics.Circle,RAWSimO.Core.Geometrics.Circle,RAWSimO.Core.Instance)">
            <summary>
            Estimates the time for traveling using the manhattan metric.
            </summary>
            <param name="from">The from part of the trip.</param>
            <param name="to">The to part of the trip.</param>
            <param name="instance">The instance.</param>
            <returns>The time needed to for conducting the trip according to the manhattan metric.</returns>
        </member>
        <member name="M:RAWSimO.Core.Management.TimeEfficientPathManager.GetShortestPath(RAWSimO.Core.Waypoints.Waypoint,RAWSimO.Core.Waypoints.Waypoint,RAWSimO.Core.Instance,System.Boolean)">
            <summary>
            Calculates the shortest time path from first to the second waypoint.
            </summary>
            <param name="from">The starting waypoint.</param>
            <param name="to">The destination waypoint.</param>
            <param name="instance">The instance.</param>
            <param name="emulatePodCarrying">Indicates whether to calculate a path that is ensured to be safe for carrying a pod on it.</param>
            <returns>The time of the best path. If both waypoints are not located on the same tier, penalty costs will be added. If there is no connection, an infinite length is returned.</returns>
        </member>
        <member name="T:RAWSimO.Core.Management.OrderMode">
            <summary>
            Defines different modes for order and bundle generation.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Management.OrderMode.Fill">
            <summary>
            All orders and bundles are generated randomly as required.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Management.OrderMode.Poisson">
            <summary>
            All orders are generated in a poisson process.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Management.OrderMode.Fixed">
            <summary>
            All orders and bundles are submitted like specified by a given file.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Management.ResourceManager">
            <summary>
            Implements a resource manager that keeps track of all the resources in the system like available storage locations and requests.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Management.ResourceManager.#ctor(RAWSimO.Core.Instance)">
            <summary>
            Creates a new instance of the resource manager.
            </summary>
            <param name="instance">The instance the resource manager belongs to.</param>
        </member>
        <member name="F:RAWSimO.Core.Management.ResourceManager._instance">
            <summary>
            The instance this manager belongs to.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Management.ResourceManager._usedPods">
            <summary>
            All pods currently reserved by bots.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Management.ResourceManager._unusedPods">
            <summary>
            All pods currently not used.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Management.ResourceManager.UsedPods">
            <summary>
            All pods currently reserved by bots.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Management.ResourceManager.UnusedPods">
            <summary>
            All pods currently not used.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Management.ResourceManager.IsPodClaimed(RAWSimO.Core.Elements.Pod)">
            <summary>
            Indicates whether the given pod is currently claimed by a bot.
            </summary>
            <param name="pod">The pod to check.</param>
            <returns><code>true</code> if the pod is currently unavailable for any use, <code>false</code> otherwise.</returns>
        </member>
        <member name="M:RAWSimO.Core.Management.ResourceManager.ClaimPod(RAWSimO.Core.Elements.Pod,RAWSimO.Core.Elements.Bot,RAWSimO.Core.Control.BotTaskType)">
            <summary>
            Reserves the pod for the given bot.
            </summary>
            <param name="pod">The pod to reserve.</param>
            <param name="bot">The bot that reserves the pod.</param>
            <param name="purpose">The purpose for claiming the pod.</param>
        </member>
        <member name="M:RAWSimO.Core.Management.ResourceManager.ReleasePod(RAWSimO.Core.Elements.Pod)">
            <summary>
            Releases the reservation of the pod.
            </summary>
            <param name="pod">The pod to release.</param>
        </member>
        <member name="F:RAWSimO.Core.Management.ResourceManager._unusedPodStorageLocations">
            <summary>
            All pod storage locations currently not in use.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Management.ResourceManager._usedPodStorageLocations">
            <summary>
            All pod storage locations currently in use.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Management.ResourceManager.UnusedPodStorageLocations">
            <summary>
            All pod storage locations currently not in use.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Management.ResourceManager.UsedPodStorageLocations">
            <summary>
            All pod storage locations currently in use.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Management.ResourceManager.IsStorageLocationClaimed(RAWSimO.Core.Waypoints.Waypoint)">
            <summary>
            Checks whether the given storage location is already occupied by another pod or reserved.
            </summary>
            <param name="wp">The storage location to check.</param>
            <returns><code>true</code> if the storage location is free, <code>false</code> otherwise.</returns>
        </member>
        <member name="M:RAWSimO.Core.Management.ResourceManager.ClaimStorageLocation(RAWSimO.Core.Waypoints.Waypoint)">
            <summary>
            Reserves the pod storage location.
            </summary>
            <param name="storageLocation">The pod storage location to reserve.</param>
        </member>
        <member name="M:RAWSimO.Core.Management.ResourceManager.ReleaseStorageLocation(RAWSimO.Core.Waypoints.Waypoint)">
            <summary>
            Releases the reservation of the pod storage location.
            </summary>
            <param name="storageLocation">The storage location to release.</param>
        </member>
        <member name="M:RAWSimO.Core.Management.ResourceManager.AddNewUsedPodStorageLocation(RAWSimO.Core.Elements.Pod,RAWSimO.Core.Waypoints.Waypoint)">
            <summary>
            Adds a new valid currently used location to store pods on the map.
            </summary>
            <param name="pod">The pod currently stored at the position.</param>
            <param name="waypoint">The waypoint which serves as a pod storage location.</param>
        </member>
        <member name="M:RAWSimO.Core.Management.ResourceManager.AddNewValidPodStorageLocation(RAWSimO.Core.Waypoints.Waypoint)">
            <summary>
            Adds a new valid unused location to store pods on the map.
            </summary>
            <param name="waypoint">The waypoint which serves as a pod storage location.</param>
        </member>
        <member name="M:RAWSimO.Core.Management.ResourceManager.RemovePodStorageLocation(RAWSimO.Core.Waypoints.Waypoint)">
            <summary>
            Removes a pod storage location again.
            </summary>
            <param name="waypoint">The storage location to remove.</param>
        </member>
        <member name="P:RAWSimO.Core.Management.ResourceManager.UnusedRestingLocations">
            <summary>
            All resting locations currently not in use.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Management.ResourceManager._forbiddenRestingLocations">
            <summary>
            Locations that cannot be used for resting.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Management.ResourceManager.ForbidRestLocation(RAWSimO.Core.Waypoints.Waypoint)">
            <summary>
            Mark a location as not available for resting.
            </summary>
            <param name="waypoint">The waypoint to mark as not usable for resting.</param>
        </member>
        <member name="M:RAWSimO.Core.Management.ResourceManager.IsRestingLocationAvailable(RAWSimO.Core.Waypoints.Waypoint)">
            <summary>
            Indicates whether the given resting location is available.
            </summary>
            <param name="waypoint">The resting location to check for availability.</param>
            <returns><code>true</code> if the location is unoccupied, <code>false</code> otherwise.</returns>
        </member>
        <member name="M:RAWSimO.Core.Management.ResourceManager.ClaimRestingLocation(RAWSimO.Core.Waypoints.Waypoint)">
            <summary>
            Reserves the resting location.
            </summary>
            <param name="waypoint">The resting location to reserve.</param>
        </member>
        <member name="M:RAWSimO.Core.Management.ResourceManager.ReleaseRestingLocation(RAWSimO.Core.Waypoints.Waypoint)">
            <summary>
            Releases the reservation of the resting location.
            </summary>
            <param name="waypoint">The resting location to release.</param>
        </member>
        <member name="F:RAWSimO.Core.Management.ResourceManager._availableStoreRequests">
            <summary>
            All available requests for storing an item bundle.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Management.ResourceManager._availableStoreRequestsPerStation">
            <summary>
            All requests to store a bundle per input station they are allocated to.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Management.ResourceManager._availableStoreRequestsPerPod">
            <summary>
            All requests to store a bundle per pod they are allocated to.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Management.ResourceManager.AvailableStoreRequests">
            <summary>
            All available requests for storing an item bundle.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Management.ResourceManager.RemoveStoreRequest(RAWSimO.Core.Management.InsertRequest)">
            <summary>
            Removes the corresponding request to store a bundle.
            </summary>
            <param name="request">The request to remove.</param>
        </member>
        <member name="M:RAWSimO.Core.Management.ResourceManager.ReInsertStoreRequest(RAWSimO.Core.Management.InsertRequest)">
            <summary>
            Adds the previously removed request to store a bundle again.
            </summary>
            <param name="request">The request to add again.</param>
        </member>
        <member name="M:RAWSimO.Core.Management.ResourceManager.NewItemBundleAssignedToStation(RAWSimO.Core.Items.ItemBundle,RAWSimO.Core.Elements.InputStation,RAWSimO.Core.Elements.Pod)">
            <summary>
            Called whenever a new item has been assigned to an InputStation
            </summary>
            <param name="item">The assigned item.</param>
            <param name="inputStation">The InputStation the item is assigned to.</param>
            <param name="pod">The pod to store this item in.</param>
        </member>
        <member name="M:RAWSimO.Core.Management.ResourceManager.GetStoreRequestsOfStation(RAWSimO.Core.Elements.InputStation)">
            <summary>
            Returns all requests belonging to the specified station.
            </summary>
            <param name="station">The station which requests are desired.</param>
            <returns>The requests of the given station.</returns>
        </member>
        <member name="M:RAWSimO.Core.Management.ResourceManager.GetStoreRequestsOfPod(RAWSimO.Core.Elements.Pod)">
            <summary>
            Returns all requests belonging to the specified pod.
            </summary>
            <param name="pod">The pod which requests are desired.</param>
            <returns>The requests of the given pod.</returns>
        </member>
        <member name="F:RAWSimO.Core.Management.ResourceManager._availableExtractRequests">
            <summary>
            All requests to extract an item.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Management.ResourceManager._availableExtractRequestsPerOrder">
            <summary>
            All available requests to extract an item per order they belong to.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Management.ResourceManager._availableExtractRequestsPerStation">
            <summary>
            All requests to extract an item per output station they are allocated to.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Management.ResourceManager._availableExtractRequestsPerStationQueue">
            <summary>
            All requests to extract an item that have been queued for the respective stations.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Management.ResourceManager._stationQueuedPerExtractRequest">
            <summary>
            The respective stations an extract request was queued for, if it was queued.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Management.ResourceManager.CreateExtractRequests(RAWSimO.Core.Items.Order)">
            <summary>
            Creates requests for all placed orders.
            </summary>
            <param name="order">The order that was just placed.</param>
        </member>
        <member name="M:RAWSimO.Core.Management.ResourceManager.NewOrderQueuedToStation(RAWSimO.Core.Items.Order,RAWSimO.Core.Elements.OutputStation)">
            <summary>
            Called whenever a new order shall be assigned to the order pool of a station.
            </summary>
            <param name="order">The order to assign to the order pool of the station.</param>
            <param name="station">The station to assign the order to.</param>
        </member>
        <member name="M:RAWSimO.Core.Management.ResourceManager.NewOrderAssignedToStation(RAWSimO.Core.Items.Order,RAWSimO.Core.Elements.OutputStation)">
            <summary>
            Called whenever a new Order has been assigned to an OutputStation.
            </summary>
            <param name="order">The Order which is assigned to the station.</param>
            <param name="station">The station the order is assigned to.</param>
        </member>
        <member name="M:RAWSimO.Core.Management.ResourceManager.RemoveExtractRequest(RAWSimO.Core.Management.ExtractRequest)">
            <summary>
            Removes the request to extract the item.
            </summary>
            <param name="request">The request to remove.</param>
        </member>
        <member name="M:RAWSimO.Core.Management.ResourceManager.ReInsertExtractRequest(RAWSimO.Core.Management.ExtractRequest)">
            <summary>
            Adds the request to extract the corresponding item again.
            </summary>
            <param name="request">The request to insert again.</param>
        </member>
        <member name="M:RAWSimO.Core.Management.ResourceManager.OrderCompleted(RAWSimO.Core.Items.Order,RAWSimO.Core.Elements.OutputStation)">
            <summary>
            Removes the request information belonging to the order.
            </summary>
            <param name="order">The order that was just completed.</param>
            <param name="station">The station at which the order was completed.</param>
        </member>
        <member name="M:RAWSimO.Core.Management.ResourceManager.GetExtractRequestsOfStation(RAWSimO.Core.Elements.OutputStation)">
            <summary>
            Returns all requests belonging to the specified station.
            </summary>
            <param name="station">The station which requests are desired.</param>
            <returns>The requests of the given station.</returns>
        </member>
        <member name="M:RAWSimO.Core.Management.ResourceManager.GetQueuedExtractRequestsOfStation(RAWSimO.Core.Elements.OutputStation)">
            <summary>
            Returns all requests currently queued for the given station.
            </summary>
            <param name="station">The station the requests are queued for.</param>
            <returns>All requests currently queued for the given station.</returns>
        </member>
        <member name="M:RAWSimO.Core.Management.ResourceManager.GetExtractRequestsOfOrder(RAWSimO.Core.Items.Order)">
            <summary>
            Returns all requests belonging to the specified order that haven't been reserved yet.
            </summary>
            <param name="order">The order to get the extract requests of.</param>
            <returns>All extract requests available for reservation of the given order.</returns>
        </member>
        <member name="P:RAWSimO.Core.Management.ResourceManager.AvailableAndAssignedExtractRequests">
            <summary>
            All requests to extract an item.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Management.ResourceManager._backlogDemandStore">
            <summary>
            The demand for specific SKUs given by the current backlog orders.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Management.ResourceManager._backlogDemand">
            <summary>
            The demand for specific SKUs given by the current backlog orders.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Management.ResourceManager._queuedDemandStore">
            <summary>
            The demand for specific SKUs given by the currently queued orders.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Management.ResourceManager._queuedDemand">
            <summary>
            The demand for specific SKUs given by the currently queued orders.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Management.ResourceManager._assignedDemandStore">
            <summary>
            The demand for specific SKUs given by the currently assigned orders.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Management.ResourceManager._assignedDemand">
            <summary>
            The demand for specific SKUs given by the currently assigned orders.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Management.ResourceManager.InitDemandTracking">
            <summary>
            Inits demand tracking, if not already done.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Management.ResourceManager.GetDemandBacklog(RAWSimO.Core.Items.ItemDescription)">
            <summary>
            Gets the demand for the given item given by the backlog orders.
            </summary>
            <param name="item">The item to look-up the demand for.</param>
            <returns>The demand for the given item.</returns>
        </member>
        <member name="M:RAWSimO.Core.Management.ResourceManager.GetDemandQueued(RAWSimO.Core.Items.ItemDescription)">
            <summary>
            Gets the demand for the given item given by the queued orders.
            </summary>
            <param name="item">The item to look-up the demand for.</param>
            <returns>The demand for the given item.</returns>
        </member>
        <member name="M:RAWSimO.Core.Management.ResourceManager.GetDemandAssigned(RAWSimO.Core.Items.ItemDescription)">
            <summary>
            Gets the demand for the given item given by the assigned orders.
            </summary>
            <param name="item">The item to look-up the demand for.</param>
            <returns>The demand for the given item.</returns>
        </member>
        <member name="M:RAWSimO.Core.Management.ResourceManager.GetNextEventTime(System.Double)">
            <summary>
            The next event when this element has to be updated.
            </summary>
            <param name="currentTime">The current time of the simulation.</param>
            <returns>The next time this element has to be updated.</returns>
        </member>
        <member name="M:RAWSimO.Core.Management.ResourceManager.Update(System.Double,System.Double)">
            <summary>
            Updates the element to the specified time.
            </summary>
            <param name="lastTime">The time before the update.</param>
            <param name="currentTime">The time to update to.</param>
        </member>
        <member name="T:RAWSimO.Core.Management.RequestState">
            <summary>
            Distinguishes between different states a request can be in.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Management.RequestState.Unfinished">
            <summary>
            Indicates that the request was not fulfilled yet.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Management.RequestState.Aborted">
            <summary>
            Indicates that the request was aborted due to some reason.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Management.RequestState.Finished">
            <summary>
            Indicates that the request was finished due to some reason.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Management.ExtractRequest">
            <summary>
            Depicts one specific request to extract an item of the specified type at the specified station in order to serve the specified order.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Management.ExtractRequest.#ctor(RAWSimO.Core.Items.ItemDescription,RAWSimO.Core.Items.Order,RAWSimO.Core.Elements.OutputStation)">
            <summary>
            Creates a new extraction request.
            </summary>
            <param name="item">The item.</param>
            <param name="order">The order.</param>
            <param name="station">The station.</param>
        </member>
        <member name="P:RAWSimO.Core.Management.ExtractRequest.State">
            <summary>
            The state of the request.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Management.ExtractRequest.ReInsert">
            <summary>
            Marks a previously aborted request as open again.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Management.ExtractRequest.Abort">
            <summary>
            Aborts the request due to some reason. The request should be re-enqueued.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Management.ExtractRequest.Finish">
            <summary>
            Marks the request as completed.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Management.ExtractRequest.Assign(RAWSimO.Core.Elements.OutputStation)">
            <summary>
            Assigns the request to the given station.
            </summary>
            <param name="station">The station to assign the request to.</param>
        </member>
        <member name="M:RAWSimO.Core.Management.ExtractRequest.Assign(RAWSimO.Core.Elements.Pod)">
            <summary>
            Assigns the request to the given pod.
            </summary>
            <param name="pod">The pod to assign the request to.</param>
        </member>
        <member name="M:RAWSimO.Core.Management.ExtractRequest.Unassign(RAWSimO.Core.Elements.Pod)">
            <summary>
            Unassigns the request from the given pod.
            </summary>
            <param name="pod">The pod that previously was assigned to this request.</param>
        </member>
        <member name="P:RAWSimO.Core.Management.ExtractRequest.Item">
            <summary>
            The type of the item needed to serve a position of the order.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Management.ExtractRequest.Order">
            <summary>
            The order for which the item is needed.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Management.ExtractRequest.Station">
            <summary>
            The station to which the corresponding order is assigned to.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Management.ExtractRequest.Pod">
            <summary>
            The pod with which this request shall be handled.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Management.ExtractRequest.StatInjected">
            <summary>
            Used to indicate whether the request was used to build a new task or injected to an existing task.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Management.ExtractRequest.ToString">
            <summary>
            Returns a simple string giving information about the object.
            </summary>
            <returns>A simple string.</returns>
        </member>
        <member name="T:RAWSimO.Core.Management.InsertRequest">
            <summary>
            Depicts one specific request to fetch the specified bundle from the specified station and store in the inventory.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Management.InsertRequest.#ctor(RAWSimO.Core.Items.ItemBundle,RAWSimO.Core.Elements.InputStation,RAWSimO.Core.Elements.Pod)">
            <summary>
            Creates a new insertion request.
            </summary>
            <param name="bundle">The bundle.</param>
            <param name="station">The station.</param>
            <param name="pod">The pod.</param>
        </member>
        <member name="P:RAWSimO.Core.Management.InsertRequest.State">
            <summary>
            The state of the request.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Management.InsertRequest.ReInsert">
            <summary>
            Marks a previously aborted request as open again.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Management.InsertRequest.Abort">
            <summary>
            Aborts the request due to some reason. The request should be re-enqueued.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Management.InsertRequest.Finish">
            <summary>
            Marks the request as completed.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Management.InsertRequest.Bundle">
            <summary>
            The bundle to store in the inventory.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Management.InsertRequest.Station">
            <summary>
            The station the bundle is located.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Management.InsertRequest.Pod">
            <summary>
            The pod to store the bundle in.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Management.InsertRequest.StatInjected">
            <summary>
            Used to indicate whether the request was used to build a new task or injected to an existing task.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Management.InsertRequest.ToString">
            <summary>
            Returns a simple string giving information about the object.
            </summary>
            <returns>A simple string.</returns>
        </member>
        <member name="T:RAWSimO.Core.Management.StockInformation">
            <summary>
            Contains information about the current stock situation.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Management.StockInformation.#ctor(RAWSimO.Core.Instance)">
            <summary>
            Creates a new instance of the stock information tracker.
            </summary>
            <param name="instance">The instance this tracker belongs to.</param>
        </member>
        <member name="P:RAWSimO.Core.Management.StockInformation.Instance">
            <summary>
            The instance this manager is associated with.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Management.StockInformation.CurrentActualOverallLoad">
            <summary>
            The current overall capacity utilization.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Management.StockInformation.CurrentReservedOverallLoad">
            <summary>
            The current overall capacity utilization including the already reserved capacity.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Management.StockInformation.OverallLoadCapacity">
            <summary>
            The overall capacity of the system.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Management.StockInformation._currentActualStock">
            <summary>
            Contains information about the actual inventory.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Management.StockInformation._currentAvailableStock">
            <summary>
            Contains information about the inventory that is still available and not yet reserved by an incoming order.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Management.StockInformation._currentOverallDemand">
            <summary>
            Contains information about the current demand for specific SKUs.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Management.StockInformation.InitStockInfo">
            <summary>
            Initializes the stock information.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Management.StockInformation.GetActualStock(RAWSimO.Core.Items.ItemDescription)">
            <summary>
            Gets information about the actual inventory. Only reservations for already allocated orders are respected by this method.
            </summary>
            <param name="item">The item description to check.</param>
            <returns>The amount of inventory left for that particular item.</returns>
        </member>
        <member name="M:RAWSimO.Core.Management.StockInformation.GetAvailableStock(RAWSimO.Core.Items.ItemDescription)">
            <summary>
            Gets information about the available inventory. Items reserved by all available orders are already excluded.
            </summary>
            <param name="item">The item description to check.</param>
            <returns>The amount of inventory left for that particular item.</returns>
        </member>
        <member name="M:RAWSimO.Core.Management.StockInformation.GetCurrentDemand(RAWSimO.Core.Items.ItemDescription)">
            <summary>
            Gets information about the current demand for the given SKU.
            </summary>
            <param name="item">The SKU to lookup the demand for.</param>
            <returns>The current demand for the given SKU as indicated by all unpicked / open order lines and quantities.</returns>
        </member>
        <member name="T:RAWSimO.Core.Metrics.Distances">
            <summary>
            This class implements some basic distance measures.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Metrics.Distances.CalculateShortestPath(RAWSimO.Core.Waypoints.Waypoint,RAWSimO.Core.Waypoints.Waypoint,RAWSimO.Core.Instance)">
            <summary>
            Calculates the shortest path from the first to the second waypoint.
            </summary>
            <param name="from">The waypoint at which the path starts.</param>
            <param name="to">The waypoint at which the path ends.</param>
            <param name="instance">The instance containing the graph both waypoints belong to.</param>
            <returns>The distance of the shortest path. If both waypoints are not located on the same tier, penalty costs will be added. If there is no connection, an infinite length is returned.</returns>
        </member>
        <member name="M:RAWSimO.Core.Metrics.Distances.CalculateShortestPathPodSafe(RAWSimO.Core.Waypoints.Waypoint,RAWSimO.Core.Waypoints.Waypoint,RAWSimO.Core.Instance)">
            <summary>
            Calculates the shortest path from the first to the second waypoint avoiding pod storage locations.
            </summary>
            <param name="from">The waypoint at which the path starts.</param>
            <param name="to">The waypoint at which the path ends.</param>
            <param name="instance">The instance containing the graph both waypoints belong to.</param>
            <returns>The distance of the shortest path. If both waypoints are not located on the same tier, penalty costs will be added. If there is no connection, an infinite length is returned.</returns>
        </member>
        <member name="M:RAWSimO.Core.Metrics.Distances.CalculateShortestTimePath(RAWSimO.Core.Waypoints.Waypoint,RAWSimO.Core.Waypoints.Waypoint,RAWSimO.Core.Instance)">
            <summary>
            Calculates the shortest path from the first to the second waypoint.
            </summary>
            <param name="from">The waypoint at which the path starts.</param>
            <param name="to">The waypoint at which the path ends.</param>
            <param name="instance">The instance containing the graph both waypoints belong to.</param>
            <returns>The distance of the shortest path. If both waypoints are not located on the same tier, penalty costs will be added. If there is no connection, an infinite length is returned.</returns>
        </member>
        <member name="M:RAWSimO.Core.Metrics.Distances.CalculateShortestTimePathPodSafe(RAWSimO.Core.Waypoints.Waypoint,RAWSimO.Core.Waypoints.Waypoint,RAWSimO.Core.Instance)">
            <summary>
            Calculates the shortest path from the first to the second waypoint avoiding pod storage locations.
            </summary>
            <param name="from">The waypoint at which the path starts.</param>
            <param name="to">The waypoint at which the path ends.</param>
            <param name="instance">The instance containing the graph both waypoints belong to.</param>
            <returns>The distance of the shortest path. If both waypoints are not located on the same tier, penalty costs will be added. If there is no connection, an infinite length is returned.</returns>
        </member>
        <member name="M:RAWSimO.Core.Metrics.Distances.EstimateEuclidTime(RAWSimO.Core.Geometrics.Circle,RAWSimO.Core.Geometrics.Circle,RAWSimO.Core.Instance)">
            <summary>
            Estimates the time for traveling using the euclidean metric.
            </summary>
            <param name="from">The from part of the trip.</param>
            <param name="to">The to part of the trip.</param>
            <param name="instance">The instance.</param>
            <returns>The time needed to for conducting the trip according to the euclidean metric.</returns>
        </member>
        <member name="M:RAWSimO.Core.Metrics.Distances.EstimateManhattanTime(RAWSimO.Core.Geometrics.Circle,RAWSimO.Core.Geometrics.Circle,RAWSimO.Core.Instance)">
            <summary>
            Estimates the time for traveling using the manhattan metric.
            </summary>
            <param name="from">The from part of the trip.</param>
            <param name="to">The to part of the trip.</param>
            <param name="instance">The instance.</param>
            <returns>The time needed to for conducting the trip according to the manhattan metric.</returns>
        </member>
        <member name="M:RAWSimO.Core.Metrics.Distances.CalculateEuclid(RAWSimO.Core.Geometrics.Circle,RAWSimO.Core.Geometrics.Circle,System.Double)">
            <summary>
            Calculates the euclidean distance between the two circles.
            </summary>
            <param name="c1">First circle.</param>
            <param name="c2">Second circle.</param>
            <param name="wrongTierPenalty">The penalty for not being on the same tier.</param>
            <returns>The euclidean distance between the two.</returns>
        </member>
        <member name="M:RAWSimO.Core.Metrics.Distances.CalculateManhattan(RAWSimO.Core.Geometrics.Circle,RAWSimO.Core.Geometrics.Circle,System.Double)">
            <summary>
            Calculates the manhattan distance between the two circles.
            </summary>
            <param name="c1">First circle.</param>
            <param name="c2">Second circle.</param>
            <param name="wrongTierPenalty">The penalty for not being on the same tier.</param>
            <returns>The manhattan distance between the two.</returns>
        </member>
        <member name="M:RAWSimO.Core.Metrics.Distances.CalculateEuclid(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Simply calculates the euclidean distance for the given two points.
            </summary>
            <param name="x1">The x-value of the first point.</param>
            <param name="y1">The y-value of the first point.</param>
            <param name="x2">The x-value of the second point.</param>
            <param name="y2">The y-value of the second point.</param>
            <returns>The euclidean distance.</returns>
        </member>
        <member name="M:RAWSimO.Core.Metrics.Distances.CalculateManhattan(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Simply calculates the manhattan distance for the given two points.
            </summary>
            <param name="x1">The x-value of the first point.</param>
            <param name="y1">The y-value of the first point.</param>
            <param name="x2">The x-value of the second point.</param>
            <param name="y2">The y-value of the second point.</param>
            <returns>The manhattan distance.</returns>
        </member>
        <member name="T:RAWSimO.Core.Metrics.Estimators">
            <summary>
            Exposes methods to estimate different values instead of hard-calculating them.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Metrics.Estimators.EstimateTravelTimeEuclid(RAWSimO.Core.Elements.Bot,RAWSimO.Core.Waypoints.Waypoint)">
            <summary>
            Optimistically estimates the time it will take bot to reach the specified waypoint, but penalizes targets on different tiers.
            </summary>
            <param name="w">The destination waypoint.</param>
            <param name="bot">The bot to consider.</param>
            <returns>The estimated time to reach the destination.</returns>
        </member>
        <member name="M:RAWSimO.Core.Metrics.Estimators.EstimateTravelTimeEuclid(RAWSimO.Core.Elements.Bot,RAWSimO.Core.Waypoints.Waypoint,RAWSimO.Core.Waypoints.Waypoint)">
            <summary>
            Optimistically estimates the time it will take the bot to go from start to end, but penalizes targets on different tiers.
            </summary>
            <param name="start">The starting waypoint.</param>
            <param name="end">The destination waypoint.</param>
            <param name="bot">The bot to consider.</param>
            <returns>The estimated time.</returns>
        </member>
        <member name="M:RAWSimO.Core.Metrics.Estimators.EstimateOutputStationWaitTime(RAWSimO.Core.Elements.Bot,RAWSimO.Core.Waypoints.Waypoint)">
            <summary>
            Estimates the amount of time it will take before a new item can be delivered to the output-station.
            </summary>
            <param name="w">The waypoint of the output-station.</param>
            <param name="bot">The bot to consider.</param>
            <returns>The estimated time.</returns>
        </member>
        <member name="M:RAWSimO.Core.Metrics.Estimators.EstimateInputStationWaitTime(RAWSimO.Core.Elements.Bot,RAWSimO.Core.Waypoints.Waypoint)">
            <summary>
            Estimates the amount of time it will take before a new item can be picked up from the input-station.
            </summary>
            <param name="bot">The bot to consider.</param>
            <param name="w">The waypoint of the input-station.</param>
            <returns>The estimated time.</returns>
        </member>
        <member name="T:RAWSimO.Core.Randomization.PoissonMode">
            <summary>
            Determines the mode of the poisson process.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Randomization.PoissonMode.Simple">
            <summary>
            Generates random numbers according to a homogeneous poisson process.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Randomization.PoissonMode.TimeDependent">
            <summary>
            Generates random numbers according to an inhomogeneous (time-dependent) poisson process.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Randomization.PoissonMode.HighLow">
            <summary>
            Switches between a high and a low order / bundle rate according to another poisson process.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Randomization.PoissonDistortionType">
            <summary>
            Distinguishes different types for distorting the rate parameter based on live simulation meta information.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Randomization.PoissonDistortionType.None">
            <summary>
            The rate is not distorted at all.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Randomization.PoissonDistortionType.PickStationsActivated">
            <summary>
            The rate is distorted by the number of activated pick stations.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Randomization.PoissonDistortionType.ReplenishmentStationsActivated">
            <summary>
            The rate is distorted by the number of activated replenishment stations.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Randomization.PoissonGenerator">
            <summary>
            A simple poisson generator implementation. (extension of the idea of <see href="http://preshing.com/20111007/how-to-generate-random-timings-for-a-poisson-process/"/>)
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Randomization.PoissonGenerator.#ctor(RAWSimO.Core.Interfaces.IRandomizer,System.Double)">
            <summary>
            Creates a new instance of the poisson generator in simple mode.
            </summary>
            <param name="randomizer">The randomizer to use.</param>
            <param name="rate">The rate of the poisson generator.</param>
        </member>
        <member name="M:RAWSimO.Core.Randomization.PoissonGenerator.#ctor(RAWSimO.Core.Interfaces.IRandomizer,System.Double,System.Double,System.Double,System.Double,System.Action{System.String},System.String)">
            <summary>
            Creates a new instance of the poisson generator in high/low mode.
            </summary>
            <param name="randomizer">The randomizer to use.</param>
            <param name="rate">The rate of the poisson generator.</param>
            <param name="rateHigh">The rate to use in high periods.</param>
            <param name="rateHighLowSwitch">The rate parameter to use to obtain the next switch from low to high period.</param>
            <param name="rateLowHighSwtich">The rate parameter to use to obtain the next switch from high to low period.</param>
            <param name="affiliation">The affiliation this generator belongs to.</param>
            <param name="logAction">An action used for logging the switches between high / low.</param>
        </member>
        <member name="M:RAWSimO.Core.Randomization.PoissonGenerator.#ctor(RAWSimO.Core.Interfaces.IRandomizer,System.Double,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Double,System.Double}})">
            <summary>
            Creates a new instance of the poisson generator in time-dependent mode.
            </summary>
            <param name="randomizer">The randomizer to use.</param>
            <param name="maxTime">The time after which the time-dependent values loop.</param>
            <param name="timeDependentRateSteps">The time dependent rates.</param>
        </member>
        <member name="F:RAWSimO.Core.Randomization.PoissonGenerator._logMessage">
            <summary>
            Used to log messages.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Randomization.PoissonGenerator.Affiliation">
            <summary>
            The affiliation of this generator (used to log messages).
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Randomization.PoissonGenerator.Randomizer">
            <summary>
            The random number generator that is used.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Randomization.PoissonGenerator.Mode">
            <summary>
            The mode this generator is using.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Randomization.PoissonGenerator.Rate">
            <summary>
            The rate parameter of this poisson generator.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Randomization.PoissonGenerator.RateHigh">
            <summary>
            The rate parameter when in high mode.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Randomization.PoissonGenerator.RateHighLowSwitch">
            <summary>
            The rate parameter to use to obtain the next switch from low to high period.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Randomization.PoissonGenerator.RateLowHighSwitch">
            <summary>
            The rate parameter to use to obtain the next switch from high to low period.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Randomization.PoissonGenerator.NextHighLowSwitch">
            <summary>
            Indicates the next time a switch between high and low period is performed.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Randomization.PoissonGenerator._nextHighLowSwitch">
            <summary>
            Indicates the next time a switch between high and low period is performed.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Randomization.PoissonGenerator._isLowPeriod">
            <summary>
            Indicates whether we are currently in a low period.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Randomization.PoissonGenerator.MaxTime">
            <summary>
            The time after which the time-dependent rate loops.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Randomization.PoissonGenerator.TimeDependentRateSteps">
            <summary>
            The time-steps at which the rate changes.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Randomization.PoissonGenerator.TimeDependentRates">
            <summary>
            The rates depending on the current time.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Randomization.PoissonGenerator.TranslateIntoRateParameter(System.TimeSpan,System.Double)">
            <summary>
            Translates a desired number of events that shall occur during a given timespan into the corresponding rate parameter to use for the poisson generator.
            </summary>
            <param name="timeFrame">The timespan during which the number of events shall occur.</param>
            <param name="eventsPerTimeFrame">The number of events per timespan.</param>
            <returns>The translated rate parameter.</returns>
        </member>
        <member name="M:RAWSimO.Core.Randomization.PoissonGenerator.Next(System.Double,System.Double)">
            <summary>
            Generates the next poisson process value depending on the current time (if desired).
            </summary>
            <param name="currentTime">The current time in seconds (this is ignored if simple mode is used).</param>
            <param name="distortionFactor">A factor that is applied to the rate parameter, hence, it can be used to temporarily modify the rate by some factor.</param>
            <returns>The next time according to the poisson process (in seconds).</returns>
        </member>
        <member name="T:RAWSimO.Core.Randomization.RandomizerHelper">
            <summary>
            Exposes some helping randomization functionality.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Randomization.RandomizerHelper.DrawRandomly``1(System.Collections.Generic.IDictionary{``0,System.Double},RAWSimO.Core.Interfaces.IRandomizer)">
            <summary>
            Randomly selects an item from a dictionary based on a certain probability per item.
            </summary>
            <typeparam name="T">The type of the item to select.</typeparam>
            <param name="probabilities">The items with the given probabilities.</param>
            <param name="randomizer">The randomizer instance to use.</param>
            <returns>A randomly selected item.</returns>
        </member>
        <member name="T:RAWSimO.Core.Randomization.RandomizerSimple">
            <summary>
            A simple randomizer implementation.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Randomization.RandomizerSimple._randomizer">
            <summary>
            The random number generator used by this randomizer instance.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Randomization.RandomizerSimple.#ctor(System.Int32)">
            <summary>
            Creates a new instance of this randomizer.
            </summary>
            <param name="seed">The seed to use.</param>
        </member>
        <member name="M:RAWSimO.Core.Randomization.RandomizerSimple.NextInt(System.Int32)">
            <summary>
            Returns a random <code>int</code> number within the interval [0,<code>maxValue</code>).
            </summary>
            <param name="maxValue">The exclusive upper bound of the interval.</param>
            <returns>A random number within the specified interval.</returns>
        </member>
        <member name="M:RAWSimO.Core.Randomization.RandomizerSimple.NextInt(System.Int32,System.Int32)">
            <summary>
            Returns a random <code>int</code> number within the interval [<code>minValue</code>,<code>maxValue</code>).
            </summary>
            <param name="minValue">The inclusive lower bound of the interval.</param>
            <param name="maxValue">The exclusive upper bound of the interval.</param>
            <returns>A random number within the specified interval.</returns>
        </member>
        <member name="M:RAWSimO.Core.Randomization.RandomizerSimple.NextNormalInt(System.Double,System.Double)">
            <summary>
            Returns the next normally distributed random number according to the given mean value and standard deviation.
            </summary>
            <param name="mean">The mean of the normal distribution.</param>
            <param name="std">The standard deviation of the normal distribution.</param>
            <returns>The next normally ditributed random value.</returns>
        </member>
        <member name="M:RAWSimO.Core.Randomization.RandomizerSimple.NextNormalInt(System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            Returns the next normally distributed random number according to the given mean value and standard deviation.
            </summary>
            <param name="mean">The mean of the normal distribution.</param>
            <param name="std">The standard deviation of the normal distribution.</param>
            <param name="minValue">The minimal value.</param>
            <param name="maxValue">The maximal value.</param>
            <returns>The next normally ditributed random value.</returns>
        </member>
        <member name="M:RAWSimO.Core.Randomization.RandomizerSimple.NextDouble">
            <summary>
            Returns a random <code>double</code> number within the interval [0,1).
            </summary>
            <returns>A random number from the interval [0,1).</returns>
        </member>
        <member name="M:RAWSimO.Core.Randomization.RandomizerSimple.NextDouble(System.Double)">
            <summary>
            Returns a random <code>double</code> number within the interval [0,<code>maxValue</code>).
            </summary>
            <param name="maxValue">The inclusive upper bound of the interval.</param>
            <returns>A random number within the specified interval.</returns>
        </member>
        <member name="M:RAWSimO.Core.Randomization.RandomizerSimple.NextDouble(System.Double,System.Double)">
            <summary>
            Returns a random <code>double</code> number within the interval [<code>minValue</code>,<code>maxValue</code>).
            </summary>
            <param name="minValue">The inclusive lower bound of the interval.</param>
            <param name="maxValue">The exclusive upper bound of the interval.</param>
            <returns>A random number within the specified interval.</returns>
        </member>
        <member name="M:RAWSimO.Core.Randomization.RandomizerSimple.NextNormalDouble(System.Double,System.Double)">
            <summary>
            Returns the next normally distributed random number according to the given mean value and standard deviation.
            Implementation analog to the implementation at <see href="http://en.literateprograms.org/Box-Muller_transform_(C)"/>
            </summary>
            <param name="mean">The mean of the normal distribution.</param>
            <param name="std">The standard deviation of the normal distribution.</param>
            <returns>The next normally ditributed random value.</returns>
        </member>
        <member name="M:RAWSimO.Core.Randomization.RandomizerSimple.NextNormalDouble(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the next normally distributed random number according to the given mean value and standard deviation.
            </summary>
            <param name="mean">The mean of the normal distribution.</param>
            <param name="std">The standard deviation of the normal distribution.</param>
            <param name="lowerBound">The lower bound for the value.</param>
            <param name="upperBound">The upper bound for the value.</param>
            <returns>The next normally ditributed random value.</returns>
        </member>
        <member name="M:RAWSimO.Core.Randomization.RandomizerSimple.NextExponentialDouble(System.Double)">
            <summary>
            Returns the next variable drawn from an exponential distribution with the given parameters.
            </summary>
            <param name="lambda">The lambda parameter of the distribution.</param>
            <returns>The next random number drawn from the distribution with the given parameters.</returns>
        </member>
        <member name="M:RAWSimO.Core.Randomization.RandomizerSimple.NextExponentialDouble(System.Double,System.Double,System.Double)">
            <summary>
            Returns the next variable drawn from an exponential distribution with the given parameters.
            </summary>
            <param name="lambda">The lambda parameter of the distribution.</param>
            <param name="lowerBound">All numbers below the lower bound will be dropped.</param>
            <param name="upperBound">All numbers below the upper bound will be dropped.</param>
            <returns>The next random number drawn from the distribution with the given parameters.</returns>
        </member>
        <member name="M:RAWSimO.Core.Randomization.RandomizerSimple.NextGammaDouble(System.Double,System.Double)">
            <summary>
            Returns the next variable drawn from a gamma distribution with the given parameters.
            Note: "A simple method for generating Gamma variables" by George Marsaglia and Wai Wan Tsang
            </summary>
            <param name="k">The k parameter of the distribution.</param>
            <param name="theta">The theta parameter of the distribution.</param>
            <returns>The next random number drawn from the distribution with the given parameters.</returns>
        </member>
        <member name="M:RAWSimO.Core.Randomization.RandomizerSimple.NextGammaDouble(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the next variable drawn from a gamma distribution with the given parameters.
            Note: "A simple method for generating Gamma variables" by George Marsaglia and Wai Wan Tsang
            </summary>
            <param name="k">The k parameter of the distribution.</param>
            <param name="theta">The theta parameter of the distribution.</param>
            <param name="lowerBound">All numbers below the lower bound will be dropped.</param>
            <param name="upperBound">All numbers below the upper bound will be dropped.</param>
            <returns>The next random number drawn from the distribution with the given parameters.</returns>
        </member>
        <member name="T:RAWSimO.Core.Remote.RemoteControlAdapter">
            <summary>
            Implements functionality to integrate real world components in the simulation.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Remote.RemoteControlAdapter.#ctor(RAWSimO.Core.Instance)">
            <summary>
            Creates a new instance of the adapter.
            </summary>
            <param name="instance">The instance the adapter belongs to.</param>
        </member>
        <member name="F:RAWSimO.Core.Remote.RemoteControlAdapter._instance">
            <summary>
            The instance this remote-controller belongs to.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Remote.RemoteControlAdapter.PathSubmissionCallback">
            <summary>
            The callback for submitting a path for a robot.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Remote.RemoteControlAdapter.PickupSubmissionCallback">
            <summary>
            The callback for telling a robot to pickup a pod.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Remote.RemoteControlAdapter.SetdownSubmissionCallback">
            <summary>
            The callback for telling a robot to setdown a pod.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Remote.RemoteControlAdapter.RestSubmissionCallback">
            <summary>
            The callback for telling a robot to rest.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Remote.RemoteControlAdapter.GetItemSubmissionCallback">
            <summary>
            The callback for telling a robot to get an item.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Remote.RemoteControlAdapter.PutItemSubmissionCallback">
            <summary>
            The callback for telling a robot to put an item.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Remote.RemoteControlAdapter.RobotSubmitPath(System.Int32,System.Double,System.Collections.Generic.List{System.Int32})">
            <summary>
            Submits a path to a real world robot.
            </summary>
            <param name="robotID">The ID of the robot.</param>
            <param name="waitTime">The waittime before the execution starts.</param>
            <param name="path">The path to follow.</param>
        </member>
        <member name="M:RAWSimO.Core.Remote.RemoteControlAdapter.RobotSubmitPickupCommand(System.Int32)">
            <summary>
            Tells a robot to pickup a pod.
            </summary>
            <param name="robotID">The robot ID</param>
        </member>
        <member name="M:RAWSimO.Core.Remote.RemoteControlAdapter.RobotSubmitSetdownCommand(System.Int32)">
            <summary>
            Tells a robot to setdown a pod.
            </summary>
            <param name="robotID">The robot ID</param>
        </member>
        <member name="M:RAWSimO.Core.Remote.RemoteControlAdapter.RobotSubmitRestCommand(System.Int32)">
            <summary>
            Tells a robot to rest.
            </summary>
            <param name="robotID">The robot ID</param>
        </member>
        <member name="M:RAWSimO.Core.Remote.RemoteControlAdapter.RobotSubmitGetItemCommand(System.Int32)">
            <summary>
            Tells a robot to get an item.
            </summary>
            <param name="robotID">The robot ID</param>
        </member>
        <member name="M:RAWSimO.Core.Remote.RemoteControlAdapter.RobotSubmitPutItemCommand(System.Int32)">
            <summary>
            Tells a robot to put an item.
            </summary>
            <param name="robotID">The robot ID</param>
        </member>
        <member name="M:RAWSimO.Core.Remote.RemoteControlAdapter.RobotLocationUpdateCallback(System.Int32,System.Int32,System.Double)">
            <summary>
            This method is called whenever a robot updates its location.
            </summary>
            <param name="robotID">The robot ID.</param>
            <param name="waypointID">The new location of the robot indicated by the waypoint ID.</param>
            <param name="orientation">The orientation of the robot.</param>
        </member>
        <member name="M:RAWSimO.Core.Remote.RemoteControlAdapter.RobotPickupFinishedCallback(System.Int32,System.Boolean)">
            <summary>
            This method is called whenever a robot finishes a pickup operation.
            </summary>
            <param name="robotID">The robot ID.</param>
            <param name="success">Indicates whether the robot was successful.</param>
        </member>
        <member name="M:RAWSimO.Core.Remote.RemoteControlAdapter.RobotSetdownFinishedCallback(System.Int32,System.Boolean)">
            <summary>
            This method is called whenever a robot finishes a setdown operation.
            </summary>
            <param name="robotID">The robot ID.</param>
            <param name="success">Indicates whether the robot was successful.</param>
        </member>
        <member name="T:RAWSimO.Core.Statistics.FootprintDatapoint">
            <summary>
            Contains all performance criteria of one execution of the simulation.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry">
            <summary>
            Enumerates all entries of a footprint.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.Instance">
            <summary>
            The name of the instance.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.Setting">
            <summary>
            The name of the setting.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.Controller">
            <summary>
            The name of the controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.Tag">
            <summary>
            The tag that was passed to the execution. This field can be used to identify a run, otherwise it contains not any useful information.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.PP">
            <summary>
            Name of the path planner in use.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.TA">
            <summary>
            Name of the path planner in use.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.SA">
            <summary>
            Name of the station activator in use.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.IS">
            <summary>
            Name of the item storager in use.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.PS">
            <summary>
            Name of the pod storager in use.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.RP">
            <summary>
            Name of the repositioning planner in use.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.OB">
            <summary>
            Name of the order batcher in use.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.RB">
            <summary>
            Name of the replenishment batcher in use.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.MM">
            <summary>
            Name of the method manager in use.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.Warmup">
            <summary>
            The warmup time in seconds.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.Duration">
            <summary>
            The simulation duration in seconds.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.NTiers">
            <summary>
            The number of tiers.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.NBots">
            <summary>
            The number of robots.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.NPods">
            <summary>
            The number of pods.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.NIStations">
            <summary>
            The number of input stations.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.NOStations">
            <summary>
            The number of output stations.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.BotsPerStation">
            <summary>
            The number of bots divided by the number of stations.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.BotsPerISTation">
            <summary>
            The number of bots divided by the number of input stations.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.BotsPerOStation">
            <summary>
            The number of bots divided by the number of output stations.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.IStationCapacityAvg">
            <summary>
            The average capacity of an input station.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.OStationCapacityAvg">
            <summary>
            The average capacity of an output station.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.SKUs">
            <summary>
            The number of different SKUs available during simulation.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.BundlesPlaced">
            <summary>
            The number of bundles submitted to the system overall.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.OrdersPlaced">
            <summary>
            The number of orders submitted to the system overall.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.BundlesRejected">
            <summary>
            The number of bundles rejected by the system.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.OrdersRejected">
            <summary>
            The number of orders rejected by the system.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.BundlesInBacklogRemaining">
            <summary>
            The number of bundles backlogged by the system.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.OrdersInBacklogRemaining">
            <summary>
            The number of orders backlogged by the system.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.BundlesInBacklogAvg">
            <summary>
            The average number of bundles in backlog.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.OrdersInBacklogAvg">
            <summary>
            The average number of orders in backlog.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.BundlesHandled">
            <summary>
            The number of bundles stored overall.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.ItemsHandled">
            <summary>
            The number of items picked overall.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.LinesHandled">
            <summary>
            The number of lines picked overall.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.OrdersHandled">
            <summary>
            The number of orders fulfilled overall.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.UnitsHandled">
            <summary>
            The number of handled items and bundles overall.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.Collisions">
            <summary>
            The number of collisions that occurred.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.FailedReservations">
            <summary>
            The number of failed reservations.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.PathPlanningTimeouts">
            <summary>
            The number of times the path planning search ran into a timeout.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.PathPlanningTimeoutFractional">
            <summary>
            The fractional amount of timeouts across all path planning calls.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.DistanceTraveled">
            <summary>
            The aggregated distance all robots travelled.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.DistanceTraveledPerBot">
            <summary>
            The distance traveled in average per bot.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.DistanceEstimated">
            <summary>
            The aggregated distance estimated by all the robots.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.DistanceRequestedOptimal">
            <summary>
            The overall optimal distance by all requested trips.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.TimeMoving">
            <summary>
            The average time a bot was moving.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.TimeQueueing">
            <summary>
            The average time a bot was queueing.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.TripDistance">
            <summary>
            The average distance traveled per trip (overall distance traveled divided by trip count observed).
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.TripTime">
            <summary>
            The average time spent per trip (sum of measured trip times divided by trip count observed).
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.TripTimeWithoutQueueing">
            <summary>
            The average time spent per trip without the queueing time measured (sum of measured trip times minus measured queueing time divided by trip count observed).
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.TripCount">
            <summary>
            The overall number of trips observed.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.LastMileTripOStationCount">
            <summary>
            The number of times a robot completed a trip to the queueing area of its output station destination.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.LastMileTripOStationTimeAvg">
            <summary>
            The average time for completing the last part trip to the queueing area of its output station destination.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.LastMileTripIStationCount">
            <summary>
            The number of times a robot completed a trip to the queueing area of its input station destination.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.LastMileTripIStationTimeAvg">
            <summary>
            The average time for completing the last part trip to the queueing area of its input station destination.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.OverallAssignedTasks">
            <summary>
            The number of assigned tasks overall.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.OverallPodsHandledAtIStations">
            <summary>
            The number of pods handled at input stations.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.OverallPodsHandledAtOStations">
            <summary>
            The number of pods handled at output stations.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.PodsHandledAtIStationsFractional">
            <summary>
            The number of pods handled at input stations as a fractional of all pods handled overall.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.PodsHandledAtOStationsFractional">
            <summary>
            The number of pods handled at output stations as a fractional of all pods handled overall.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.PodsHandledPerIStationPerHour">
            <summary>
            The number of pods handled per input station per hour.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.PodsHandledPerOStationPerHour">
            <summary>
            The number of pods handled per output station per hour.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.RepositioningMoves">
            <summary>
            The number of repositioning moves that were executed.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.PodsHandledPerIStationAvg">
            <summary>
            The average number of pods handled per replenishment station.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.PodsHandledPerIStationVar">
            <summary>
            The variance of the average number of pods handled per replenishment station.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.PodsHandledPerOStationAvg">
            <summary>
            The average number of pods handled per pick station.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.PodsHandledPerOStationVar">
            <summary>
            The variance of the average number of pods handled per pick station.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.InventoryLevelAvg">
            <summary>
            The inventory level as an average over time.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.InventoryLevelLQ">
            <summary>
            The lower quartile of the average inventory level over time.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.InventoryLevelUQ">
            <summary>
            The upper quartile of the average inventory level over time
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.StorageLocationRanks">
            <summary>
            The number of ranks of all storage locations.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.InvCombinedTotal">
            <summary>
            The total number of inversions (combined score, average across simulation time).
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.InvCombinedRank">
            <summary>
            The aggregated rank difference of all inversions (combined score, average across simulation time).
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.InvCombinedAvgRank">
            <summary>
            The average rank difference of all inversions (combined score, average across simulation time).
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.InvSpeedTotal">
            <summary>
            The total number of inversions (speed score, average across simulation time).
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.InvSpeedRank">
            <summary>
            The aggregated rank difference of all inversions (speed score, average across simulation time).
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.InvSpeedAvgRank">
            <summary>
            The average rank difference of all inversions (speed score, average across simulation time).
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.InvUtilityTotal">
            <summary>
            The total number of inversions (utility score, average across simulation time).
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.InvUtilityRank">
            <summary>
            The aggregated rank difference of all inversions (utility score, average across simulation time).
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.InvUtilityAvgRank">
            <summary>
            The average rank difference of all inversions (utility score, average across simulation time).
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.BundleGenerationStops">
            <summary>
            The number of times the generation of bundles was paused during simulation horizon.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.OrderGenerationStops">
            <summary>
            The number of times the generation of orders was paused during simulation horizon.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.MemoryUsedMax">
            <summary>
            The maximal amount of memory used in megabyte (working set).
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.RealTimeUsed">
            <summary>
            The walltime used by the simulation.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.BundleThroughputRate">
            <summary>
            The number of bundles handled per hour.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.ItemThroughputRate">
            <summary>
            The number of items handled per hour.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.ItemThroughputRateUB">
            <summary>
            The upper bound on the number of items handled per hour.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.ItemThroughputRateScore">
            <summary>
            The score reached during simulation regarding the item throughput rate (relative value, ITR vs. ITR upper bound).
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.LineThroughputRate">
            <summary>
            The number of order lines handled per hour.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.OrderThroughputRate">
            <summary>
            The number of orders handled per hour.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.OrderTurnoverTimeAvg">
            <summary>
            The average turnover time across all orders.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.OrderTurnoverTimeMed">
            <summary>
            The median turnover time across all orders.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.OrderTurnoverTimeLQ">
            <summary>
            The lower quartile turnover time across all orders.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.OrderTurnoverTimeUQ">
            <summary>
            The upper quartile turnover time across all orders.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.OrderThroughputTimeAvg">
            <summary>
            The average throughput time across all orders.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.OrderThroughputTimeMed">
            <summary>
            The median throughput time across all orders.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.OrderThroughputTimeLQ">
            <summary>
            The lower quartile throughput time across all orders.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.OrderThroughputTimeUQ">
            <summary>
            The upper quartile throughput time across all orders.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.BundleTurnoverTimeAvg">
            <summary>
            The average turnover time across all bundles.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.BundleTurnoverTimeMed">
            <summary>
            The median turnover time across all bundles.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.BundleTurnoverTimeLQ">
            <summary>
            The lower quartile turnover time across all bundles.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.BundleTurnoverTimeUQ">
            <summary>
            The upper quartile turnover time across all bundles.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.BundleThroughputTimeAvg">
            <summary>
            The average throughput time across all bundles.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.BundleThroughputTimeMed">
            <summary>
            The median throughput time across all bundles.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.BundleThroughputTimeLQ">
            <summary>
            The lower quartile throughput time across all bundles.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.BundleThroughputTimeUQ">
            <summary>
            The upper quartile throughput time across all bundles.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.OrderLatenessAvg">
            <summary>
            The average lateness across all orders that were not completed in time.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.OrderLatenessMed">
            <summary>
            The median lateness across all orders that were not completed in time.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.OrderLatenessLQ">
            <summary>
            The lower quartile lateness across all orders that were not completed in time.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.OrderLatenessUQ">
            <summary>
            The upper quartile lateness across all orders that were not completed in time.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.OrderOffsetAvg">
            <summary>
            The average offset across all orders that were not completed in time.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.OrderOffsetMed">
            <summary>
            The median offset across all orders that were not completed in time.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.OrderOffsetLQ">
            <summary>
            The lower quartile offset across all orders that were not completed in time.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.OrderOffsetUQ">
            <summary>
            The upper quartile offset across all orders that were not completed in time.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.LateOrdersCount">
            <summary>
            The number of orders that were completed too late.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.OnTimeOrdersCount">
            <summary>
            The number of orders that were completed in time.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.LateOrdersFractional">
            <summary>
            The fractional amount of orders that were completed too late.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.LateOrdersRate">
            <summary>
            The number of orders that were completed too late per hour.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.OnTimeOrdersRate">
            <summary>
            The number of orders that were completed in time per hour.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.ItemPileOneAvg">
            <summary>
            The average item pile-on across all output stations.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.ItemPileOneMed">
            <summary>
            The median item pile-on across all output stations.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.ItemPileOneLQ">
            <summary>
            The lower quartile item pile-on across all output stations.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.ItemPileOneUQ">
            <summary>
            The upper quartile item pile-on across all output stations.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.InjectedItemPileOneAvg">
            <summary>
            The average injected item pile-on across all output stations, i.e. the number of items picked per pod that were injected into the robots task in average.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.InjectedItemPileOneMed">
            <summary>
            The median injected item pile-on across all output stations, i.e. the number of items picked per pod that were injected into the robots task in average.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.InjectedItemPileOneLQ">
            <summary>
            The lower quartile injected item pile-on across all output stations, i.e. the number of items picked per pod that were injected into the robots task in average.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.InjectedItemPileOneUQ">
            <summary>
            The upper quartile injected item pile-on across all output stations, i.e. the number of items picked per pod that were injected into the robots task in average.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.OrderPileOneAvg">
            <summary>
            The average order pile-on across all output stations.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.OrderPileOneMed">
            <summary>
            The median order pile-on across all output stations.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.OrderPileOneLQ">
            <summary>
            The lower quartile order pile-on across all output stations.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.OrderPileOneUQ">
            <summary>
            The upper quartile order pile-on across all output stations.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.BundlePileOneAvg">
            <summary>
            The average bundle pile-on across all input stations.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.BundlePileOneMed">
            <summary>
            The median bundle pile-on across all input stations.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.BundlePileOneLQ">
            <summary>
            The lower quartile bundle pile-on across all input stations.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.BundlePileOneUQ">
            <summary>
            The uper quartil bundle pile-on across all input stations.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.InjectedBundlePileOneAvg">
            <summary>
            The average injected bundle pile-on across all input stations, i.e. the number of bundles stored per pod that were injected into the robots task in average.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.InjectedBundlePileOneMed">
            <summary>
            The median injected bundle pile-on across all input stations, i.e. the number of bundles stored per pod that were injected into the robots task in average.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.InjectedBundlePileOneLQ">
            <summary>
            The lower quartile injected bundle pile-on across all input stations, i.e. the number of bundles stored per pod that were injected into the robots task in average.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.InjectedBundlePileOneUQ">
            <summary>
            The uper quartil injected bundle pile-on across all input stations, i.e. the number of bundles stored per pod that were injected into the robots task in average.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.OSIdleTimeAvg">
            <summary>
            The average idle time across all output stations.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.OSIdleTimeMed">
            <summary>
            The median idle time across all output stations.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.OSIdleTimeLQ">
            <summary>
            The lower quartile idle time across all output stations.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.OSIdleTimeUQ">
            <summary>
            The upper quartile idle time across all output stations.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.ISIdleTimeAvg">
            <summary>
            The average idle time across all input stations.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.ISIdleTimeMed">
            <summary>
            The median idle time across all input stations.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.ISIdleTimeLQ">
            <summary>
            The lower quartile idle time across all input stations.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.ISIdleTimeUQ">
            <summary>
            The upper quartile idle time across all input stations.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.OSUpTimeAvg">
            <summary>
            The average idle time across all output stations.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.OSUpTimeMed">
            <summary>
            The median up-time across all output stations.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.OSUpTimeLQ">
            <summary>
            The lower quartile up-time across all output stations.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.OSUpTimeUQ">
            <summary>
            The upper quartile up-time across all output stations.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.ISUpTimeAvg">
            <summary>
            The average up-time across all input stations.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.ISUpTimeMed">
            <summary>
            The median up-time across all input stations.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.ISUpTimeLQ">
            <summary>
            The lower quartile up-time across all input stations.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.ISUpTimeUQ">
            <summary>
            The upper quartile up-time across all input stations.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.OSDownTimeAvg">
            <summary>
            The average down time across all output stations.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.OSDownTimeMed">
            <summary>
            The median down time across all output stations.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.OSDownTimeLQ">
            <summary>
            The lower quartile down time across all output stations.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.OSDownTimeUQ">
            <summary>
            The upper quartile down time across all output stations.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.ISDownTimeAvg">
            <summary>
            The average down time across all input stations.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.ISDownTimeMed">
            <summary>
            The median down time across all input stations.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.ISDownTimeLQ">
            <summary>
            The lower quartile down time across all input stations.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.ISDownTimeUQ">
            <summary>
            The upper quartile down time across all input stations.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.TaskCountNone">
            <summary>
            The number of times the corresponding task was requested from a bot.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.TaskTimeNone">
            <summary>
            The time spent in the corresponding task by all bots.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.TaskCountParkPod">
            <summary>
            The number of times the corresponding task was requested from a bot.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.TaskTimeParkPod">
            <summary>
            The time spent in the corresponding task by all bots.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.TaskCountRepositionPod">
            <summary>
            The number of times the corresponding task was requested from a bot.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.TaskTimeRepositionPod">
            <summary>
            The time spent in the corresponding task by all bots.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.TaskCountInsert">
            <summary>
            The number of times the corresponding task was requested from a bot.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.TaskTimeInsert">
            <summary>
            The time spent in the corresponding task by all bots.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.TaskCountExtract">
            <summary>
            The number of times the corresponding task was requested from a bot.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.TaskTimeExtract">
            <summary>
            The time spent in the corresponding task by all bots.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.TaskCountRest">
            <summary>
            The number of times the corresponding task was requested from a bot.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.TaskTimeRest">
            <summary>
            The time spent in the corresponding task by all bots.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.TaskTimeBusyAvg">
            <summary>
            The time spent in any meaningful task averaged across all bots. Meaningful tasks are all but Rest or None.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.TaskTimeBusyAvgFractional">
            <summary>
            The time spent in any meaningful task averaged across all bots and as a fraction of the overall simulation horizon. Meaningful tasks are all but Rest or None.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.StateCountPickup">
            <summary>
            The number of times a bot entered the corresponding state.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.StateTimePickup">
            <summary>
            The time spent in the corresponding state by all bots.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.StateCountSetdown">
            <summary>
            The number of times a bot entered the corresponding state.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.StateTimeSetdown">
            <summary>
            The time spent in the corresponding state by all bots.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.StateCountGet">
            <summary>
            The number of times a bot entered the corresponding state.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.StateTimeGet">
            <summary>
            The time spent in the corresponding state by all bots.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.StateCountPut">
            <summary>
            The number of times a bot entered the corresponding state.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.StateTimePut">
            <summary>
            The time spent in the corresponding state by all bots.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.StateCountRest">
            <summary>
            The number of times a bot entered the corresponding state.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.StateTimeRest">
            <summary>
            The time spent in the corresponding state by all bots.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.StateCountMove">
            <summary>
            The number of times a bot entered the corresponding state.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.StateTimeMove">
            <summary>
            The time spent in the corresponding state by all bots.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.StateCountEvade">
            <summary>
            The number of times a bot entered the corresponding state.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.StateTimeEvade">
            <summary>
            The time spent in the corresponding state by all bots.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.StateCountElevator">
            <summary>
            The number of times a bot entered the corresponding state.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.StateTimeElevator">
            <summary>
            The time spent in the corresponding state by all bots.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.TimingDecisionsOverall">
            <summary>
            The overall timing spent for deciding / planning.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.TimingPathPlanningAvg">
            <summary>
            The average time per path planning call.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.TimingPathPlanningOverall">
            <summary>
            The overall time for path planning.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.TimingPathPlanningCount">
            <summary>
            The number of path planning calls.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.TimingTaskAllocationAvg">
            <summary>
            The average time per task allocation call.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.TimingTaskAllocationOverall">
            <summary>
            The overall time for task allocation.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.TimingTaskAllocationCount">
            <summary>
            The number of task allocation calls.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.TimingItemStorageAvg">
            <summary>
            The average time per item storage call.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.TimingItemStorageOverall">
            <summary>
            The overall time for item storage.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.TimingItemStorageCount">
            <summary>
            The number of item storage calls.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.TimingPodStorageAvg">
            <summary>
            The average time per pod storage call.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.TimingPodStorageOverall">
            <summary>
            The overall time for pod storage.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.TimingPodStorageCount">
            <summary>
            The number of pod storage calls.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.TimingRepositioningAvg">
            <summary>
            The average time per pod storage call.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.TimingRepositioningOverall">
            <summary>
            The overall time for pod storage.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.TimingRepositioningCount">
            <summary>
            The number of pod storage calls.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.TimingReplenishmentBatchingAvg">
            <summary>
            The average time per replsnishment batching call.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.TimingReplenishmentBatchingOverall">
            <summary>
            The overall time for replenishment batching.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.TimingReplenishmentBatchingCount">
            <summary>
            The number of replenishment batching calls.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.TimingOrderBatchingAvg">
            <summary>
            The average time per order batching call.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.TimingOrderBatchingOverall">
            <summary>
            The overall time for order batching.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.TimingOrderBatchingCount">
            <summary>
            The number of order batching calls.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.CustomLogPPString">
            <summary>
            A custom performance info by the respective controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.CustomLogPP1">
            <summary>
            A custom performance info by the respective controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.CustomLogPP2">
            <summary>
            A custom performance info by the respective controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.CustomLogPP3">
            <summary>
            A custom performance info by the respective controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.CustomLogPP4">
            <summary>
            A custom performance info by the respective controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.CustomLogTAString">
            <summary>
            A custom performance info by the respective controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.CustomLogTA1">
            <summary>
            A custom performance info by the respective controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.CustomLogTA2">
            <summary>
            A custom performance info by the respective controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.CustomLogTA3">
            <summary>
            A custom performance info by the respective controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.CustomLogTA4">
            <summary>
            A custom performance info by the respective controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.CustomLogPCString">
            <summary>
            A custom performance info by the respective controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.CustomLogPC1">
            <summary>
            A custom performance info by the respective controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.CustomLogPC2">
            <summary>
            A custom performance info by the respective controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.CustomLogPC3">
            <summary>
            A custom performance info by the respective controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.CustomLogPC4">
            <summary>
            A custom performance info by the respective controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.CustomLogSAString">
            <summary>
            A custom performance info by the respective controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.CustomLogSA1">
            <summary>
            A custom performance info by the respective controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.CustomLogSA2">
            <summary>
            A custom performance info by the respective controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.CustomLogSA3">
            <summary>
            A custom performance info by the respective controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.CustomLogSA4">
            <summary>
            A custom performance info by the respective controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.CustomLogISString">
            <summary>
            A custom performance info by the respective controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.CustomLogIS1">
            <summary>
            A custom performance info by the respective controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.CustomLogIS2">
            <summary>
            A custom performance info by the respective controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.CustomLogIS3">
            <summary>
            A custom performance info by the respective controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.CustomLogIS4">
            <summary>
            A custom performance info by the respective controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.CustomLogPSString">
            <summary>
            A custom performance info by the respective controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.CustomLogPS1">
            <summary>
            A custom performance info by the respective controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.CustomLogPS2">
            <summary>
            A custom performance info by the respective controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.CustomLogPS3">
            <summary>
            A custom performance info by the respective controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.CustomLogPS4">
            <summary>
            A custom performance info by the respective controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.CustomLogRPString">
            <summary>
            A custom performance info by the respective controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.CustomLogRP1">
            <summary>
            A custom performance info by the respective controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.CustomLogRP2">
            <summary>
            A custom performance info by the respective controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.CustomLogRP3">
            <summary>
            A custom performance info by the respective controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.CustomLogRP4">
            <summary>
            A custom performance info by the respective controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.CustomLogOBString">
            <summary>
            A custom performance info by the respective controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.CustomLogOB1">
            <summary>
            A custom performance info by the respective controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.CustomLogOB2">
            <summary>
            A custom performance info by the respective controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.CustomLogOB3">
            <summary>
            A custom performance info by the respective controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.CustomLogOB4">
            <summary>
            A custom performance info by the respective controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.CustomLogRBString">
            <summary>
            A custom performance info by the respective controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.CustomLogRB1">
            <summary>
            A custom performance info by the respective controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.CustomLogRB2">
            <summary>
            A custom performance info by the respective controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.CustomLogRB3">
            <summary>
            A custom performance info by the respective controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.CustomLogRB4">
            <summary>
            A custom performance info by the respective controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.CustomLogMMString">
            <summary>
            A custom performance info by the respective controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.CustomLogMM1">
            <summary>
            A custom performance info by the respective controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.CustomLogMM2">
            <summary>
            A custom performance info by the respective controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.CustomLogMM3">
            <summary>
            A custom performance info by the respective controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.CustomLogMM4">
            <summary>
            A custom performance info by the respective controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.TagSetting1">
            <summary>
            A tag that is set by the setting config.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.TagSetting2">
            <summary>
            A tag that is set by the setting config.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.TagSetting3">
            <summary>
            A tag that is set by the setting config.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.TagControl1">
            <summary>
            A tag that is set by the control config.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.TagControl2">
            <summary>
            A tag that is set by the control config.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry.TagControl3">
            <summary>
            A tag that is set by the control config.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint._entryOrderStorage">
            <summary>
            The order of the entries.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Statistics.FootprintDatapoint.EntryOrder">
            <summary>
            The order of the entries.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint._entryTypes">
            <summary>
            Indicates the order in which the footprint shall be read / written.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FootprintDatapoint._entryValues">
            <summary>
            Contains the actual values of the footprint entries.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Statistics.FootprintDatapoint.Item(RAWSimO.Core.Statistics.FootprintDatapoint.FootPrintEntry)">
            <summary>
            Retrieves the value of the given entry within this footprint.
            </summary>
            <param name="entry">The entry to retrieve.</param>
            <returns>The value of the entry.</returns>
        </member>
        <member name="M:RAWSimO.Core.Statistics.FootprintDatapoint.#ctor(RAWSimO.Core.Instance)">
            <summary>
            Creates a new datapoint by extracting all necessary information from the instance object that just completed a simulation run.
            </summary>
            <param name="instance">The instance object that just completed the simulation run.</param>
        </member>
        <member name="M:RAWSimO.Core.Statistics.FootprintDatapoint.#ctor(System.String)">
            <summary>
            Creates a datapoint from a string serialization of this datapoint.
            </summary>
            <param name="footprintline">The string representation of the datapoint.</param>
        </member>
        <member name="M:RAWSimO.Core.Statistics.FootprintDatapoint.GetFootprintHeader">
            <summary>
            Returns a line that can be used as a header for datapoints of this kind.
            </summary>
            <returns>The header line.</returns>
        </member>
        <member name="M:RAWSimO.Core.Statistics.FootprintDatapoint.GetFootprint">
            <summary>
            Returns the footprint as a string line.
            </summary>
            <returns>The line representing the datapoint.</returns>
        </member>
        <member name="T:RAWSimO.Core.Statistics.WellSortednessPathTimeTuple">
            <summary>
            Contains one value per distance
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.WellSortednessPathTimeTuple.PathTime">
            <summary>
            The distance to an output station for all values contained in this struct.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.WellSortednessPathTimeTuple.PodCount">
            <summary>
            The number of pods stored at this path time length.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.WellSortednessPathTimeTuple.StorageLocationCount">
            <summary>
            The number of storage locations at this path time length.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.WellSortednessPathTimeTuple.SKUFrequencySum">
            <summary>
            The average frequency of the item descriptions on the pods summed across the pods.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.WellSortednessPathTimeTuple.ContentFrequencySum">
            <summary>
            The summed frequency of the physical items on the pods summed across the pods.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.WellSortednessPathTimeTuple.OutputStationTripsSum">
            <summary>
            The summed trips to output-stations from the given distance.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.WellSortednessPathTimeTuple.PodSpeedSum">
            <summary>
            The summed speed score of all pods in the row.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.WellSortednessPathTimeTuple.PodUtilitySum">
            <summary>
            The summed utility score of all pods in the row.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.WellSortednessPathTimeTuple.PodCombinedScoreSum">
            <summary>
            The summed combined score of all pods in the row.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Statistics.WellSortednessDatapoint">
            <summary>
            Contains information about the current situation of well sortedness.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.WellSortednessDatapoint.TimeStamp">
            <summary>
            The timestamp of this snapshot.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.WellSortednessDatapoint.PathTimeFrequencies">
            <summary>
            All values grouped per path time.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Statistics.WellSortednessDatapoint.#ctor(System.Double,System.Collections.Generic.List{RAWSimO.Core.Statistics.WellSortednessPathTimeTuple})">
            <summary>
            Creates a new datapoint.
            </summary>
            <param name="timeStamp">The timestamp of the snapshot.</param>
            <param name="distanceFrequencies">All frequency information.</param>
        </member>
        <member name="M:RAWSimO.Core.Statistics.WellSortednessDatapoint.#ctor(System.String)">
            <summary>
            Creates a datapoint from a serialized line version of it.
            </summary>
            <param name="datapointLine">The datapoint as a serialized line.</param>
        </member>
        <member name="M:RAWSimO.Core.Statistics.WellSortednessDatapoint.GetHeader">
            <summary>
            Returns a headline for the string representation.
            </summary>
            <returns>A headline.</returns>
        </member>
        <member name="M:RAWSimO.Core.Statistics.WellSortednessDatapoint.GetLine">
            <summary>
            Returns a string representation of this datapoint.
            </summary>
            <returns>The datapoint represented as a string.</returns>
        </member>
        <member name="T:RAWSimO.Core.Statistics.ItemDescriptionFrequencyDatapoint">
            <summary>
            Captures frequency information for a given item description.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.ItemDescriptionFrequencyDatapoint.ItemDescriptionID">
            <summary>
            ID of the corresponding item description.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.ItemDescriptionFrequencyDatapoint.Weight">
            <summary>
            The weight for generating the item.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.ItemDescriptionFrequencyDatapoint.OrderCount">
            <summary>
            The number of times the item was ordered.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.ItemDescriptionFrequencyDatapoint.MeasuredFrequency">
            <summary>
            The measured frequency.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.ItemDescriptionFrequencyDatapoint.StaticFrequency">
            <summary>
            The static frequency.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Statistics.ItemDescriptionFrequencyDatapoint.#ctor(RAWSimO.Core.Items.ItemDescription,RAWSimO.Core.Statistics.FrequencyTracker)">
            <summary>
            Creates a new datapoint.
            </summary>
            <param name="itemDescription">The actual item description captured by this datapoint.</param>
            <param name="frequencyTracker">The frequency tracker containing more information.</param>
        </member>
        <member name="M:RAWSimO.Core.Statistics.ItemDescriptionFrequencyDatapoint.#ctor(System.String)">
            <summary>
            Creates a datapoint from a string representation.
            </summary>
            <param name="line">The line representing this datapoint.</param>
        </member>
        <member name="M:RAWSimO.Core.Statistics.ItemDescriptionFrequencyDatapoint.GetHeader">
            <summary>
            Returns a headline for the string representation.
            </summary>
            <returns>A headline.</returns>
        </member>
        <member name="M:RAWSimO.Core.Statistics.ItemDescriptionFrequencyDatapoint.GetLine">
            <summary>
            Returns a string representation of this datapoint.
            </summary>
            <returns>The datapoint represented as a string.</returns>
        </member>
        <member name="T:RAWSimO.Core.Statistics.StationStatisticsDataPoint">
            <summary>
            Contains statistics about a station.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.StationStatisticsDataPoint.PodsHandled">
            <summary>
            The number of pods handled at that station.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.StationStatisticsDataPoint.PodHandlingTimeAvg">
            <summary>
            The average time it took to handle a pod at a station.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.StationStatisticsDataPoint.PodHandlingTimeVariance">
            <summary>
            The variance in the pod handling time.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.StationStatisticsDataPoint.PodHandlingTimeSum">
            <summary>
            The overall sum of pod handling time.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.StationStatisticsDataPoint.PodHandlingTimeMin">
            <summary>
            The minimal time of handling a pod.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.StationStatisticsDataPoint.PodHandlingTimeMax">
            <summary>
            The maximal time of handling a pod.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Statistics.ConnectionStatisticsDataPoint">
            <summary>
            Contains information about a connection between two waypoint of the waypoint-graph.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.ConnectionStatisticsDataPoint.FromID">
            <summary>
            The from part of this connection.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.ConnectionStatisticsDataPoint.FromX">
            <summary>
            The x-value of the position of the 'from' waypoint.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.ConnectionStatisticsDataPoint.FromY">
            <summary>
            The y-value of the position of the 'from' waypoint.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.ConnectionStatisticsDataPoint.FromIsStorage">
            <summary>
            Indicates whether the 'from' waypoint is a storage location.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.ConnectionStatisticsDataPoint.FromIsIStation">
            <summary>
            Indicates whether the 'from' waypoint is associated with an input-station.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.ConnectionStatisticsDataPoint.FromIsOStation">
            <summary>
            Indicates whether the 'from' waypoint is associated with an output-station.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.ConnectionStatisticsDataPoint.FromIsElevator">
            <summary>
            Indicates whether the 'from' waypoint is associated with an elevator.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.ConnectionStatisticsDataPoint.ToID">
            <summary>
            The to part of this connection.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.ConnectionStatisticsDataPoint.ToX">
            <summary>
            The x-value of the position of the 'to' waypoint.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.ConnectionStatisticsDataPoint.ToY">
            <summary>
            The y-value of the position of the 'to' waypoint.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.ConnectionStatisticsDataPoint.ToIsStorage">
            <summary>
            Indicates whether the 'to' waypoint is a storage location.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.ConnectionStatisticsDataPoint.ToIsIStation">
            <summary>
            Indicates whether the 'to' waypoint is associated with an input-station.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.ConnectionStatisticsDataPoint.ToIsOStation">
            <summary>
            Indicates whether the 'to' waypoint is associated with an output-station.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.ConnectionStatisticsDataPoint.ToIsElevator">
            <summary>
            Indicates whether the 'to' waypoint is associated with an elevator.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.ConnectionStatisticsDataPoint.Count">
            <summary>
            The number of times the connection was used for a trip.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.ConnectionStatisticsDataPoint.TravelTimeAvg">
            <summary>
            The average travel time per trip along this connection.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.ConnectionStatisticsDataPoint.TravelTimeVar">
            <summary>
            The standard deviation of the travel time along this connection.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.ConnectionStatisticsDataPoint.TravelTimeSum">
            <summary>
            The overall travel time spent for this trip.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.ConnectionStatisticsDataPoint.TravelTimeMin">
            <summary>
            The minimal travel time spent on a trip.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.ConnectionStatisticsDataPoint.TravelTimeMax">
            <summary>
            The maximal travel time spent on a trip.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Statistics.ConnectionStatisticsDataPoint.GetStringTupleRepresentationDescription">
            <summary>
            Returns a string describing the string tuple representation of a datapoint.
            </summary>
            <returns>The descriptive string.</returns>
        </member>
        <member name="M:RAWSimO.Core.Statistics.ConnectionStatisticsDataPoint.GetStringTupleRepresentation">
            <summary>
            Returns a string representation of this datapoint that can be used for serialization.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="M:RAWSimO.Core.Statistics.ConnectionStatisticsDataPoint.FromStringTupleRepresentation(System.String)">
            <summary>
            Parses a string representation into a datapoint and returns it.
            </summary>
            <param name="s">The string representation of the datapoint.</param>
            <returns>The datapoint.</returns>
        </member>
        <member name="T:RAWSimO.Core.Statistics.CustomControllerDatapoint">
            <summary>
            Contains controller specific info that is written out to the footprint.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.CustomControllerDatapoint.CustomLogPPString">
            <summary>
            A custom performance info by the respective controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.CustomControllerDatapoint.CustomLogPP1">
            <summary>
            A custom performance info by the respective controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.CustomControllerDatapoint.CustomLogPP2">
            <summary>
            A custom performance info by the respective controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.CustomControllerDatapoint.CustomLogPP3">
            <summary>
            A custom performance info by the respective controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.CustomControllerDatapoint.CustomLogPP4">
            <summary>
            A custom performance info by the respective controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.CustomControllerDatapoint.CustomLogTAString">
            <summary>
            A custom performance info by the respective controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.CustomControllerDatapoint.CustomLogTA1">
            <summary>
            A custom performance info by the respective controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.CustomControllerDatapoint.CustomLogTA2">
            <summary>
            A custom performance info by the respective controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.CustomControllerDatapoint.CustomLogTA3">
            <summary>
            A custom performance info by the respective controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.CustomControllerDatapoint.CustomLogTA4">
            <summary>
            A custom performance info by the respective controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.CustomControllerDatapoint.CustomLogPCString">
            <summary>
            A custom performance info by the respective controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.CustomControllerDatapoint.CustomLogPC1">
            <summary>
            A custom performance info by the respective controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.CustomControllerDatapoint.CustomLogPC2">
            <summary>
            A custom performance info by the respective controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.CustomControllerDatapoint.CustomLogPC3">
            <summary>
            A custom performance info by the respective controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.CustomControllerDatapoint.CustomLogPC4">
            <summary>
            A custom performance info by the respective controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.CustomControllerDatapoint.CustomLogSAString">
            <summary>
            A custom performance info by the respective controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.CustomControllerDatapoint.CustomLogSA1">
            <summary>
            A custom performance info by the respective controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.CustomControllerDatapoint.CustomLogSA2">
            <summary>
            A custom performance info by the respective controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.CustomControllerDatapoint.CustomLogSA3">
            <summary>
            A custom performance info by the respective controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.CustomControllerDatapoint.CustomLogSA4">
            <summary>
            A custom performance info by the respective controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.CustomControllerDatapoint.CustomLogISString">
            <summary>
            A custom performance info by the respective controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.CustomControllerDatapoint.CustomLogIS1">
            <summary>
            A custom performance info by the respective controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.CustomControllerDatapoint.CustomLogIS2">
            <summary>
            A custom performance info by the respective controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.CustomControllerDatapoint.CustomLogIS3">
            <summary>
            A custom performance info by the respective controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.CustomControllerDatapoint.CustomLogIS4">
            <summary>
            A custom performance info by the respective controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.CustomControllerDatapoint.CustomLogPSString">
            <summary>
            A custom performance info by the respective controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.CustomControllerDatapoint.CustomLogPS1">
            <summary>
            A custom performance info by the respective controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.CustomControllerDatapoint.CustomLogPS2">
            <summary>
            A custom performance info by the respective controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.CustomControllerDatapoint.CustomLogPS3">
            <summary>
            A custom performance info by the respective controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.CustomControllerDatapoint.CustomLogPS4">
            <summary>
            A custom performance info by the respective controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.CustomControllerDatapoint.CustomLogRPString">
            <summary>
            A custom performance info by the respective controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.CustomControllerDatapoint.CustomLogRP1">
            <summary>
            A custom performance info by the respective controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.CustomControllerDatapoint.CustomLogRP2">
            <summary>
            A custom performance info by the respective controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.CustomControllerDatapoint.CustomLogRP3">
            <summary>
            A custom performance info by the respective controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.CustomControllerDatapoint.CustomLogRP4">
            <summary>
            A custom performance info by the respective controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.CustomControllerDatapoint.CustomLogOBString">
            <summary>
            A custom performance info by the respective controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.CustomControllerDatapoint.CustomLogOB1">
            <summary>
            A custom performance info by the respective controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.CustomControllerDatapoint.CustomLogOB2">
            <summary>
            A custom performance info by the respective controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.CustomControllerDatapoint.CustomLogOB3">
            <summary>
            A custom performance info by the respective controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.CustomControllerDatapoint.CustomLogOB4">
            <summary>
            A custom performance info by the respective controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.CustomControllerDatapoint.CustomLogRBString">
            <summary>
            A custom performance info by the respective controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.CustomControllerDatapoint.CustomLogRB1">
            <summary>
            A custom performance info by the respective controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.CustomControllerDatapoint.CustomLogRB2">
            <summary>
            A custom performance info by the respective controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.CustomControllerDatapoint.CustomLogRB3">
            <summary>
            A custom performance info by the respective controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.CustomControllerDatapoint.CustomLogRB4">
            <summary>
            A custom performance info by the respective controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.CustomControllerDatapoint.CustomLogMMString">
            <summary>
            A custom performance info by the respective controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.CustomControllerDatapoint.CustomLogMM1">
            <summary>
            A custom performance info by the respective controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.CustomControllerDatapoint.CustomLogMM2">
            <summary>
            A custom performance info by the respective controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.CustomControllerDatapoint.CustomLogMM3">
            <summary>
            A custom performance info by the respective controller.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.CustomControllerDatapoint.CustomLogMM4">
            <summary>
            A custom performance info by the respective controller.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Statistics.BundleHandledDatapoint">
            <summary>
            Constitutes one data-point for the logging of the bundle handling.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.BundleHandledDatapoint.Bot">
            <summary>
            The corresponding bot.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.BundleHandledDatapoint.Pod">
            <summary>
            The corresponding pod.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.BundleHandledDatapoint.InputStation">
            <summary>
            The corresponding input-station.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.BundleHandledDatapoint.TimeStamp">
            <summary>
            The time-stamp of this datapoint.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.BundleHandledDatapoint.TurnoverTime">
            <summary>
            The time between placement and handling of the bundle.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.BundleHandledDatapoint.ThroughputTime">
            <summary>
            The time between allocation and handling of the bundle.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Statistics.BundleHandledDatapoint.#ctor(System.Double,System.Int32,System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            Creates a new datapoint.
            </summary>
            <param name="timestamp">The timestamp.</param>
            <param name="bot">The bot.</param>
            <param name="pod">The pod.</param>
            <param name="iStation">The station.</param>
            <param name="turnoverTime">The turnover time.</param>
            <param name="throughputTime">The throughput time.</param>
        </member>
        <member name="M:RAWSimO.Core.Statistics.BundleHandledDatapoint.#ctor(System.String)">
            <summary>
            Creates a new datapoint from a line serialization.
            </summary>
            <param name="line">The serialized datapoint line.</param>
        </member>
        <member name="M:RAWSimO.Core.Statistics.BundleHandledDatapoint.GetLine">
            <summary>
            Creates a line serialization of this datapoint.
            </summary>
            <returns>The datapoint as a line.</returns>
        </member>
        <member name="M:RAWSimO.Core.Statistics.BundleHandledDatapoint.GetHeader">
            <summary>
            Gets a header that describes the values of the line serialization.
            </summary>
            <returns>A header.</returns>
        </member>
        <member name="T:RAWSimO.Core.Statistics.BundlePlacedDatapoint">
            <summary>
            Constitutes one data-point for the logging of the placement of incoming bundles.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.BundlePlacedDatapoint.TimeStamp">
            <summary>
            The time-stamp of this datapoint.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Statistics.BundlePlacedDatapoint.#ctor(System.Double)">
            <summary>
            Creates a new datapoint.
            </summary>
            <param name="timestamp">The timestamp.</param>
        </member>
        <member name="M:RAWSimO.Core.Statistics.BundlePlacedDatapoint.#ctor(System.String)">
            <summary>
            Creates a new datapoint from a line serialization.
            </summary>
            <param name="line">The serialized datapoint.</param>
        </member>
        <member name="M:RAWSimO.Core.Statistics.BundlePlacedDatapoint.GetLine">
            <summary>
            Creates a line serialization of this datapoint.
            </summary>
            <returns>The line.</returns>
        </member>
        <member name="M:RAWSimO.Core.Statistics.BundlePlacedDatapoint.GetHeader">
            <summary>
            Creates a header for the line serializations.
            </summary>
            <returns>The header.</returns>
        </member>
        <member name="T:RAWSimO.Core.Statistics.ItemHandledDatapoint">
            <summary>
            Constitutes one data-point for the logging of the item handling.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.ItemHandledDatapoint.TimeStamp">
            <summary>
            The time-stamp of this datapoint.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.ItemHandledDatapoint.Bot">
            <summary>
            The corresponding bot.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.ItemHandledDatapoint.Pod">
            <summary>
            The corresponding pod.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.ItemHandledDatapoint.OutputStation">
            <summary>
            The corresponding output-station.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Statistics.ItemHandledDatapoint.#ctor(System.Double,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new datapoint.
            </summary>
            <param name="timestamp">The timestamp.</param>
            <param name="bot">The bot.</param>
            <param name="pod">The pod.</param>
            <param name="oStation">The output station.</param>
        </member>
        <member name="M:RAWSimO.Core.Statistics.ItemHandledDatapoint.#ctor(System.String)">
            <summary>
            Creates a new datapoint from a line serialization.
            </summary>
            <param name="line">The serialized datapoint.</param>
        </member>
        <member name="M:RAWSimO.Core.Statistics.ItemHandledDatapoint.GetLine">
            <summary>
            Creates a line serialization of this datapoint.
            </summary>
            <returns>The line.</returns>
        </member>
        <member name="M:RAWSimO.Core.Statistics.ItemHandledDatapoint.GetHeader">
            <summary>
            Creates a header for the line serializations.
            </summary>
            <returns>The header.</returns>
        </member>
        <member name="T:RAWSimO.Core.Statistics.OrderHandledDatapoint">
            <summary>
            Constitutes one data-point for the logging of the order handling.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.OrderHandledDatapoint.TimeStamp">
            <summary>
            The time-stamp of this datapoint.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.OrderHandledDatapoint.OutputStation">
            <summary>
            The corresponding output-station.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.OrderHandledDatapoint.TurnoverTime">
            <summary>
            The time between placement and handling of the order.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.OrderHandledDatapoint.ThroughputTime">
            <summary>
            The time between allocation and handling of the order.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.OrderHandledDatapoint.Lateness">
            <summary>
            The lateness of the order. A negative number indicates the time the order was complete before its due date while a positive number accounts for its lateness.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Statistics.OrderHandledDatapoint.#ctor(System.Double,System.Int32,System.Double,System.Double,System.Double)">
            <summary>
            Creates a new datapoint.
            </summary>
            <param name="timestamp">The timestamp.</param>
            <param name="oStation">The output station.</param>
            <param name="turnoverTime">The turnover time.</param>
            <param name="throughputTime">The throughput time.</param>
            <param name="lateness">The lateness.</param>
        </member>
        <member name="M:RAWSimO.Core.Statistics.OrderHandledDatapoint.#ctor(System.String)">
            <summary>
            Creates a new datapoint from a line serialization.
            </summary>
            <param name="line">The serialized datapoint.</param>
        </member>
        <member name="M:RAWSimO.Core.Statistics.OrderHandledDatapoint.GetLine">
            <summary>
            Creates a line serialization of this datapoint.
            </summary>
            <returns>The line.</returns>
        </member>
        <member name="M:RAWSimO.Core.Statistics.OrderHandledDatapoint.GetHeader">
            <summary>
            Creates a header for the line serializations.
            </summary>
            <returns>The header.</returns>
        </member>
        <member name="T:RAWSimO.Core.Statistics.OrderPlacedDatapoint">
            <summary>
            Constitutes one data-point for the logging of the placement of incoming orders.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.OrderPlacedDatapoint.TimeStamp">
            <summary>
            The time-stamp of this datapoint.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Statistics.OrderPlacedDatapoint.#ctor(System.Double)">
            <summary>
            Creates a new datapoint.
            </summary>
            <param name="timestamp">The timestamp.</param>
        </member>
        <member name="M:RAWSimO.Core.Statistics.OrderPlacedDatapoint.#ctor(System.String)">
            <summary>
            Creates a new datapoint from a line serialization.
            </summary>
            <param name="line">The serialized datapoint.</param>
        </member>
        <member name="M:RAWSimO.Core.Statistics.OrderPlacedDatapoint.GetLine">
            <summary>
            Creates a line serialization of this datapoint.
            </summary>
            <returns>The line.</returns>
        </member>
        <member name="M:RAWSimO.Core.Statistics.OrderPlacedDatapoint.GetHeader">
            <summary>
            Creates a header for the line serializations.
            </summary>
            <returns>The header.</returns>
        </member>
        <member name="T:RAWSimO.Core.Statistics.CollisionDatapoint">
            <summary>
            Constitutes one data-point for the logging of one collision.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.CollisionDatapoint.TimeStamp">
            <summary>
            The time-stamp of this datapoint.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.CollisionDatapoint.Bot">
            <summary>
            The ID of the bot that reported the collision.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.CollisionDatapoint.Tier">
            <summary>
            The tier on which the collision happened.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Statistics.CollisionDatapoint.#ctor(System.Double,System.Int32,System.Int32)">
            <summary>
            Creates a new datapoint.
            </summary>
            <param name="timestamp">The timestamp.</param>
            <param name="bot">The bot.</param>
            <param name="tier">The tier.</param>
        </member>
        <member name="M:RAWSimO.Core.Statistics.CollisionDatapoint.#ctor(System.String)">
            <summary>
            Creates a new datapoint from a line serialization.
            </summary>
            <param name="line">The serialized datapoint.</param>
        </member>
        <member name="M:RAWSimO.Core.Statistics.CollisionDatapoint.GetLine">
            <summary>
            Creates a line serialization of this datapoint.
            </summary>
            <returns>The line.</returns>
        </member>
        <member name="M:RAWSimO.Core.Statistics.CollisionDatapoint.GetHeader">
            <summary>
            Creates a header for the line serializations.
            </summary>
            <returns>The header.</returns>
        </member>
        <member name="T:RAWSimO.Core.Statistics.DistanceDatapoint">
            <summary>
            Constitutes one data-point for the distance logging.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.DistanceDatapoint.TimeStamp">
            <summary>
            The timestamp of this snapshot.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.DistanceDatapoint.DistanceTraveled">
            <summary>
            The distance traveled between this timestamp and the last one.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Statistics.DistanceDatapoint.#ctor(System.Double,System.Double)">
            <summary>
            Creates a new datapoint.
            </summary>
            <param name="timestamp">The timestamp.</param>
            <param name="distanceTraveled">The distance.</param>
        </member>
        <member name="M:RAWSimO.Core.Statistics.DistanceDatapoint.#ctor(System.String)">
            <summary>
            Creates a new datapoint from a line serialization.
            </summary>
            <param name="line">The serialized datapoint.</param>
        </member>
        <member name="M:RAWSimO.Core.Statistics.DistanceDatapoint.GetLine">
            <summary>
            Creates a line serialization of this datapoint.
            </summary>
            <returns>The line.</returns>
        </member>
        <member name="M:RAWSimO.Core.Statistics.DistanceDatapoint.GetHeader">
            <summary>
            Creates a header for the line serializations.
            </summary>
            <returns>The header.</returns>
        </member>
        <member name="T:RAWSimO.Core.Statistics.BotDatapoint">
            <summary>
            Constitutes one data-point storing bot information.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.BotDatapoint.TimeStamp">
            <summary>
            The timestamp of this snapshot.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.BotDatapoint.BotsQueueing">
            <summary>
            The number of bots currently queueing.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.BotDatapoint.TaskBotCounts">
            <summary>
            The number of bots currently engaging in the given tasks.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Statistics.BotDatapoint.#ctor(System.Double,System.Double,System.Tuple{System.String,System.Int32}[])">
            <summary>
            Creates a new datapoint.
            </summary>
            <param name="timestamp">The timestamp.</param>
            <param name="botsQueueing">The number of bots currently queueing.</param>
            <param name="taskBotCounts">The number of bots per their current tasks.</param>
        </member>
        <member name="M:RAWSimO.Core.Statistics.BotDatapoint.#ctor(System.String)">
            <summary>
            Creates a new datapoint from a line serialization.
            </summary>
            <param name="line">The serialized datapoint.</param>
        </member>
        <member name="M:RAWSimO.Core.Statistics.BotDatapoint.GetLine">
            <summary>
            Creates a line serialization of this datapoint.
            </summary>
            <returns>The line.</returns>
        </member>
        <member name="M:RAWSimO.Core.Statistics.BotDatapoint.GetHeader">
            <summary>
            Creates a header for the line serializations.
            </summary>
            <returns>The header.</returns>
        </member>
        <member name="T:RAWSimO.Core.Statistics.PathFindingDatapoint">
            <summary>
            Constitutes one data-point storing path planning information immediately derived from the path planner.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.PathFindingDatapoint.TimeStamp">
            <summary>
            The time stamp of this snapshot.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.PathFindingDatapoint.Runtime">
            <summary>
            The runtime of this snapshot.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.PathFindingDatapoint.Requests">
            <summary>
            The x-value of this location snapshot.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Statistics.PathFindingDatapoint.#ctor(System.Double,System.Double,System.Int32)">
            <summary>
            Creates a new datapoint.
            </summary>
            <param name="timestamp">The timestamp.</param>
            <param name="runTime">The runtime.</param>
            <param name="requests">The requests.</param>
        </member>
        <member name="M:RAWSimO.Core.Statistics.PathFindingDatapoint.#ctor(System.String)">
            <summary>
            Creates a new datapoint from a line serialization.
            </summary>
            <param name="line">The serialized datapoint.</param>
        </member>
        <member name="M:RAWSimO.Core.Statistics.PathFindingDatapoint.GetLine">
            <summary>
            Creates a line serialization of this datapoint.
            </summary>
            <returns>The line.</returns>
        </member>
        <member name="M:RAWSimO.Core.Statistics.PathFindingDatapoint.GetHeader">
            <summary>
            Creates a header for the line serializations.
            </summary>
            <returns>The header.</returns>
        </member>
        <member name="T:RAWSimO.Core.Statistics.StationTripDatapoint">
            <summary>
            Stores lightweight information about a completed trip to a station's queue.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Statistics.StationTripDatapoint.StationTripType">
            <summary>
            Distinguishes the different types of logged trips.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.StationTripDatapoint.StationTripType.O">
            <summary>
            A trip to an output-station.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.StationTripDatapoint.StationTripType.I">
            <summary>
            A trip to an input-station.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.StationTripDatapoint.TimeStamp">
            <summary>
            The time the trip was completed.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.StationTripDatapoint.TripTime">
            <summary>
            The time the trip took.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.StationTripDatapoint.Type">
            <summary>
            The type of the trip.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Statistics.StationTripDatapoint.#ctor(System.Double,System.Double,RAWSimO.Core.Statistics.StationTripDatapoint.StationTripType)">
            <summary>
            Creates a new datapoint.
            </summary>
            <param name="timestamp">The timestamp.</param>
            <param name="tripTime">The triptime.</param>
            <param name="type">The type of the trip.</param>
        </member>
        <member name="M:RAWSimO.Core.Statistics.StationTripDatapoint.#ctor(System.String)">
            <summary>
            Creates a new datapoint from a line serialization.
            </summary>
            <param name="line">The serialized datapoint.</param>
        </member>
        <member name="M:RAWSimO.Core.Statistics.StationTripDatapoint.GetLine">
            <summary>
            Creates a line serialization of this datapoint.
            </summary>
            <returns>The line.</returns>
        </member>
        <member name="M:RAWSimO.Core.Statistics.StationTripDatapoint.GetHeader">
            <summary>
            Creates a header for the line serializations.
            </summary>
            <returns>The header.</returns>
        </member>
        <member name="T:RAWSimO.Core.Statistics.InventoryLevelDatapoint">
            <summary>
            Constitutes one data-point storing an inventory level snapshot.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.InventoryLevelDatapoint.TimeStamp">
            <summary>
            The time stamp of this snapshot.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.InventoryLevelDatapoint.InventoryLevel">
            <summary>
            The relative level of the inventory.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.InventoryLevelDatapoint.ContainedSKUCount">
            <summary>
            The number of SKUs stored in the system.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.InventoryLevelDatapoint.InvCombinedTotal">
            <summary>
            The total number of inversions (combined score).
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.InventoryLevelDatapoint.InvCombinedRank">
            <summary>
            The aggregated rank difference of all inversions (combined score).
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.InventoryLevelDatapoint.InvCombinedAvgRank">
            <summary>
            The average rank difference of all inversions (combined score).
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.InventoryLevelDatapoint.InvSpeedTotal">
            <summary>
            The total number of inversions (speed score).
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.InventoryLevelDatapoint.InvSpeedRank">
            <summary>
            The aggregated rank difference of all inversions (speed score).
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.InventoryLevelDatapoint.InvSpeedAvgRank">
            <summary>
            The average rank difference of all inversions (speed score).
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.InventoryLevelDatapoint.InvUtilityTotal">
            <summary>
            The total number of inversions (utility score).
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.InventoryLevelDatapoint.InvUtilityRank">
            <summary>
            The aggregated rank difference of all inversions (utility score).
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.InventoryLevelDatapoint.InvUtilityAvgRank">
            <summary>
            The average rank difference of all inversions (utility score).
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Statistics.InventoryLevelDatapoint.#ctor(System.Double,System.Double,System.Int32,System.Int32,System.Int32,System.Double,System.Int32,System.Int32,System.Double,System.Int32,System.Int32,System.Double)">
            <summary>
            Creates a new datapoint.
            </summary>
            <param name="timestamp">The timestamp.</param>
            <param name="inventoryLevel">The inventory level.</param>
            <param name="containedSKUCount">The number of SKUs stored in the system.</param>
            <param name="invCombinedTotal">The total number of inversions (combined score).</param>
            <param name="invCombinedRank">The aggregated rank difference of all inversions (combined score).</param>
            <param name="invCombinedAvgRank">The average rank difference of all inversions (combined score).</param>
            <param name="invSpeedTotal">The total number of inversions (speed score).</param>
            <param name="invSpeedRank">The aggregated rank difference of all inversions (speed score).</param>
            <param name="invSpeedAvgRank">The average rank difference of all inversions (speed score).</param>
            <param name="invUtilityTotal">The total number of inversions (utility score).</param>
            <param name="invUtilityRank">The aggregated rank difference of all inversions (utility score).</param>
            <param name="invUtilityAvgRank">The average rank difference of all inversions (utility score).</param>
        </member>
        <member name="M:RAWSimO.Core.Statistics.InventoryLevelDatapoint.#ctor(System.String)">
            <summary>
            Creates a new datapoint from a line serialization.
            </summary>
            <param name="line">The serialized datapoint.</param>
        </member>
        <member name="M:RAWSimO.Core.Statistics.InventoryLevelDatapoint.GetLine">
            <summary>
            Creates a line serialization of this datapoint.
            </summary>
            <returns>The line.</returns>
        </member>
        <member name="M:RAWSimO.Core.Statistics.InventoryLevelDatapoint.GetHeader">
            <summary>
            Creates a header for the line serializations.
            </summary>
            <returns>The header.</returns>
        </member>
        <member name="T:RAWSimO.Core.Statistics.BundleOrderSituationDatapoint">
            <summary>
            Constitutes one data-point storing a current bundle / order meta info snapshot.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.BundleOrderSituationDatapoint.TimeStamp">
            <summary>
            The time stamp of this snapshot.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.BundleOrderSituationDatapoint.BacklogBundleCount">
            <summary>
            The number of bundles in backlog.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.BundleOrderSituationDatapoint.BacklogOrderCount">
            <summary>
            The number of order in backlog.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.BundleOrderSituationDatapoint.BundleThroughputAgeAvg">
            <summary>
            The average age of the bundles currently assigned to the stations regarding their throughput time.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.BundleOrderSituationDatapoint.OrderThroughputAgeAvg">
            <summary>
            The average age of the orders currently assigned to the stations regarding their throughput time.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.BundleOrderSituationDatapoint.BundleTurnoverAgeAvg">
            <summary>
            The average age of the bundles currently assigned to the stations regarding their turnover time.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.BundleOrderSituationDatapoint.OrderTurnoverAgeAvg">
            <summary>
            The average age of the orders currently assigned to the stations regarding their turnover time.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.BundleOrderSituationDatapoint.BundleFrequencyAvg">
            <summary>
            The average frequency of the bundles currently assigned to the stations.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.BundleOrderSituationDatapoint.OrderFrequencyAvg">
            <summary>
            The average frequency of all lines of all orders currently assigned to the stations.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Statistics.BundleOrderSituationDatapoint.#ctor(System.Double,System.Int32,System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a new datapoint.
            </summary>
            <param name="timestamp">The timestamp.</param>
            <param name="backlogBundleCount">The number of backlog bundles.</param>
            <param name="backlogOrderCount">The number of backlog orders.</param>
            <param name="bundleThroughputAge">The average age of the bundles currently assigned to the stations regarding their throughput time.</param>
            <param name="orderThroughputAge">The average age of the orders currently assigned to the stations regarding their throughput time.</param>
            <param name="bundleTurnoverAge">The average age of the bundles currently assigned to the stations regarding their turnover time</param>
            <param name="orderTurnoverAge">The average age of the orders currently assigned to the stations regarding their turnover time</param>
            <param name="bundleFrequency">The average frequency of the bundles currently assigned to the stations.</param>
            <param name="orderFrequency">The average frequency of all lines of all orders currently assigned to the stations.</param>
        </member>
        <member name="M:RAWSimO.Core.Statistics.BundleOrderSituationDatapoint.#ctor(System.String)">
            <summary>
            Creates a new datapoint from a line serialization.
            </summary>
            <param name="line">The serialized datapoint.</param>
        </member>
        <member name="M:RAWSimO.Core.Statistics.BundleOrderSituationDatapoint.GetLine">
            <summary>
            Creates a line serialization of this datapoint.
            </summary>
            <returns>The line.</returns>
        </member>
        <member name="M:RAWSimO.Core.Statistics.BundleOrderSituationDatapoint.GetHeader">
            <summary>
            Creates a header for the line serializations.
            </summary>
            <returns>The header.</returns>
        </member>
        <member name="T:RAWSimO.Core.Statistics.StationDataPoint">
            <summary>
            Constitutes one data-point storing a backlog 
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.StationDataPoint.TimeStamp">
            <summary>
            The time stamp of this snapshot.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.StationDataPoint.PodsHandledAtIStations">
            <summary>
            The number of pods handled at input-stations.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.StationDataPoint.PodsHandledAtOStations">
            <summary>
            The number of pods handled at output-stations.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.StationDataPoint.ActiveIStations">
            <summary>
            The number of input stations active.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.StationDataPoint.ActiveOStations">
            <summary>
            The number of output stations active.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.StationDataPoint.IStationIdleTimes">
            <summary>
            The idle-time per input station at this snapshot.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.StationDataPoint.OStationIdleTimes">
            <summary>
            The idle-time per output station at this snapshot.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.StationDataPoint.IStationActiveTimes">
            <summary>
            The up-time per input station at this snapshot.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.StationDataPoint.OStationActiveTimes">
            <summary>
            The up-time per output station at this snapshot.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.StationDataPoint.IStationRequests">
            <summary>
            The number of requests per input station at this snapshot.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.StationDataPoint.OStationRequests">
            <summary>
            The number of requests per output station at this snapshot.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.StationDataPoint.IStationBundleBacklog">
            <summary>
            The number of bundles that have not been stored yet per input station at this snapshot.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.StationDataPoint.OStationItemBacklog">
            <summary>
            The number of items that have not been picked yet per output station at this snapshot.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.StationDataPoint.IStationAssignedBots">
            <summary>
            The number of assigned bots per input station at this snapshot.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.StationDataPoint.OStationAssignedBots">
            <summary>
            The number of assigned bots per output station at this snapshot.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.StationDataPoint.IStationPodsHandled">
            <summary>
            The number of pods handled per input station at this snapshot.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.StationDataPoint.OStationPodsHandled">
            <summary>
            The number of pods handled per output station at this snapshot.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.StationDataPoint.IStationBundlesStored">
            <summary>
            The number of bundles stored per input station at this snapshot.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.StationDataPoint.OStationItemsPicked">
            <summary>
            The number of items picked per output station at this snapshot.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Statistics.StationDataPoint.#ctor(System.Double,System.Int32,System.Int32,System.Int32,System.Int32,System.Tuple{System.Int32,System.Double}[],System.Tuple{System.Int32,System.Double}[],System.Tuple{System.Int32,System.Double}[],System.Tuple{System.Int32,System.Double}[],System.Tuple{System.Int32,System.Int32}[],System.Tuple{System.Int32,System.Int32}[],System.Tuple{System.Int32,System.Int32}[],System.Tuple{System.Int32,System.Int32}[],System.Tuple{System.Int32,System.Int32}[],System.Tuple{System.Int32,System.Int32}[],System.Tuple{System.Int32,System.Int32}[],System.Tuple{System.Int32,System.Int32}[],System.Tuple{System.Int32,System.Int32}[],System.Tuple{System.Int32,System.Int32}[])">
            <summary>
            Creates a new datapoint.
            </summary>
            <param name="timestamp">The timestamp.</param>
            <param name="podsHandledAtIStations">Pods handled at input stations.</param>
            <param name="podsHandledAtOStations">Pods handled at output stations.</param>
            <param name="activeIStations">The number of active input-stations.</param>
            <param name="activeOStations">The number of active output-stations.</param>
            <param name="iStationIdleTimes">The idle-time per input station at this snapshot.</param>
            <param name="oStationIdleTimes">The idle-time per output station at this snapshot.</param>
            <param name="iStationActiveTimes">The up-time per input station at this snapshot.</param>
            <param name="oStationActiveTimes">The up-time per output station at this snapshot.</param>
            <param name="iStationRequests">The number of requests per input station at this snapshot.</param>
            <param name="oStationRequests">The number of requests per output station at this snapshot.</param>
            <param name="iStationBundles">The number of bundles that have not been stored yet per input station at this snapshot.</param>
            <param name="oStationItems">The number of items that have not been picked yet per output station at this snapshot.</param>
            <param name="iStationBots">The number of assigned bots per input station at this snapshot.</param>
            <param name="oStationBots">The number of assigned bots per output station at this snapshot.</param>
            <param name="iStationPodsHandled">The number of pods handled per input station at this snapshot.</param>
            <param name="oStationPodsHandled">The number of bundles stored per input station at this snapshot.</param>
            <param name="iStationBundlesStored">The number of bundles stored per input station at this snapshot.</param>
            <param name="oStationItemsPicked">The number of items picked per output station at this snapshot.</param>
        </member>
        <member name="M:RAWSimO.Core.Statistics.StationDataPoint.#ctor(System.String)">
            <summary>
            Creates a new datapoint from a line serialization.
            </summary>
            <param name="line">The serialized datapoint.</param>
        </member>
        <member name="M:RAWSimO.Core.Statistics.StationDataPoint.GetLine">
            <summary>
            Creates a line serialization of this datapoint.
            </summary>
            <returns>The line.</returns>
        </member>
        <member name="M:RAWSimO.Core.Statistics.StationDataPoint.GetHeader">
            <summary>
            Creates a header for the line serializations.
            </summary>
            <returns>The header.</returns>
        </member>
        <member name="T:RAWSimO.Core.Statistics.PerformanceDatapoint">
            <summary>
            Constitutes one data-point storing a performance snapshot.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.PerformanceDatapoint.TimeStamp">
            <summary>
            The time stamp of this snapshot.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.PerformanceDatapoint.MemoryUsage">
            <summary>
            The memory used in megabyte.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.PerformanceDatapoint.RealTime">
            <summary>
            The consumed real-time so far in seconds.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.PerformanceDatapoint.OverallControllerTimes">
            <summary>
            The time spent for the different controllers at this snapshot.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Statistics.PerformanceDatapoint.#ctor(System.Double,System.Double,System.Double,System.Tuple{System.String,System.Double}[])">
            <summary>
            Creates a new datapoint.
            </summary>
            <param name="timestamp">The timestamp.</param>
            <param name="memoryUsage">The memory used in megabyte</param>
            <param name="realTime">The real-time consumed so far in seconds.</param>
            <param name="overallControllerTimes">The time spent for the different controllers at this snapshot.</param>
        </member>
        <member name="M:RAWSimO.Core.Statistics.PerformanceDatapoint.#ctor(System.String)">
            <summary>
            Creates a new datapoint from a line serialization.
            </summary>
            <param name="line">The serialized datapoint.</param>
        </member>
        <member name="M:RAWSimO.Core.Statistics.PerformanceDatapoint.GetLine">
            <summary>
            Creates a line serialization of this datapoint.
            </summary>
            <returns>The line.</returns>
        </member>
        <member name="M:RAWSimO.Core.Statistics.PerformanceDatapoint.GetHeader">
            <summary>
            Creates a header for the line serializations.
            </summary>
            <returns>The header.</returns>
        </member>
        <member name="T:RAWSimO.Core.Statistics.HeatDataType">
            <summary>
            Enumerates all available 'core' heat data types.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.HeatDataType.PolledLocation">
            <summary>
            One data point stores the position of one bot at a certain timepoint.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.HeatDataType.TimeIndependentTripData">
            <summary>
            One data point stores information about trips of the robots in a time-independent way.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.HeatDataType.StorageLocationInfo">
            <summary>
            One data point stores information about the storage location at the given time.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Statistics.HeatDatapoint">
            <summary>
            The core class for heatmap related datapoints.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.HeatDatapoint.X">
            <summary>
            The x-value of this location.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.HeatDatapoint.Y">
            <summary>
            The y-value of this location.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.HeatDatapoint.Tier">
            <summary>
            The tier on which the datapoint was measured.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Statistics.HeatDatapoint.GetValue(System.Int32)">
            <summary>
            Returns the value associated with this data point.
            </summary>
            <param name="dataIndex">The index of the data to get from the datapoint.</param>
            <returns>The value associated with this data point.</returns>
        </member>
        <member name="T:RAWSimO.Core.Statistics.LocationDatapoint">
            <summary>
            Constitutes one data-point storing a location snapshot.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Statistics.LocationDatapoint.LocationDataType">
            <summary>
            Distinguishes all location polling data-types.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.LocationDatapoint.LocationDataType.Seen">
            <summary>
            Simply expresses that a robot was seen at the given coordinate to the given time.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.LocationDatapoint.TimeStamp">
            <summary>
            The timestamp of this snapshot.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.LocationDatapoint.BotTask">
            <summary>
            The state the bot was in at the time of the snapshot.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Statistics.LocationDatapoint.GetCSVHeader">
            <summary>
            Returns a header that is used for the corresponding CSV file storing the data.
            </summary>
            <returns>A CSV header.</returns>
        </member>
        <member name="M:RAWSimO.Core.Statistics.LocationDatapoint.ToCSV">
            <summary>
            Returns a CSV string identifying this data-point.
            </summary>
            <returns>A CSV string.</returns>
        </member>
        <member name="M:RAWSimO.Core.Statistics.LocationDatapoint.FromCSV(System.String)">
            <summary>
            Parses the data-point from a CSV-file line.
            </summary>
            <param name="csvLine">The line from the CSV file.</param>
            <returns>The data-point read from the line.</returns>
        </member>
        <member name="M:RAWSimO.Core.Statistics.LocationDatapoint.GetValue(System.Int32)">
            <summary>
            Returns the value associated with this data point.
            </summary>
            <param name="dataIndex">The index of the data to get from the datapoint.</param>
            <returns>The value associated with this data point.</returns>
        </member>
        <member name="T:RAWSimO.Core.Statistics.TimeIndependentTripDataPoint">
            <summary>
            Constitutes one data-point storing information about the visits of a certain location in the system (e.g. a waypoint).
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Statistics.TimeIndependentTripDataPoint.TripDataType">
            <summary>
            Distinguishes the different data-types exposed by this datapoint.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.TimeIndependentTripDataPoint.TripDataType.Overall">
            <summary>
            The number of times this location was visited, i.e. the number of times this location was the start of a trip.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.TimeIndependentTripDataPoint.TripDataType.FromOStation">
            <summary>
            The number of trips inbound from an output-station.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.TimeIndependentTripDataPoint.TripDataType.ToOStation">
            <summary>
            The number of trips outbound to an output-station.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.TimeIndependentTripDataPoint.TripDataType.FromIStation">
            <summary>
            The number of trips inbound from an input-station.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.TimeIndependentTripDataPoint.TripDataType.ToIStation">
            <summary>
            The number of trips outbound to an input-station.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.TimeIndependentTripDataPoint.Overall">
            <summary>
            The number of times this location was visited.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.TimeIndependentTripDataPoint.FromOStation">
            <summary>
            The number of trips inbound from an output-station.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.TimeIndependentTripDataPoint.ToOStation">
            <summary>
            The number of trips outbound to an output-station.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.TimeIndependentTripDataPoint.FromIStation">
            <summary>
            The number of trips inbound from an input-station.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.TimeIndependentTripDataPoint.ToIStation">
            <summary>
            The number of trips outbound to an input-station.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Statistics.TimeIndependentTripDataPoint.GetCSVHeader">
            <summary>
            Returns a header that is used for the corresponding CSV file storing the data.
            </summary>
            <returns>A CSV header.</returns>
        </member>
        <member name="M:RAWSimO.Core.Statistics.TimeIndependentTripDataPoint.ToCSV">
            <summary>
            Returns a CSV string identifying this data-point.
            </summary>
            <returns>A CSV string.</returns>
        </member>
        <member name="M:RAWSimO.Core.Statistics.TimeIndependentTripDataPoint.FromCSV(System.String)">
            <summary>
            Parses the data-point from a CSV-file line.
            </summary>
            <param name="csvLine">The line from the CSV file.</param>
            <returns>The data-point read from the line.</returns>
        </member>
        <member name="M:RAWSimO.Core.Statistics.TimeIndependentTripDataPoint.GetValue(System.Int32)">
            <summary>
            Returns the value associated with this data point.
            </summary>
            <param name="dataIndex">The index of the data to get from the datapoint.</param>
            <returns>The value associated with this data point.</returns>
        </member>
        <member name="T:RAWSimO.Core.Statistics.StorageLocationInfoDatapoint">
            <summary>
            Constitutes one data-point storing information about the visits of a certain location in the system (e.g. a waypoint).
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Statistics.StorageLocationInfoDatapoint.StorageLocationInfoType">
            <summary>
            Distinguishes the different data-types exposed by this datapoint.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.StorageLocationInfoDatapoint.StorageLocationInfoType.Speed">
            <summary>
            The aggregated frequency of the product units contained in the pod stored at the storage location.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.StorageLocationInfoDatapoint.StorageLocationInfoType.Utility">
            <summary>
            The number of potential picks offered by the pod stored at the storage location.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.StorageLocationInfoDatapoint.StorageLocationInfoType.Combined">
            <summary>
            The combined speed and utility of a pod stored at the storage location.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.StorageLocationInfoDatapoint.TimeStamp">
            <summary>
            The timestamp of the datapoint.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.StorageLocationInfoDatapoint.Speed">
            <summary>
            The aggregated frequency of the product units contained in the pod stored at the storage location.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.StorageLocationInfoDatapoint.Utility">
            <summary>
            The number of potential picks offered by the pod stored at the storage location.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.StorageLocationInfoDatapoint.Combined">
            <summary>
            The combined speed and utility of a pod stored at the storage location.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Statistics.StorageLocationInfoDatapoint.GetCSVHeader">
            <summary>
            Returns a header that is used for the corresponding CSV file storing the data.
            </summary>
            <returns>A CSV header.</returns>
        </member>
        <member name="M:RAWSimO.Core.Statistics.StorageLocationInfoDatapoint.ToCSV">
            <summary>
            Returns a CSV string identifying this data-point.
            </summary>
            <returns>A CSV string.</returns>
        </member>
        <member name="M:RAWSimO.Core.Statistics.StorageLocationInfoDatapoint.FromCSV(System.String)">
            <summary>
            Parses the data-point from a CSV-file line.
            </summary>
            <param name="csvLine">The line from the CSV file.</param>
            <returns>The data-point read from the line.</returns>
        </member>
        <member name="M:RAWSimO.Core.Statistics.StorageLocationInfoDatapoint.GetValue(System.Int32)">
            <summary>
            Returns the value associated with this data point.
            </summary>
            <param name="dataIndex">The index of the data to get from the datapoint.</param>
            <returns>The value associated with this data point.</returns>
        </member>
        <member name="T:RAWSimO.Core.Statistics.ElementMetaInfoTracker">
            <summary>
            Tracks which pods contain which items.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Statistics.ElementMetaInfoTracker.#ctor(RAWSimO.Core.Instance)">
            <summary>
            Creates a new instance of this tracker.
            </summary>
            <param name="instance">The instance to track.</param>
        </member>
        <member name="F:RAWSimO.Core.Statistics.ElementMetaInfoTracker._instance">
            <summary>
            The instance that is being tracked.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Statistics.ElementMetaInfoTracker.StorageLocationsOrdered">
            <summary>
            All storage locations ordered by their prominence.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.ElementMetaInfoTracker._storageLocationsPerRank">
            <summary>
            All storage locations per rank.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.ElementMetaInfoTracker._storageLocationIndeces">
            <summary>
            The index values of the storage locations for fast access.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.ElementMetaInfoTracker._storageLocationRanks">
            <summary>
            The ranks of the different storage locations.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Statistics.ElementMetaInfoTracker.StorageLocationRankMax">
            <summary>
            The maximal storage location rank.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.ElementMetaInfoTracker._storageLocationProminence">
            <summary>
            The prominence values of all storage locations for quick access.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.ElementMetaInfoTracker._podsContainingItems">
            <summary>
            Stores all pods containing the respective item.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.ElementMetaInfoTracker._podsAvailableItems">
            <summary>
            Stores all pods having the respective item available.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.ElementMetaInfoTracker._podUtility">
            <summary>
            Utility scores of all pods.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.ElementMetaInfoTracker._podUtilityMaxPod">
            <summary>
            The pod that currently has the maximal utility value.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Statistics.ElementMetaInfoTracker.PodUtilityMax">
            <summary>
            The current maximum pod utility.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.ElementMetaInfoTracker._podSpeed">
            <summary>
            Speed scores of all pods.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.ElementMetaInfoTracker._podSpeedMaxPod">
            <summary>
            The pod that currently has the maximal speed value.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Statistics.ElementMetaInfoTracker.PodSpeedMax">
            <summary>
            The current maximum pod speed.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Statistics.ElementMetaInfoTracker.EnsureInit">
            <summary>
            Initializes this tracker.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Statistics.ElementMetaInfoTracker.GetPodsContaining(RAWSimO.Core.Items.ItemDescription)">
            <summary>
            Returns all pods containing the given item.
            </summary>
            <param name="item">The item.</param>
            <returns>All pods containing the item.</returns>
        </member>
        <member name="M:RAWSimO.Core.Statistics.ElementMetaInfoTracker.GetPodsOffering(RAWSimO.Core.Items.ItemDescription)">
            <summary>
            Returns all pods offering the given item (having at least one available).
            </summary>
            <param name="item">The item.</param>
            <returns>All pods offering the item.</returns>
        </member>
        <member name="M:RAWSimO.Core.Statistics.ElementMetaInfoTracker.GetStorageLocationIndex(RAWSimO.Core.Waypoints.Waypoint)">
            <summary>
            Returns the prominence index of the given storage location.
            </summary>
            <param name="waypoint">The storage location to lookup.</param>
            <returns>The index of the storage prominence location.</returns>
        </member>
        <member name="M:RAWSimO.Core.Statistics.ElementMetaInfoTracker.GetStorageLocationRank(RAWSimO.Core.Waypoints.Waypoint)">
            <summary>
            Returns the prominence rank of the given storage location.
            </summary>
            <param name="waypoint">The storage location.</param>
            <returns>The prominence rank of the storage location.</returns>
        </member>
        <member name="M:RAWSimO.Core.Statistics.ElementMetaInfoTracker.GetStorageLocationsOfRank(System.Int32)">
            <summary>
            Returns all storage locations of the given rank.
            </summary>
            <param name="rank">The rank to retrieve.</param>
            <returns>All storage locations of the given rank. Or an empty enumeration if no storage locations of the rank are existing.</returns>
        </member>
        <member name="M:RAWSimO.Core.Statistics.ElementMetaInfoTracker.GetPodUtility(RAWSimO.Core.Elements.Pod)">
            <summary>
            Returns the current utility value for the given pod.
            </summary>
            <param name="pod">The pod.</param>
            <returns>The utility of the pod.</returns>
        </member>
        <member name="M:RAWSimO.Core.Statistics.ElementMetaInfoTracker.GetPodSpeed(RAWSimO.Core.Elements.Pod)">
            <summary>
            Returns the current speed value for the given pod.
            </summary>
            <param name="pod">The pod.</param>
            <returns>The speed of the pod.</returns>
        </member>
        <member name="M:RAWSimO.Core.Statistics.ElementMetaInfoTracker.GetPodCombinedScore(RAWSimO.Core.Elements.Pod,System.Double,System.Double)">
            <summary>
            Returns the current combined score value for the given pod.
            </summary>
            <param name="pod">The pod.</param>
            <param name="weightSpeed">The weight of the speed value.</param>
            <param name="weightUtility">The weight of the utility value.</param>
            <returns>The combined speed and utility score according to the given weights. This always is a value between 0 and 1.</returns>
        </member>
        <member name="M:RAWSimO.Core.Statistics.ElementMetaInfoTracker.CountInversions(System.Int32@,System.Int32@,System.Double@,System.Int32@,System.Int32@,System.Double@,System.Int32@,System.Int32@,System.Double@)">
            <summary>
            Counts the number of inversions for the pods currently stored at the storage locations.
            </summary>
            <param name="invCombinedTotal">Number of total inversions according to combined score.</param>
            <param name="invCombinedRank">Total rank offsets of all inversions according to combined score.</param>
            <param name="invCombinedAvgRank">Average rank offset of all inversions according to combined score.</param>
            <param name="invSpeedTotal">Number of total inversions according to speed score.</param>
            <param name="invSpeedRank">Total rank offsets of all inversions according to speed score.</param>
            <param name="invSpeedAvgRank">Average rank offset of all inversions according to speed score.</param>
            <param name="invUtilityTotal">Number of total inversions according to utility score.</param>
            <param name="invUtilityRank">Total rank offsets of all inversions according to utility score.</param>
            <param name="invUtilityAvgRank">Average rank offset of all inversions according to utility score.</param>
        </member>
        <member name="T:RAWSimO.Core.Statistics.FrequencyTracker">
            <summary>
            Tracks the frequency information of all item-descriptions of the instance.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Statistics.FrequencyTracker.#ctor(RAWSimO.Core.Instance)">
            <summary>
            Creates a new frequency tracker object for the given instance.
            </summary>
            <param name="instance">The instance the tracker belongs to.</param>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FrequencyTracker._instance">
            <summary>
            The instance this tracker belongs to.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FrequencyTracker._combinedTracking">
            <summary>
            Indicates whether combined frequencies will be tracked at all.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FrequencyTracker._initiated">
            <summary>
            Indicates whether this tracker was initiated.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Statistics.FrequencyTracker.NewOrderCallback(RAWSimO.Core.Items.Order)">
            <summary>
            The method that is called everytime a new order is submitted.
            </summary>
            <param name="order">The order that was just submitted to the system.</param>
        </member>
        <member name="M:RAWSimO.Core.Statistics.FrequencyTracker.Reset">
            <summary>
            Resets the frequency information. (this method does nothing for now, because resetting the measured frequencies seems inappropriate)
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FrequencyTracker._maxItemOrdered">
            <summary>
            The number of times the item with the maximal order count was ordered.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FrequencyTracker._itemOrderCount">
            <summary>
            The number of times a specific item-type was ordered.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FrequencyTracker._modifiableOrderCount">
            <summary>
            The number of times a specific item-type was ordered. This is the custom version which can be modified by control mechanisms.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FrequencyTracker._itemFrequency">
            <summary>
            The frequencies of all items.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FrequencyTracker._statMaxCombinedItemsOrdered">
            <summary>
            The number of times the tuple of items with the maximal order count was ordered together.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FrequencyTracker._combinedItemOrderCount">
            <summary>
            The number of times a tuple of items was ordered.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.FrequencyTracker._combinedItemFrequencies">
            <summary>
            The correlations between the different item-types.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Statistics.FrequencyTracker.GetStaticFrequency(RAWSimO.Core.Items.ItemDescription)">
            <summary>
            Returns the current static frequency of the item. This somewhat reflects the probability for generating the item in form of a new bundle or as a line of an order.
            Note: Combined item frequencies and the currently used item type have to be taken into account.
            </summary>
            <param name="item">The item to lookup.</param>
            <returns>The frequency of the item.</returns>
        </member>
        <member name="M:RAWSimO.Core.Statistics.FrequencyTracker.GetMeasuredFrequency(RAWSimO.Core.Items.ItemDescription)">
            <summary>
            Returns the measured frequency of the given item type. This value is updated throughout the simulation.
            </summary>
            <param name="item">The item type to lookup.</param>
            <returns>The frequency of the item. This is a value between 0 and 1.</returns>
        </member>
        <member name="M:RAWSimO.Core.Statistics.FrequencyTracker.GetMeasuredFrequency(RAWSimO.Core.Items.ItemDescription,RAWSimO.Core.Items.ItemDescription)">
            <summary>
            Returns the measured combined frequency of the given item type tuple. This value is updated throughout the simulation.
            </summary>
            <param name="item1">The first part of the item tuple.</param>
            <param name="item2">The second part of the item tuple.</param>
            <returns>The combined frequency of both items. This is a value between 0 and 1.</returns>
        </member>
        <member name="M:RAWSimO.Core.Statistics.FrequencyTracker.GetModifiableOrderCount(RAWSimO.Core.Items.ItemDescription)">
            <summary>
            Returns the order count of the given item type. This value is updated throughout the simulation but can be reset if desired.
            </summary>
            <param name="item">The item to lookup.</param>
            <returns>The number of times the given item was ordered.</returns>
        </member>
        <member name="M:RAWSimO.Core.Statistics.FrequencyTracker.ResetModifiableOrderCount">
            <summary>
            Resets the modifiable order count.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Statistics.SimulationObserver">
            <summary>
            Offers the observation of different statistics.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.SimulationObserver.STEP_LENGTH_DISTANCE_TRAVELED">
            <summary>
            States the difference in simulation time between two datapoints stored by this observer.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.SimulationObserver.STEP_LENGTH_POSITION_POLL">
            <summary>
            States the difference in simulation time between two position polls.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.SimulationObserver.STEP_LENGTH_POSITION_POLL_INTENSE">
            <summary>
            States the difference in simulation time between two position polls when in intense measuring mode.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.SimulationObserver.STEP_LENGTH_STORAGE_LOCATION_INFO_POLL">
            <summary>
            States the difference in simulation time between two pod info polls.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.SimulationObserver.STEP_LENGTH_MEMORY_POLL">
            <summary>
            States the difference in simulation time between two memory polls.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.SimulationObserver.STEP_LENGTH_BOT_POLL">
            <summary>
            States the difference in simulation time between two bot info polls.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.SimulationObserver.STEP_LENGTH_INVENTORY_POLL">
            <summary>
            States the difference in simulation time between two inventory level polls.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.SimulationObserver.STEP_LENGTH_BUNDLE_ORDER_SITUATION_POLL">
            <summary>
            States the difference in simulation time between two bundle / order situation polls.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.SimulationObserver.STEP_LENGTH_POD_HANDLING_POLL">
            <summary>
            States the difference in simulation time between two pod handling polls.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.SimulationObserver.STEP_LENGTH_WELL_SORTEDNESS_POLL">
            <summary>
            States the difference in simulation time between two well sortedness polls.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Statistics.SimulationObserver.#ctor(RAWSimO.Core.Instance)">
            <summary>
            Creates a new object of this instance.
            </summary>
            <param name="instance">The instance that is observed.</param>
        </member>
        <member name="F:RAWSimO.Core.Statistics.SimulationObserver._instance">
            <summary>
            The instance that is observed.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Statistics.SimulationObserver.Reset">
            <summary>
            Resets this observer.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Statistics.SimulationObserver.FlushData">
            <summary>
            Flushes all the data collected until now.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.SimulationObserver._nextSnapshotDistanceTraveled">
            <summary>
            The simulation time of the next snapshot.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.SimulationObserver._lastDistanceTraveled">
            <summary>
            The overall traveled distance of the last snapshot.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.SimulationObserver._logDistanceTraveled">
            <summary>
            Log of the traveled distances over time.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Statistics.SimulationObserver.FlushTraveledDistance">
            <summary>
            Flushes the monitored traveled distance data to the data-file.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.SimulationObserver._nextSnapshotPerformancePolling">
            <summary>
            The simulation time of the next performance snapshot.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.SimulationObserver._logPerformancePolling">
            <summary>
            Log of the performance polls.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Statistics.SimulationObserver.FlushPerformancePolls">
            <summary>
            Flushes the monitored performance polls to the data-file.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.SimulationObserver._nextSnapshotLocationPolling">
            <summary>
            The simulation time of the next snapshot.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.SimulationObserver._logLocationPolling">
            <summary>
            Log of the polled positions over time.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.SimulationObserver._nextSnapshotStorageLocationInfoPolling">
            <summary>
            The simulation time of the next snapshot.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.SimulationObserver._logStorageLocationInfoPolling">
            <summary>
            Log of the polled storage location info over time.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.SimulationObserver._nextSnapshotBotInfoPolling">
            <summary>
            The simulation time of the next snapshot.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.SimulationObserver._logBotInfoPolling">
            <summary>
            Log of the polled bot information over time.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.SimulationObserver._nextSnapshotInventoryLevelPolling">
            <summary>
            The simulation time of the next snapshot.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.SimulationObserver._maxInventoryCapacity">
            <summary>
            The maximal capacity of the inventory storage.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.SimulationObserver._logInventoryLevelPolling">
            <summary>
            Log of the polled inventory over time.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.SimulationObserver._nextSnapshotBundleOrderSituationPolling">
            <summary>
            The simulation time of the next snapshot.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.SimulationObserver._logBundleOrderSituationPolling">
            <summary>
            Log of the polled backlog level over time.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Statistics.SimulationObserver.BundleOrderSituationLog">
            <summary>
            Log of the polled backlog level over time.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.SimulationObserver._nextSnapshotPodHandlingPolling">
            <summary>
            The simulation time of the next snapshot.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.SimulationObserver._logPodHandlingPolling">
            <summary>
            Log of the polled pod handling over time.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Statistics.SimulationObserver.PodHandlingLog">
            <summary>
            Log of the polled pod handling over time.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.SimulationObserver._nextSnapshotWellSortednessPolling">
            <summary>
            The simulation time of the next snapshot.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.SimulationObserver._wellSortednessLastOStationTripCount">
            <summary>
            The the count of trips to an output station during the last well-sortedness measurement.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.SimulationObserver._logWellSortednessPolling">
            <summary>
            Log of the polled well sortedness over time.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Statistics.SimulationObserver.WellSortednessLog">
            <summary>
            Log of the polled well sortedness over time.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.SimulationObserver._timingDecisionsOverall">
            <summary>
            The overall time spent deciding / planning.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.SimulationObserver._timingPathPlanningOverall">
            <summary>
            The overall time spent in computing paths.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.SimulationObserver._timingPathPlanningCount">
            <summary>
            The number of times path planning was called for a decision.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.SimulationObserver._timingTaskAllocationOverall">
            <summary>
            The overall time spent in deciding the tasks for the bots.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.SimulationObserver._timingTaskAllocationCount">
            <summary>
            The number of times task allocation was called for a decision.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.SimulationObserver._timingItemStorageOverall">
            <summary>
            The overall time spent in deciding the pod for an item.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.SimulationObserver._timingItemStorageCount">
            <summary>
            The number of times item storage assignment was called for a decision.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.SimulationObserver._timingPodStorageOverall">
            <summary>
            The overall time spent in deciding the position for a pod.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.SimulationObserver._timingPodStorageCount">
            <summary>
            The number of times pod storage assignment was called for a decision.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.SimulationObserver._timingRepositioningOverall">
            <summary>
            The overall time spent in deciding about relocations.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.SimulationObserver._timingRepositioningCount">
            <summary>
            The number of times the repositioning manager was called for a decision.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.SimulationObserver._timingReplenishmentBatchingOverall">
            <summary>
            The overall time spent in deciding the station for an item-bundle.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.SimulationObserver._timingReplenishmentBatchingCount">
            <summary>
            The number of times replenishment batching was called for a decision.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.SimulationObserver._timingOrderBatchingOverall">
            <summary>
            The overall time spent in deciding the station for an order.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Statistics.SimulationObserver._timingOrderBatchingCount">
            <summary>
            The number of times order batching was called for a decision.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Statistics.SimulationObserver.TimingDecisionsOverall">
            <summary>
            The overall time spent deciding / planning.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Statistics.SimulationObserver.TimingPathPlanningOverall">
            <summary>
            The overall time spent in path planning.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Statistics.SimulationObserver.TimingPathPlanningAverage">
            <summary>
            The average time consumed for making a single decision.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Statistics.SimulationObserver.TimingPathPlanningDecisionCount">
            <summary>
            The number of decisions done for path planning.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Statistics.SimulationObserver.TimingTaskAllocationOverall">
            <summary>
            The overall time spent in task allocation.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Statistics.SimulationObserver.TimingTaskAllocationAverage">
            <summary>
            The average time consumed for making a single decision.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Statistics.SimulationObserver.TimingTaskAllocationDecisionCount">
            <summary>
            The number of decisions done for task allocation.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Statistics.SimulationObserver.TimingItemStorageOverall">
            <summary>
            The overall time spent in item storage.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Statistics.SimulationObserver.TimingItemStorageAverage">
            <summary>
            The average time consumed for making a single decision.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Statistics.SimulationObserver.TimingItemStorageDecisionCount">
            <summary>
            The number of decisions done for item storage.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Statistics.SimulationObserver.TimingPodStorageOverall">
            <summary>
            The overall time spent in pod storage.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Statistics.SimulationObserver.TimingPodStorageAverage">
            <summary>
            The average time consumed for making a single decision.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Statistics.SimulationObserver.TimingPodStorageDecisionCount">
            <summary>
            The number of decisions done for pod storage.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Statistics.SimulationObserver.TimingRepositioningOverall">
            <summary>
            The overall time spent in repositioning.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Statistics.SimulationObserver.TimingRepositioningAverage">
            <summary>
            The average time consumed for making a single decision.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Statistics.SimulationObserver.TimingRepositioningDecisionCount">
            <summary>
            The number of decisions done for repositioning.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Statistics.SimulationObserver.TimingReplenishmentBatchingOverall">
            <summary>
            The overall time spent in replenishment batching.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Statistics.SimulationObserver.TimingReplenishmentBatchingAverage">
            <summary>
            The average time consumed for making a single decision.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Statistics.SimulationObserver.TimingReplenishmentBatchingDecisionCount">
            <summary>
            The number of decisions done for replenishment batching.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Statistics.SimulationObserver.TimingOrderBatchingOverall">
            <summary>
            The overall time spent in order batching.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Statistics.SimulationObserver.TimingOrderBatchingAverage">
            <summary>
            The average time consumed for making a single decision.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Statistics.SimulationObserver.TimingOrderBatchingDecisionCount">
            <summary>
            The number of decisions done for order batching.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Statistics.SimulationObserver.TimePathPlanning(System.Double)">
            <summary>
            Signals this monitor that a path planning decision just happened and logs the time it took to decide in s.
            </summary>
            <param name="time">The time it took to determine the path in seconds.</param>
        </member>
        <member name="M:RAWSimO.Core.Statistics.SimulationObserver.TimeTaskAllocation(System.Double)">
            <summary>
            Signals this monitor that a task allocation decision just happened and logs the time it took do decide in s.
            </summary>
            <param name="time">The time it took to determine the task for the bot.</param>
        </member>
        <member name="M:RAWSimO.Core.Statistics.SimulationObserver.TimeItemStorage(System.Double)">
            <summary>
            Signals this monitor that a item storage assignment decision just happened and logs the time it took do decide in s.
            </summary>
            <param name="time">The time it took to determine the pod for the item-bundle.</param>
        </member>
        <member name="M:RAWSimO.Core.Statistics.SimulationObserver.TimePodStorage(System.Double)">
            <summary>
            Signals this monitor that a pod storage assignment decision just happened and logs the time it took do decide in s.
            </summary>
            <param name="time">The time it took to determine the position for the pod.</param>
        </member>
        <member name="M:RAWSimO.Core.Statistics.SimulationObserver.TimeRepositioning(System.Double)">
            <summary>
            Signals this monitor that a repositioning decision just happened and logs the time it took do decide in s.
            </summary>
            <param name="time">The time it took to determine a repositioning move.</param>
        </member>
        <member name="M:RAWSimO.Core.Statistics.SimulationObserver.TimeReplenishmentBatching(System.Double)">
            <summary>
            Signals this monitor that a replenishment batching decision just happened and logs the time it took do decide in s.
            </summary>
            <param name="time">The time it took to determine the input-station for the item-bundle.</param>
        </member>
        <member name="M:RAWSimO.Core.Statistics.SimulationObserver.TimeOrderBatching(System.Double)">
            <summary>
            Signals this monitor that a order batching decision just happened and logs the time it took do decide in s.
            </summary>
            <param name="time">The time it took to determine the output-station for the order.</param>
        </member>
        <member name="M:RAWSimO.Core.Statistics.SimulationObserver.GetNextEventTime(System.Double)">
            <summary>
            The next event when this element has to be updated.
            </summary>
            <param name="currentTime">The current time of the simulation.</param>
            <returns>The next time this element has to be updated.</returns>
        </member>
        <member name="M:RAWSimO.Core.Statistics.SimulationObserver.Update(System.Double,System.Double)">
            <summary>
            Updates the element to the specified time.
            </summary>
            <param name="lastTime">The time before the update.</param>
            <param name="currentTime">The time to update to.</param>
        </member>
        <member name="T:RAWSimO.Core.Statistics.StatisticsHelper">
            <summary>
            Supplies some helping methods for the statistics.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Statistics.StatisticsHelper.UpdateAvgVarData(System.Int32@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double)">
            <summary>
            Updates certain statistical values.
            </summary>
            <param name="count">The number of datapoints.</param>
            <param name="mean">The current average.</param>
            <param name="variance">The variance within the values.</param>
            <param name="min">The min value.</param>
            <param name="max">The max value.</param>
            <param name="sum">The sum of the values.</param>
            <param name="newValue">The new values / datapoint.</param>
        </member>
        <member name="M:RAWSimO.Core.Statistics.StatisticsHelper.GetLowerQuartile(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Gets the lower quartile value of a list of values.
            </summary>
            <param name="values">The list of values.</param>
            <returns>The lower quartile.</returns>
        </member>
        <member name="M:RAWSimO.Core.Statistics.StatisticsHelper.GetMedian(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Gets the median value of a list of values.
            </summary>
            <param name="values">The list of values.</param>
            <returns>The median.</returns>
        </member>
        <member name="M:RAWSimO.Core.Statistics.StatisticsHelper.GetUpperQuartile(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Gets the upper quartile value of a list of values.
            </summary>
            <param name="values">The list of values.</param>
            <returns>The upper quartile.</returns>
        </member>
        <member name="T:RAWSimO.Core.Statistics.UpperBoundHelper">
            <summary>
            Exposes methods to calculate upper bounds on throughput or similar.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Statistics.UpperBoundHelper.CalcUBItemThroughputRate(RAWSimO.Core.Instance,System.Double)">
            <summary>
            Determines the upper bound for the item throughput rate for the given instance and a reference item pile-on.
            The item pile-on is neglected when the total handling is longer than the time it takes to switch the robot in front of the station.
            </summary>
            <param name="instance">The instance to determine the upper bound for.</param>
            <param name="itemPileOn">The reference item pile-on.</param>
            <returns>The upper bound on the item throughput rate.</returns>
        </member>
        <member name="T:RAWSimO.Core.Waypoints.QueueGuard">
            <summary>
            Supplies methods used to manage and guard the entrance, respectively exit, of a semaphore protected area.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Waypoints.QueueGuard.#ctor(RAWSimO.Core.Waypoints.Waypoint,RAWSimO.Core.Waypoints.Waypoint,System.Boolean,System.Boolean,RAWSimO.Core.Waypoints.QueueSemaphore)">
            <summary>
            Creates a new object of this instance.
            </summary>
            <param name="from">The from part of the connection to guard.</param>
            <param name="to">The to part of the connection to guard.</param>
            <param name="entry">Indicates whether this guard is an entry (<code>true</code>) or an exit (<code>exit</code>).</param>
            <param name="barrier">Indicates whether this guard can block the entry dynamically.</param>
            <param name="semaphore">The semaphore associated with this guard.</param>
        </member>
        <member name="P:RAWSimO.Core.Waypoints.QueueGuard.From">
            <summary>
            The from part of this guarded connection.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Waypoints.QueueGuard.To">
            <summary>
            The to part of this guarded connection.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Waypoints.QueueGuard.Entry">
            <summary>
            Indicates whether this guard is an entry (<code>true</code>) or an exit (<code>false</code>).
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Waypoints.QueueGuard.Barrier">
            <summary>
            Indicates whether this guard can block the entry dynamically.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Waypoints.QueueGuard.Semaphore">
            <summary>
            The semaphore associated with this guard.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Waypoints.QueueGuard.IsAccessible">
            <summary>
            Indicates whether the protected area is accessible (not at its limit) or not.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Waypoints.QueueGuard.Pass(RAWSimO.Core.Elements.Bot)">
            <summary>
            Called when a robot passes this guard.
            </summary>
            <param name="bot">The bot that passed the guard.</param>
        </member>
        <member name="M:RAWSimO.Core.Waypoints.QueueGuard.ToString">
            <summary>
            Returns a simple string giving information about the object.
            </summary>
            <returns>A simple string.</returns>
        </member>
        <member name="M:RAWSimO.Core.Waypoints.QueueGuard.GetInfoIsBarrier">
            <summary>
            Indicates whether this guard is monitoring the entrance or exit of a queue.
            </summary>
            <returns><code>true</code> if the guard monitors an entrance, <code>false</code> otherwise.</returns>
        </member>
        <member name="M:RAWSimO.Core.Waypoints.QueueGuard.GetInfoIsEntry">
            <summary>
            Indicates whether this guard serves as an entry to the protected area or an exit.
            </summary>
            <returns><code>true</code> if it is an entry, <code>false</code> otherwise.</returns>
        </member>
        <member name="M:RAWSimO.Core.Waypoints.QueueGuard.GetInfoIsAccessible">
            <summary>
            Indicates whether this guard is currently blocked.
            </summary>
            <returns><code>false</code> if the guard is in block mode, <code>true</code> otherwise.</returns>
        </member>
        <member name="M:RAWSimO.Core.Waypoints.QueueGuard.GetInfoRequests">
            <summary>
            Returns the current number of requests.
            </summary>
            <returns>The number of requests.</returns>
        </member>
        <member name="M:RAWSimO.Core.Waypoints.QueueGuard.GetInfoCapacity">
            <summary>
            Returns the maximal capacity.
            </summary>
            <returns>The maximal capacity.</returns>
        </member>
        <member name="M:RAWSimO.Core.Waypoints.QueueGuard.GetInfoFrom">
            <summary>
            Returns the start waypoint of the guarded path.
            </summary>
            <returns>The start waypoint.</returns>
        </member>
        <member name="M:RAWSimO.Core.Waypoints.QueueGuard.GetInfoTo">
            <summary>
            Returns the end waypoint of the guarded path.
            </summary>
            <returns>The end waypoint.</returns>
        </member>
        <member name="M:RAWSimO.Core.Waypoints.QueueGuard.GetInfoSemaphore">
            <summary>
            Returns the corresponding semaphore.
            </summary>
            <returns>The semaphore this guard belongs to.</returns>
        </member>
        <member name="F:RAWSimO.Core.Waypoints.QueueGuard.GUARD_DIAMETER">
            <summary>
            The diameter of a guard (only relevant for visualization).
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Waypoints.QueueGuard.GetInfoLength">
            <summary>
            The length of the objects' area. (Corresponds to the x-axis)
            </summary>
            <returns>The length of the objects' area.</returns>
        </member>
        <member name="M:RAWSimO.Core.Waypoints.QueueGuard.GetInfoWidth">
            <summary>
            The width of the objects' area. (Corresponds to the y-axis)
            </summary>
            <returns>The width of the objects' area.</returns>
        </member>
        <member name="M:RAWSimO.Core.Waypoints.QueueGuard.GetInfoCenterX">
            <summary>
            Gets the x-position of the center of the object.
            </summary>
            <returns>The x-position.</returns>
        </member>
        <member name="M:RAWSimO.Core.Waypoints.QueueGuard.GetInfoCenterY">
            <summary>
            Gets the y-position of the center of the object.
            </summary>
            <returns>The y-position.</returns>
        </member>
        <member name="M:RAWSimO.Core.Waypoints.QueueGuard.GetInfoTLX">
            <summary>
            Gets the x-position of the bottom left corner of the objects' area.
            </summary>
            <returns>The x-position.</returns>
        </member>
        <member name="M:RAWSimO.Core.Waypoints.QueueGuard.GetInfoTLY">
            <summary>
            Gets the y-position of the bottom left corner of the objects' area.
            </summary>
            <returns>The y-position.</returns>
        </member>
        <member name="M:RAWSimO.Core.Waypoints.QueueGuard.GetInfoID">
            <summary>
            Gets the ID of the object.
            </summary>
            <returns>The ID.</returns>
        </member>
        <member name="M:RAWSimO.Core.Waypoints.QueueGuard.GetInfoCurrentTier">
            <summary>
            Gets the current tier this object is placed on. Can't change in case of an immovable object.
            </summary>
            <returns>The current tier.</returns>
        </member>
        <member name="M:RAWSimO.Core.Waypoints.QueueGuard.GetInfoInstance">
            <summary>
            Returns the active instance belonging to this element.
            </summary>
            <returns>The active instance.</returns>
        </member>
        <member name="T:RAWSimO.Core.Waypoints.QueueSemaphore">
            <summary>
            Supplies methods to control a protected area in which only a previously fixed amount of robots can be at a time.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Waypoints.QueueSemaphore.#ctor(RAWSimO.Core.Instance,System.Int32)">
            <summary>
            Creates a new object of this instance.
            </summary>
            <param name="instance">The instance this element belongs to.</param>
            <param name="maximalCount">The maximal number of bots allowed concurrently in the guarded area.</param>
        </member>
        <member name="P:RAWSimO.Core.Waypoints.QueueSemaphore.Requests">
            <summary>
            The number of bots currently in this area.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Waypoints.QueueSemaphore.Capacity">
            <summary>
            The maximal number of bots allowed concurrently in the guarded area.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Waypoints.QueueSemaphore._bots">
            <summary>
            All bots currently in this area.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Waypoints.QueueSemaphore._guards">
            <summary>
            All entrances and exits of this area.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Waypoints.QueueSemaphore.Guards">
            <summary>
            All entrances and exits of this area.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Waypoints.QueueSemaphore.RegisterGuard(RAWSimO.Core.Waypoints.Waypoint,RAWSimO.Core.Waypoints.Waypoint,System.Boolean,System.Boolean)">
            <summary>
            Register a new entrance / exit of this area.
            </summary>
            <param name="from">The from part of the connecting edge.</param>
            <param name="to">The to part of the connecting edge.</param>
            <param name="entry">Defines whether the connection is an entrance or an exit.</param>
            <param name="barrier">Defines whether the connection is blocked as soon as the limit of requests is reached.</param>
            <returns>The guard protecting the corresponding connection.</returns>
        </member>
        <member name="M:RAWSimO.Core.Waypoints.QueueSemaphore.UnregisterGuard(RAWSimO.Core.Waypoints.QueueGuard)">
            <summary>
            Unregisters the guard from this semaphore.
            </summary>
            <param name="guard">The guard to remove.</param>
        </member>
        <member name="P:RAWSimO.Core.Waypoints.QueueSemaphore.IsAccessible">
            <summary>
            Indicates whether the semaphore is accessible (not at its limit) or not.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Waypoints.QueueSemaphore.Access(RAWSimO.Core.Elements.Bot)">
            <summary>
            Called when a bot passes a guard and enters the protected area.
            </summary>
            <param name="bot">The bot that passed the guard.</param>
        </member>
        <member name="M:RAWSimO.Core.Waypoints.QueueSemaphore.Release(RAWSimO.Core.Elements.Bot)">
            <summary>
            Called when a bot leaves the area.
            </summary>
            <param name="bot">The bot that just left.</param>
        </member>
        <member name="M:RAWSimO.Core.Waypoints.QueueSemaphore.GetIdentfierString">
            <summary>
            Returns a simple string identifying this object in its instance.
            </summary>
            <returns>A simple name identifying the instance element.</returns>
        </member>
        <member name="M:RAWSimO.Core.Waypoints.QueueSemaphore.ToString">
            <summary>
            Returns a simple string giving information about the object.
            </summary>
            <returns>A simple string.</returns>
        </member>
        <member name="M:RAWSimO.Core.Waypoints.QueueSemaphore.GetInfoGuards">
            <summary>
            The number of guards associated with this semaphore.
            </summary>
            <returns>The number of guards belonging to this semaphore.</returns>
        </member>
        <member name="T:RAWSimO.Core.Waypoints.Waypoint">
            <summary>
            Implements one waypoint of the waypoint graph.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Waypoints.Waypoint.#ctor(RAWSimO.Core.Instance)">
            <summary>
            Creates a new waypoint.
            </summary>
            <param name="instance">The instance this waypoint belongs to.</param>
        </member>
        <member name="F:RAWSimO.Core.Waypoints.Waypoint._paths">
            <summary>
            Contains all possible paths to take from this waypoint. The corresponding weights are given by the distance to the other waypoint.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Waypoints.Waypoint.Paths">
            <summary>
            Returns all connected waypoints as an enumeration.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Waypoints.Waypoint.Item(RAWSimO.Core.Waypoints.Waypoint)">
            <summary>
            Returns the distance to the specified waypoint.
            </summary>
            <param name="other">The other waypoint to which the distance is desired.</param>
            <returns>The distance to the other waypoint. Distance might be positive infinity if there is no direct connection or the connection is dynamically blocked.</returns>
        </member>
        <member name="F:RAWSimO.Core.Waypoints.Waypoint._guards">
            <summary>
            Contains all guards used to block certain paths dynamically.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Waypoints.Waypoint._botsApproaching">
            <summary>
            The bots registered at this waypoint (approaching).
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Waypoints.Waypoint._botsLeaving">
            <summary>
            The bots registered at this waypoint (leaving).
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Waypoints.Waypoint.OutputStation">
            <summary>
            Contains the output-station located at this waypoint, if there is one.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Waypoints.Waypoint.InputStation">
            <summary>
            Contains the input-station located at this waypoint, if there is one.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Waypoints.Waypoint.Elevator">
            <summary>
            Contains the elevator connected to this waypoint, if there is one.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Waypoints.Waypoint.Pod">
            <summary>
            Contains the pod located at this waypoint, if there is one.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Waypoints.Waypoint.PodStorageLocation">
            <summary>
            Indicates whether this waypoint can be used to store pods.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Waypoints.Waypoint.IsQueueWaypoint">
            <summary>
            Indicates whether this waypoint belongs to a queue.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Waypoints.Waypoint.QueueManager">
            <summary>
            This fields contains the queue manager this waypoint belongs to, if it belongs to a queue.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Waypoints.Waypoint.AddPath(RAWSimO.Core.Waypoints.Waypoint)">
            <summary>
            Adds a connection to the specified waypoint. The weight is calculated by using the distance.
            </summary>
            <param name="other">The waypoint to connect this one with.</param>
        </member>
        <member name="M:RAWSimO.Core.Waypoints.Waypoint.RemovePath(RAWSimO.Core.Waypoints.Waypoint)">
            <summary>
            Removes the connection to the specified waypoint.
            </summary>
            <param name="other">The waypoint to disconnect</param>
        </member>
        <member name="M:RAWSimO.Core.Waypoints.Waypoint.AddBidirectionalPath(RAWSimO.Core.Waypoints.Waypoint)">
            <summary>
            Adds a connection to the other waypoint that is bidirectional.
            </summary>
            <param name="other">The waypoint to connect to.</param>
        </member>
        <member name="M:RAWSimO.Core.Waypoints.Waypoint.ContainsPath(RAWSimO.Core.Waypoints.Waypoint)">
            <summary>
            Simply indicates whether the specified waypoint is associated with this one.
            </summary>
            <param name="other">The other waypoint.</param>
            <returns><code>true</code> if it is connected to this one, <code>false</code> otherwise</returns>
        </member>
        <member name="M:RAWSimO.Core.Waypoints.Waypoint.GetPathDistance(RAWSimO.Core.Waypoints.Waypoint)">
            <summary>
            Returns the distance to the specified waypoint.
            </summary>
            <param name="other">The other waypoint to calculate the distance to.</param>
            <returns>The distance between this and the other waypoint.</returns>
        </member>
        <member name="M:RAWSimO.Core.Waypoints.Waypoint.AddBotApproaching(RAWSimO.Core.Elements.Bot)">
            <summary>
            Registers the given bot at this waypoint.
            </summary>
            <param name="bot">The bot to register.</param>
        </member>
        <member name="M:RAWSimO.Core.Waypoints.Waypoint.RemoveBotApproaching(RAWSimO.Core.Elements.Bot)">
            <summary>
            De-registers the given bot from this waypoint.
            </summary>
            <param name="bot">The bot to remove.</param>
        </member>
        <member name="M:RAWSimO.Core.Waypoints.Waypoint.AddBotLeaving(RAWSimO.Core.Elements.Bot)">
            <summary>
            Registers the given bot at this waypoint. (approaching bot)
            </summary>
            <param name="bot">The bot to register.</param>
        </member>
        <member name="M:RAWSimO.Core.Waypoints.Waypoint.RemoveBotLeaving(RAWSimO.Core.Elements.Bot)">
            <summary>
            De-registers the given bot from this waypoint.
            </summary>
            <param name="bot">The bot to remove.</param>
        </member>
        <member name="M:RAWSimO.Core.Waypoints.Waypoint.TraverseBot(RAWSimO.Core.Elements.Bot)">
            <summary>
            De-registers the given bot as an approaching bot and registers it as a leaving bot.
            </summary>
            <param name="bot">The bot to register / de-register.</param>
        </member>
        <member name="P:RAWSimO.Core.Waypoints.Waypoint.BotCountOverall">
            <summary>
            Supplies the number of bots currently registered at this waypoint.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Waypoints.Waypoint.AnyBotsOverall">
            <summary>
            Indicates whether any bots are registered at this waypoint.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Waypoints.Waypoint.BotCountApproaching">
            <summary>
            Supplies the number of bots currently approaching the waypoint.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Waypoints.Waypoint.AnyBotsApproaching">
            <summary>
            Indicates whether any bots are approaching the waypoint.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Waypoints.Waypoint.BotCountLeaving">
            <summary>
            Supplies the number of bots currently leaving the waypoint.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Waypoints.Waypoint.AnyBotsLeaving">
            <summary>
            Indicates whether any bots are leaving the waypoint.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Waypoints.Waypoint.RegisterGuard(RAWSimO.Core.Waypoints.QueueGuard)">
            <summary>
            Registers a guard for a connection to another waypoint.
            </summary>
            <param name="guard">The guard monitoring the connection.</param>
        </member>
        <member name="M:RAWSimO.Core.Waypoints.Waypoint.UnregisterGuard(RAWSimO.Core.Waypoints.QueueGuard)">
            <summary>
            Unregisters the guard from this waypoint.
            </summary>
            <param name="guard">The guard to unregister.</param>
        </member>
        <member name="M:RAWSimO.Core.Waypoints.Waypoint.IsAccessible(RAWSimO.Core.Waypoints.Waypoint)">
            <summary>
            Indicates whether the given waypoint is directly accessible from this one.
            </summary>
            <param name="other">The other waypoint.</param>
            <returns><code>true</code> if they are connected and not dynamically blocked, <code>false</code> otherwise.</returns>
        </member>
        <member name="M:RAWSimO.Core.Waypoints.Waypoint.Pass(RAWSimO.Core.Waypoints.Waypoint,RAWSimO.Core.Elements.Bot,System.Collections.Generic.IEnumerable{RAWSimO.Core.Waypoints.QueueSemaphore}@,RAWSimO.Core.Elements.Elevator@)">
            <summary>
            Signals the transition of the given bot from this waypoint to the specified one.
            </summary>
            <param name="waypoint">The waypoint the bot is moving to.</param>
            <param name="bot">The bot that is moving from this waypoint to the given one.</param>
            <param name="elevator">Elevator that was entered.</param>
            <param name="semaphores">An enumeration of all semaphores passed.</param>
        </member>
        <member name="F:RAWSimO.Core.Waypoints.Waypoint._shortestPodPathDistanceToNextOutputStation">
            <summary>
            The distance of the shortest path that is always safe for carrying a pod along it to the next output-station.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Waypoints.Waypoint.ShortestPodPathDistanceToNextOutputStation">
            <summary>
            The distance of the shortest path that is always safe for carrying a pod along it to the next output-station.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Waypoints.Waypoint._shortestPodPathDistanceToNextInputStation">
            <summary>
            The distance of the shortest path that is always safe for carrying a pod along it to the next input-station.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Waypoints.Waypoint.ShortestPodPathDistanceToNextInputStation">
            <summary>
            The distance of the shortest path that is always safe for carrying a pod along it to the next input-station.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Waypoints.Waypoint._statBackwardStar">
            <summary>
            The statistics about all connections ending at this waypoint.
            </summary>
        </member>
        <member name="F:RAWSimO.Core.Waypoints.Waypoint._statForwardStar">
            <summary>
            The statistics about all connections starting at this waypoint.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Waypoints.Waypoint.StatInitTripDataPoint(RAWSimO.Core.Waypoints.Waypoint,RAWSimO.Core.Waypoints.Waypoint,System.Double)">
            <summary>
            Inititalizes the datapoint for a trip.
            </summary>
            <param name="from">The from part of the connection.</param>
            <param name="to">The to part of the connection.</param>
            <param name="travelTime">The first travel time.</param>
            <returns>The datapoint.</returns>
        </member>
        <member name="M:RAWSimO.Core.Waypoints.Waypoint.StatReachedDestination(RAWSimO.Core.Elements.Bot)">
            <summary>
            Has to be called everytime a robot reaches the destination waypoint of a trip.
            </summary>
            <param name="bot">The robot that just completed the trip.</param>
        </member>
        <member name="M:RAWSimO.Core.Waypoints.Waypoint.StatLogUnfinishedTrip(RAWSimO.Core.Elements.Bot)">
            <summary>
            Has to be called by the robot, if the simulation is requesting a writeout of the trip data.
            </summary>
            <param name="bot">The bot that is logging its intermediate trip.</param>
        </member>
        <member name="M:RAWSimO.Core.Waypoints.Waypoint.StatPropagateDestination(RAWSimO.Core.Waypoints.Waypoint,RAWSimO.Core.Elements.Bot)">
            <summary>
            Logs the trip between this waypoint (the 'origin') and the other waypoint (the 'destination').
            </summary>
            <param name="destinationWP">The destination waypoint of the trip to log.</param>
            <param name="bot">The bot that did the trip.</param>
        </member>
        <member name="M:RAWSimO.Core.Waypoints.Waypoint.StatContainsTripDataIn(RAWSimO.Core.Waypoints.Waypoint)">
            <summary>
            Indicates whether there is data for trips incoming from the specified waypoint.
            </summary>
            <param name="wp">The other waypoint.</param>
            <returns><code>true</code> if data is present, <code>false</code> otherwise.</returns>
        </member>
        <member name="M:RAWSimO.Core.Waypoints.Waypoint.StatContainsTripDataOut(RAWSimO.Core.Waypoints.Waypoint)">
            <summary>
            Indicates whether there is data for trips outgoing to the specified waypoint.
            </summary>
            <param name="wp">The other waypoint.</param>
            <returns><code>true</code> if data is present, <code>false</code> otherwise.</returns>
        </member>
        <member name="M:RAWSimO.Core.Waypoints.Waypoint.StatGetTripDataIn(RAWSimO.Core.Waypoints.Waypoint)">
            <summary>
            Returns the trip data for the incoming connection from the given waypoint.
            </summary>
            <param name="wp">The other waypoint.</param>
            <returns>The trip data.</returns>
        </member>
        <member name="M:RAWSimO.Core.Waypoints.Waypoint.StatGetTripDataOut(RAWSimO.Core.Waypoints.Waypoint)">
            <summary>
            Returns the trip data for the outgoing connection to the given waypoint.
            </summary>
            <param name="wp">The other waypoint.</param>
            <returns>The trip data.</returns>
        </member>
        <member name="P:RAWSimO.Core.Waypoints.Waypoint.StatOutgoingTrips">
            <summary>
            The overall count of observed trips outgoing from this waypoint.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Waypoints.Waypoint.StatOutgoingTripTime">
            <summary>
            The overall time spent for trips outgoing from this waypoint.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Waypoints.Waypoint.ResetStatistics">
            <summary>
            Resets all statistics for this element.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Waypoints.Waypoint.GetIdentfierString">
            <summary>
            Returns a simple string identifying this object in its instance.
            </summary>
            <returns>A simple name identifying the instance element.</returns>
        </member>
        <member name="M:RAWSimO.Core.Waypoints.Waypoint.ToString">
            <summary>
            Returns a simple string giving information about the object.
            </summary>
            <returns>A simple string.</returns>
        </member>
        <member name="P:RAWSimO.Core.Waypoints.Waypoint.InfoTagCache">
            <summary>
            Indicates the zone type of this waypoint.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Waypoints.Waypoint.InfoTagProminence">
            <summary>
            If this waypoint is a storage location and the pod utility component is active, then this field contains a value reflecting the rank-ID of the storage location.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Waypoints.Waypoint.GetInfoStorageLocation">
            <summary>
            Indicates whether the waypoint is a storage location.
            </summary>
            <returns><code>true</code> if it is a storage location, <code>false</code> otherwise.</returns>
        </member>
        <member name="M:RAWSimO.Core.Waypoints.Waypoint.GetInfoConnectedWaypoints">
            <summary>
            Gets all outgoing connections of the waypoint.
            </summary>
            <returns>An enumeration of waypoints this waypoint has a directed edge to.</returns>
        </member>
        <member name="F:RAWSimO.Core.Waypoints.Waypoint.WAYPOINT_DIAMETER">
            <summary>
            The diameter of a waypoint (only relevant for visualization).
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Waypoints.Waypoint.GetInfoLength">
            <summary>
            The length of the objects' area. (Corresponds to the x-axis)
            </summary>
            <returns>The length of the objects' area.</returns>
        </member>
        <member name="M:RAWSimO.Core.Waypoints.Waypoint.GetInfoWidth">
            <summary>
            The width of the objects' area. (Corresponds to the y-axis)
            </summary>
            <returns>The width of the objects' area.</returns>
        </member>
        <member name="M:RAWSimO.Core.Waypoints.Waypoint.GetInfoCurrentTier">
            <summary>
            Gets the current tier this object is placed on. Can't change in case of an immovable object.
            </summary>
            <returns>The current tier.</returns>
        </member>
        <member name="M:RAWSimO.Core.Waypoints.Waypoint.GetInfoInstance">
            <summary>
            Returns the active instance belonging to this element.
            </summary>
            <returns>The active instance.</returns>
        </member>
        <member name="P:RAWSimO.Core.Waypoints.Waypoint.RAWSimO#Toolbox#IExposeVolatileID#VolatileID">
            <summary>
            An ID that is useful as an index for listing this item.
            This ID is unique among all <code>ItemDescription</code>s while being as low as possible.
            Note: For now the volatile ID matches the actual ID.
            </summary>
        </member>
        <member name="T:RAWSimO.Core.Waypoints.WaypointGraph">
            <summary>
            Implements the waypointgraph containing all waypoints of one instance.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Waypoints.WaypointGraph.InputStationWaypoints">
            <summary>
            All input-station waypoints.
            </summary>
        </member>
        <member name="P:RAWSimO.Core.Waypoints.WaypointGraph.OutputStationWaypoints">
            <summary>
            All output-station waypoints.
            </summary>
        </member>
        <member name="M:RAWSimO.Core.Waypoints.WaypointGraph.Add(RAWSimO.Core.Waypoints.Waypoint)">
            <summary>
            Adds the new waypoint to the graph.
            </summary>
            <param name="waypoint">The waypoint.</param>
        </member>
        <member name="M:RAWSimO.Core.Waypoints.WaypointGraph.Remove(RAWSimO.Core.Waypoints.Waypoint)">
            <summary>
            Removes the waypoint from the graph.
            </summary>
            <param name="waypoint">The waypoint.</param>
        </member>
        <member name="M:RAWSimO.Core.Waypoints.WaypointGraph.GetWayPoints">
            <summary>
            Gets all waypoints of the graph.
            </summary>
            <returns>All waypoints of the graph per tier.</returns>
        </member>
        <member name="M:RAWSimO.Core.Waypoints.WaypointGraph.GetWaypointsWithinDistance(RAWSimO.Core.Elements.Tier,System.Double,System.Double,System.Double)">
            <summary>
            Gets all waypoints within the given distance around the given position.
            </summary>
            <param name="tier">The tier to look at.</param>
            <param name="x">The x-coordinate.</param>
            <param name="y">The y-coordinate.</param>
            <param name="distance">The distance.</param>
            <returns>All waypoints within the distance around the position.</returns>
        </member>
        <member name="M:RAWSimO.Core.Waypoints.WaypointGraph.GetClosestWaypoint(RAWSimO.Core.Elements.Tier,System.Double,System.Double)">
            <summary>
            Gets the waypoint closest to the given position.
            </summary>
            <param name="tier">The tier to look at.</param>
            <param name="x">The x-coordinate.</param>
            <param name="y">The y-coordinate.</param>
            <returns>The closest waypoint.</returns>
        </member>
        <member name="M:RAWSimO.Core.Waypoints.WaypointGraph.PodPickup(RAWSimO.Core.Elements.Pod)">
            <summary>
            Callback that has to be called when picking up a pod.
            </summary>
            <param name="pod">The pod that was picked up.</param>
        </member>
        <member name="M:RAWSimO.Core.Waypoints.WaypointGraph.PodSetdown(RAWSimO.Core.Elements.Pod,RAWSimO.Core.Waypoints.Waypoint)">
            <summary>
            Callback that has to be called when setting down a pod.
            </summary>
            <param name="pod">The pod that was set down.</param>
            <param name="waypoint">The new storage location of the pod.</param>
        </member>
        <member name="M:RAWSimO.Core.Waypoints.WaypointGraph.GetPodPositions">
            <summary>
            Gets the pod positions.
            </summary>
            <returns>pod positions</returns>
        </member>
    </members>
</doc>
